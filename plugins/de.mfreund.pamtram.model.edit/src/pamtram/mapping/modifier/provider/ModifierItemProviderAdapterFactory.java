/**
 */
package pamtram.mapping.modifier.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.IItemStyledLabelProvider;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import pamtram.mapping.modifier.util.ModifierAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ModifierItemProviderAdapterFactory extends ModifierAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ModifierItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
		supportedTypes.add(IItemStyledLabelProvider.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link pamtram.mapping.modifier.ValueModifierSet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValueModifierSetItemProvider valueModifierSetItemProvider;

	/**
	 * This creates an adapter for a {@link pamtram.mapping.modifier.ValueModifierSet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValueModifierSetAdapter() {
		if (valueModifierSetItemProvider == null) {
			valueModifierSetItemProvider = new ValueModifierSetItemProvider(this);
		}

		return valueModifierSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pamtram.mapping.modifier.SubstringReplacer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubstringReplacerItemProvider substringReplacerItemProvider;

	/**
	 * This creates an adapter for a {@link pamtram.mapping.modifier.SubstringReplacer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubstringReplacerAdapter() {
		if (substringReplacerItemProvider == null) {
			substringReplacerItemProvider = new SubstringReplacerItemProvider(this);
		}

		return substringReplacerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pamtram.mapping.modifier.StringAppender} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringAppenderItemProvider stringAppenderItemProvider;

	/**
	 * This creates an adapter for a {@link pamtram.mapping.modifier.StringAppender}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringAppenderAdapter() {
		if (stringAppenderItemProvider == null) {
			stringAppenderItemProvider = new StringAppenderItemProvider(this);
		}

		return stringAppenderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pamtram.mapping.modifier.UniqueNumberAppender} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UniqueNumberAppenderItemProvider uniqueNumberAppenderItemProvider;

	/**
	 * This creates an adapter for a {@link pamtram.mapping.modifier.UniqueNumberAppender}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUniqueNumberAppenderAdapter() {
		if (uniqueNumberAppenderItemProvider == null) {
			uniqueNumberAppenderItemProvider = new UniqueNumberAppenderItemProvider(this);
		}

		return uniqueNumberAppenderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pamtram.mapping.modifier.StringPrepender} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringPrependerItemProvider stringPrependerItemProvider;

	/**
	 * This creates an adapter for a {@link pamtram.mapping.modifier.StringPrepender}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringPrependerAdapter() {
		if (stringPrependerItemProvider == null) {
			stringPrependerItemProvider = new StringPrependerItemProvider(this);
		}

		return stringPrependerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pamtram.mapping.modifier.MatchToLowerCaseConverter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MatchToLowerCaseConverterItemProvider matchToLowerCaseConverterItemProvider;

	/**
	 * This creates an adapter for a {@link pamtram.mapping.modifier.MatchToLowerCaseConverter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMatchToLowerCaseConverterAdapter() {
		if (matchToLowerCaseConverterItemProvider == null) {
			matchToLowerCaseConverterItemProvider = new MatchToLowerCaseConverterItemProvider(this);
		}

		return matchToLowerCaseConverterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pamtram.mapping.modifier.MatchToUpperCaseConverter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MatchToUpperCaseConverterItemProvider matchToUpperCaseConverterItemProvider;

	/**
	 * This creates an adapter for a {@link pamtram.mapping.modifier.MatchToUpperCaseConverter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMatchToUpperCaseConverterAdapter() {
		if (matchToUpperCaseConverterItemProvider == null) {
			matchToUpperCaseConverterItemProvider = new MatchToUpperCaseConverterItemProvider(this);
		}

		return matchToUpperCaseConverterItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (valueModifierSetItemProvider != null) valueModifierSetItemProvider.dispose();
		if (substringReplacerItemProvider != null) substringReplacerItemProvider.dispose();
		if (stringAppenderItemProvider != null) stringAppenderItemProvider.dispose();
		if (uniqueNumberAppenderItemProvider != null) uniqueNumberAppenderItemProvider.dispose();
		if (stringPrependerItemProvider != null) stringPrependerItemProvider.dispose();
		if (matchToLowerCaseConverterItemProvider != null) matchToLowerCaseConverterItemProvider.dispose();
		if (matchToUpperCaseConverterItemProvider != null) matchToUpperCaseConverterItemProvider.dispose();
	}

}
