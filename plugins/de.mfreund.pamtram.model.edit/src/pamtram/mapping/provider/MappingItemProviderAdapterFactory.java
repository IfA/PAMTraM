/**
 */
package pamtram.mapping.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import pamtram.mapping.util.MappingAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class MappingItemProviderAdapterFactory extends MappingAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public MappingItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link pamtram.mapping.Mapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MappingItemProvider mappingItemProvider;

	/**
	 * This creates an adapter for a {@link pamtram.mapping.Mapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMappingAdapter() {
		if (mappingItemProvider == null) {
			mappingItemProvider = new MappingItemProvider(this);
		}

		return mappingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pamtram.mapping.AttributeMapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeMappingItemProvider attributeMappingItemProvider;

	/**
	 * This creates an adapter for a {@link pamtram.mapping.AttributeMapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeMappingAdapter() {
		if (attributeMappingItemProvider == null) {
			attributeMappingItemProvider = new AttributeMappingItemProvider(this);
		}

		return attributeMappingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pamtram.mapping.CardinalityMapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CardinalityMappingItemProvider cardinalityMappingItemProvider;

	/**
	 * This creates an adapter for a {@link pamtram.mapping.CardinalityMapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCardinalityMappingAdapter() {
		if (cardinalityMappingItemProvider == null) {
			cardinalityMappingItemProvider = new CardinalityMappingItemProvider(this);
		}

		return cardinalityMappingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pamtram.mapping.MappingInstanceSelector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MappingInstanceSelectorItemProvider mappingInstanceSelectorItemProvider;

	/**
	 * This creates an adapter for a {@link pamtram.mapping.MappingInstanceSelector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMappingInstanceSelectorAdapter() {
		if (mappingInstanceSelectorItemProvider == null) {
			mappingInstanceSelectorItemProvider = new MappingInstanceSelectorItemProvider(this);
		}

		return mappingInstanceSelectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pamtram.mapping.ClassMatcher} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClassMatcherItemProvider classMatcherItemProvider;

	/**
	 * This creates an adapter for a {@link pamtram.mapping.ClassMatcher}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClassMatcherAdapter() {
		if (classMatcherItemProvider == null) {
			classMatcherItemProvider = new ClassMatcherItemProvider(this);
		}

		return classMatcherItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pamtram.mapping.SubstringReplacer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubstringReplacerItemProvider substringReplacerItemProvider;

	/**
	 * This creates an adapter for a {@link pamtram.mapping.SubstringReplacer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubstringReplacerAdapter() {
		if (substringReplacerItemProvider == null) {
			substringReplacerItemProvider = new SubstringReplacerItemProvider(this);
		}

		return substringReplacerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pamtram.mapping.StringAppender} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringAppenderItemProvider stringAppenderItemProvider;

	/**
	 * This creates an adapter for a {@link pamtram.mapping.StringAppender}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringAppenderAdapter() {
		if (stringAppenderItemProvider == null) {
			stringAppenderItemProvider = new StringAppenderItemProvider(this);
		}

		return stringAppenderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pamtram.mapping.UniqueNumberAppender} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UniqueNumberAppenderItemProvider uniqueNumberAppenderItemProvider;

	/**
	 * This creates an adapter for a {@link pamtram.mapping.UniqueNumberAppender}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUniqueNumberAppenderAdapter() {
		if (uniqueNumberAppenderItemProvider == null) {
			uniqueNumberAppenderItemProvider = new UniqueNumberAppenderItemProvider(this);
		}

		return uniqueNumberAppenderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pamtram.mapping.StringPrepender} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringPrependerItemProvider stringPrependerItemProvider;

	/**
	 * This creates an adapter for a {@link pamtram.mapping.StringPrepender}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringPrependerAdapter() {
		if (stringPrependerItemProvider == null) {
			stringPrependerItemProvider = new StringPrependerItemProvider(this);
		}

		return stringPrependerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pamtram.mapping.AttributeValueModifierSet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeValueModifierSetItemProvider attributeValueModifierSetItemProvider;

	/**
	 * This creates an adapter for a {@link pamtram.mapping.AttributeValueModifierSet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeValueModifierSetAdapter() {
		if (attributeValueModifierSetItemProvider == null) {
			attributeValueModifierSetItemProvider = new AttributeValueModifierSetItemProvider(this);
		}

		return attributeValueModifierSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pamtram.mapping.MappingHintGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MappingHintGroupItemProvider mappingHintGroupItemProvider;

	/**
	 * This creates an adapter for a {@link pamtram.mapping.MappingHintGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMappingHintGroupAdapter() {
		if (mappingHintGroupItemProvider == null) {
			mappingHintGroupItemProvider = new MappingHintGroupItemProvider(this);
		}

		return mappingHintGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pamtram.mapping.InstantiableMappingHintGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InstantiableMappingHintGroupItemProvider instantiableMappingHintGroupItemProvider;

	/**
	 * This creates an adapter for a {@link pamtram.mapping.InstantiableMappingHintGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInstantiableMappingHintGroupAdapter() {
		if (instantiableMappingHintGroupItemProvider == null) {
			instantiableMappingHintGroupItemProvider = new InstantiableMappingHintGroupItemProvider(this);
		}

		return instantiableMappingHintGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pamtram.mapping.MappingHintGroupImporter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MappingHintGroupImporterItemProvider mappingHintGroupImporterItemProvider;

	/**
	 * This creates an adapter for a {@link pamtram.mapping.MappingHintGroupImporter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMappingHintGroupImporterAdapter() {
		if (mappingHintGroupImporterItemProvider == null) {
			mappingHintGroupImporterItemProvider = new MappingHintGroupImporterItemProvider(this);
		}

		return mappingHintGroupImporterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pamtram.mapping.ExportedMappingHintGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExportedMappingHintGroupItemProvider exportedMappingHintGroupItemProvider;

	/**
	 * This creates an adapter for a {@link pamtram.mapping.ExportedMappingHintGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExportedMappingHintGroupAdapter() {
		if (exportedMappingHintGroupItemProvider == null) {
			exportedMappingHintGroupItemProvider = new ExportedMappingHintGroupItemProvider(this);
		}

		return exportedMappingHintGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pamtram.mapping.ModelConnectionHint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelConnectionHintItemProvider modelConnectionHintItemProvider;

	/**
	 * This creates an adapter for a {@link pamtram.mapping.ModelConnectionHint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelConnectionHintAdapter() {
		if (modelConnectionHintItemProvider == null) {
			modelConnectionHintItemProvider = new ModelConnectionHintItemProvider(this);
		}

		return modelConnectionHintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pamtram.mapping.AttributeMappingSourceElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeMappingSourceElementItemProvider attributeMappingSourceElementItemProvider;

	/**
	 * This creates an adapter for a {@link pamtram.mapping.AttributeMappingSourceElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeMappingSourceElementAdapter() {
		if (attributeMappingSourceElementItemProvider == null) {
			attributeMappingSourceElementItemProvider = new AttributeMappingSourceElementItemProvider(this);
		}

		return attributeMappingSourceElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pamtram.mapping.ComplexAttributeMatcher} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComplexAttributeMatcherItemProvider complexAttributeMatcherItemProvider;

	/**
	 * This creates an adapter for a {@link pamtram.mapping.ComplexAttributeMatcher}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComplexAttributeMatcherAdapter() {
		if (complexAttributeMatcherItemProvider == null) {
			complexAttributeMatcherItemProvider = new ComplexAttributeMatcherItemProvider(this);
		}

		return complexAttributeMatcherItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pamtram.mapping.SimpleAttributeMatcher} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SimpleAttributeMatcherItemProvider simpleAttributeMatcherItemProvider;

	/**
	 * This creates an adapter for a {@link pamtram.mapping.SimpleAttributeMatcher}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSimpleAttributeMatcherAdapter() {
		if (simpleAttributeMatcherItemProvider == null) {
			simpleAttributeMatcherItemProvider = new SimpleAttributeMatcherItemProvider(this);
		}

		return simpleAttributeMatcherItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pamtram.mapping.ComplexAttributeMatcherSourceElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComplexAttributeMatcherSourceElementItemProvider complexAttributeMatcherSourceElementItemProvider;

	/**
	 * This creates an adapter for a {@link pamtram.mapping.ComplexAttributeMatcherSourceElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComplexAttributeMatcherSourceElementAdapter() {
		if (complexAttributeMatcherSourceElementItemProvider == null) {
			complexAttributeMatcherSourceElementItemProvider = new ComplexAttributeMatcherSourceElementItemProvider(this);
		}

		return complexAttributeMatcherSourceElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pamtram.mapping.ModelConnectionHintSourceElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelConnectionHintSourceElementItemProvider modelConnectionHintSourceElementItemProvider;

	/**
	 * This creates an adapter for a {@link pamtram.mapping.ModelConnectionHintSourceElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelConnectionHintSourceElementAdapter() {
		if (modelConnectionHintSourceElementItemProvider == null) {
			modelConnectionHintSourceElementItemProvider = new ModelConnectionHintSourceElementItemProvider(this);
		}

		return modelConnectionHintSourceElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pamtram.mapping.ModelConnectionHintTargetAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelConnectionHintTargetAttributeItemProvider modelConnectionHintTargetAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link pamtram.mapping.ModelConnectionHintTargetAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelConnectionHintTargetAttributeAdapter() {
		if (modelConnectionHintTargetAttributeItemProvider == null) {
			modelConnectionHintTargetAttributeItemProvider = new ModelConnectionHintTargetAttributeItemProvider(this);
		}

		return modelConnectionHintTargetAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pamtram.mapping.MappedAttributeValuePrepender} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MappedAttributeValuePrependerItemProvider mappedAttributeValuePrependerItemProvider;

	/**
	 * This creates an adapter for a {@link pamtram.mapping.MappedAttributeValuePrepender}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMappedAttributeValuePrependerAdapter() {
		if (mappedAttributeValuePrependerItemProvider == null) {
			mappedAttributeValuePrependerItemProvider = new MappedAttributeValuePrependerItemProvider(this);
		}

		return mappedAttributeValuePrependerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pamtram.mapping.MappedAttributeValueAppender} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MappedAttributeValueAppenderItemProvider mappedAttributeValueAppenderItemProvider;

	/**
	 * This creates an adapter for a {@link pamtram.mapping.MappedAttributeValueAppender}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMappedAttributeValueAppenderAdapter() {
		if (mappedAttributeValueAppenderItemProvider == null) {
			mappedAttributeValueAppenderItemProvider = new MappedAttributeValueAppenderItemProvider(this);
		}

		return mappedAttributeValueAppenderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pamtram.mapping.GlobalAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GlobalAttributeItemProvider globalAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link pamtram.mapping.GlobalAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGlobalAttributeAdapter() {
		if (globalAttributeItemProvider == null) {
			globalAttributeItemProvider = new GlobalAttributeItemProvider(this);
		}

		return globalAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pamtram.mapping.GlobalAttributeImporter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GlobalAttributeImporterItemProvider globalAttributeImporterItemProvider;

	/**
	 * This creates an adapter for a {@link pamtram.mapping.GlobalAttributeImporter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGlobalAttributeImporterAdapter() {
		if (globalAttributeImporterItemProvider == null) {
			globalAttributeImporterItemProvider = new GlobalAttributeImporterItemProvider(this);
		}

		return globalAttributeImporterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pamtram.mapping.ComplexAttributeMappingExternalSourceElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComplexAttributeMappingExternalSourceElementItemProvider complexAttributeMappingExternalSourceElementItemProvider;

	/**
	 * This creates an adapter for a {@link pamtram.mapping.ComplexAttributeMappingExternalSourceElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComplexAttributeMappingExternalSourceElementAdapter() {
		if (complexAttributeMappingExternalSourceElementItemProvider == null) {
			complexAttributeMappingExternalSourceElementItemProvider = new ComplexAttributeMappingExternalSourceElementItemProvider(this);
		}

		return complexAttributeMappingExternalSourceElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pamtram.mapping.ComplexModelConnectionHintExternalSourceElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComplexModelConnectionHintExternalSourceElementItemProvider complexModelConnectionHintExternalSourceElementItemProvider;

	/**
	 * This creates an adapter for a {@link pamtram.mapping.ComplexModelConnectionHintExternalSourceElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComplexModelConnectionHintExternalSourceElementAdapter() {
		if (complexModelConnectionHintExternalSourceElementItemProvider == null) {
			complexModelConnectionHintExternalSourceElementItemProvider = new ComplexModelConnectionHintExternalSourceElementItemProvider(this);
		}

		return complexModelConnectionHintExternalSourceElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pamtram.mapping.ComplexAttributeMatcherExternalSourceElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComplexAttributeMatcherExternalSourceElementItemProvider complexAttributeMatcherExternalSourceElementItemProvider;

	/**
	 * This creates an adapter for a {@link pamtram.mapping.ComplexAttributeMatcherExternalSourceElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComplexAttributeMatcherExternalSourceElementAdapter() {
		if (complexAttributeMatcherExternalSourceElementItemProvider == null) {
			complexAttributeMatcherExternalSourceElementItemProvider = new ComplexAttributeMatcherExternalSourceElementItemProvider(this);
		}

		return complexAttributeMatcherExternalSourceElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pamtram.mapping.ExternalMappedAttributeValuePrepender} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExternalMappedAttributeValuePrependerItemProvider externalMappedAttributeValuePrependerItemProvider;

	/**
	 * This creates an adapter for a {@link pamtram.mapping.ExternalMappedAttributeValuePrepender}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExternalMappedAttributeValuePrependerAdapter() {
		if (externalMappedAttributeValuePrependerItemProvider == null) {
			externalMappedAttributeValuePrependerItemProvider = new ExternalMappedAttributeValuePrependerItemProvider(this);
		}

		return externalMappedAttributeValuePrependerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pamtram.mapping.ExternalMappedAttributeValueAppender} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExternalMappedAttributeValueAppenderItemProvider externalMappedAttributeValueAppenderItemProvider;

	/**
	 * This creates an adapter for a {@link pamtram.mapping.ExternalMappedAttributeValueAppender}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExternalMappedAttributeValueAppenderAdapter() {
		if (externalMappedAttributeValueAppenderItemProvider == null) {
			externalMappedAttributeValueAppenderItemProvider = new ExternalMappedAttributeValueAppenderItemProvider(this);
		}

		return externalMappedAttributeValueAppenderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pamtram.mapping.MatchToLowerCaseConverter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MatchToLowerCaseConverterItemProvider matchToLowerCaseConverterItemProvider;

	/**
	 * This creates an adapter for a {@link pamtram.mapping.MatchToLowerCaseConverter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMatchToLowerCaseConverterAdapter() {
		if (matchToLowerCaseConverterItemProvider == null) {
			matchToLowerCaseConverterItemProvider = new MatchToLowerCaseConverterItemProvider(this);
		}

		return matchToLowerCaseConverterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pamtram.mapping.MatchToUpperCaseConverter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MatchToUpperCaseConverterItemProvider matchToUpperCaseConverterItemProvider;

	/**
	 * This creates an adapter for a {@link pamtram.mapping.MatchToUpperCaseConverter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMatchToUpperCaseConverterAdapter() {
		if (matchToUpperCaseConverterItemProvider == null) {
			matchToUpperCaseConverterItemProvider = new MatchToUpperCaseConverterItemProvider(this);
		}

		return matchToUpperCaseConverterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pamtram.mapping.GlobalValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GlobalValueItemProvider globalValueItemProvider;

	/**
	 * This creates an adapter for a {@link pamtram.mapping.GlobalValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGlobalValueAdapter() {
		if (globalValueItemProvider == null) {
			globalValueItemProvider = new GlobalValueItemProvider(this);
		}

		return globalValueItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (mappingItemProvider != null) mappingItemProvider.dispose();
		if (attributeMappingItemProvider != null) attributeMappingItemProvider.dispose();
		if (cardinalityMappingItemProvider != null) cardinalityMappingItemProvider.dispose();
		if (mappingInstanceSelectorItemProvider != null) mappingInstanceSelectorItemProvider.dispose();
		if (classMatcherItemProvider != null) classMatcherItemProvider.dispose();
		if (substringReplacerItemProvider != null) substringReplacerItemProvider.dispose();
		if (stringAppenderItemProvider != null) stringAppenderItemProvider.dispose();
		if (uniqueNumberAppenderItemProvider != null) uniqueNumberAppenderItemProvider.dispose();
		if (stringPrependerItemProvider != null) stringPrependerItemProvider.dispose();
		if (attributeValueModifierSetItemProvider != null) attributeValueModifierSetItemProvider.dispose();
		if (mappingHintGroupItemProvider != null) mappingHintGroupItemProvider.dispose();
		if (instantiableMappingHintGroupItemProvider != null) instantiableMappingHintGroupItemProvider.dispose();
		if (mappingHintGroupImporterItemProvider != null) mappingHintGroupImporterItemProvider.dispose();
		if (exportedMappingHintGroupItemProvider != null) exportedMappingHintGroupItemProvider.dispose();
		if (modelConnectionHintItemProvider != null) modelConnectionHintItemProvider.dispose();
		if (attributeMappingSourceElementItemProvider != null) attributeMappingSourceElementItemProvider.dispose();
		if (complexAttributeMatcherItemProvider != null) complexAttributeMatcherItemProvider.dispose();
		if (simpleAttributeMatcherItemProvider != null) simpleAttributeMatcherItemProvider.dispose();
		if (complexAttributeMatcherSourceElementItemProvider != null) complexAttributeMatcherSourceElementItemProvider.dispose();
		if (modelConnectionHintSourceElementItemProvider != null) modelConnectionHintSourceElementItemProvider.dispose();
		if (modelConnectionHintTargetAttributeItemProvider != null) modelConnectionHintTargetAttributeItemProvider.dispose();
		if (mappedAttributeValuePrependerItemProvider != null) mappedAttributeValuePrependerItemProvider.dispose();
		if (mappedAttributeValueAppenderItemProvider != null) mappedAttributeValueAppenderItemProvider.dispose();
		if (globalAttributeItemProvider != null) globalAttributeItemProvider.dispose();
		if (globalAttributeImporterItemProvider != null) globalAttributeImporterItemProvider.dispose();
		if (complexAttributeMappingExternalSourceElementItemProvider != null) complexAttributeMappingExternalSourceElementItemProvider.dispose();
		if (complexModelConnectionHintExternalSourceElementItemProvider != null) complexModelConnectionHintExternalSourceElementItemProvider.dispose();
		if (complexAttributeMatcherExternalSourceElementItemProvider != null) complexAttributeMatcherExternalSourceElementItemProvider.dispose();
		if (externalMappedAttributeValuePrependerItemProvider != null) externalMappedAttributeValuePrependerItemProvider.dispose();
		if (externalMappedAttributeValueAppenderItemProvider != null) externalMappedAttributeValueAppenderItemProvider.dispose();
		if (matchToLowerCaseConverterItemProvider != null) matchToLowerCaseConverterItemProvider.dispose();
		if (matchToUpperCaseConverterItemProvider != null) matchToUpperCaseConverterItemProvider.dispose();
		if (globalValueItemProvider != null) globalValueItemProvider.dispose();
	}

}
