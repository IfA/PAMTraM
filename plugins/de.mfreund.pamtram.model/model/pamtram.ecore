<?xml version="1.0" encoding="UTF-8"?>
<ecore:EPackage xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" name="pamtram" nsURI="http://mfreund.de/pamtram" nsPrefix="pamtram">
  <eAnnotations source="http://www.eclipse.org/OCL/Import">
    <details key="ecore" value="http://www.eclipse.org/emf/2002/Ecore"/>
    <details key="genlib" value="http://www.et.tu-dresden.de/ifa/agtele/genlib"/>
  </eAnnotations>
  <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
    <details key="documentation" value="Main package of the PAMTraM (Persistent Ambiguous Mapping and Transformation Model) meta-model containing various structuring and general elements."/>
  </eAnnotations>
  <eClassifiers xsi:type="ecore:EClass" name="NamedElement" abstract="true">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A NamedElement provides a human-readable name that can be used to identify it, e.g. when working with the model editor."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A human-readable name for this element. This does not necessarilly need to be unique."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="DeactivatableElement" abstract="true">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A DeactivatableElement can be deactivated by the user (e.g. via the model editor). Deactivated elements will be ignored by the transformation algorithm executing the PAMTraM model."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="deactivated" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean" defaultValueLiteral="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="If set to 'true', this element (and possible sub-elements) will be ignored during a transformation."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="PAMTraM">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="The root element of a PAMTraM model. It mainly acts as container for the various sub-models that are used to define Source- and TargetSections, Mappings, and Conditions."/>
    </eAnnotations>
    <eOperations name="mergeExtends">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="&#x9;// TODO handle hierarchical extensions (an extended section extends&#xD;&#xA;&#x9;&#x9;&#x9;// other sections&#xD;&#xA;&#x9;&#x9;&#x9;// TODO implement a more sophisticated merging strategy that takes into&#xD;&#xA;&#x9;&#x9;&#x9;// account overwriting of hints?&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;/*&#xD;&#xA;&#x9;&#x9;&#x9; * First, we collect each abstract source and target section as well as the concrete sections that reference&#xD;&#xA;&#x9;&#x9;&#x9; * them&#xD;&#xA;&#x9;&#x9;&#x9; */&#xD;&#xA;&#x9;&#x9;&#x9;HashMap&lt;Section, LinkedList&lt;&lt;%pamtram.structure.generic.Section%>>> abstractToConcreteSectionMap = new HashMap&lt;>();&#xD;&#xA;&#x9;&#x9;&#x9;Map&lt;EObject, Collection&lt;&lt;%org.eclipse.emf.ecore.EStructuralFeature.Setting%>>> sourceSettings = &lt;%org.eclipse.emf.ecore.util.EcoreUtil%>.CrossReferencer&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.find(this.getActiveSourceSections());&#xD;&#xA;&#x9;&#x9;&#x9;for (&lt;%pamtram.structure.generic.Section%> section : this.getActiveSourceSections()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (section.isAbstract() &amp;&amp; sourceSettings.containsKey(section)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;LinkedList&lt;&lt;%pamtram.structure.generic.Section%>> concreteSections = new LinkedList&lt;>();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for (&lt;%org.eclipse.emf.ecore.EStructuralFeature.Setting%> setting : sourceSettings.get(section)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (setting.getEStructuralFeature().equals(&lt;%pamtram.structure.generic.impl.GenericPackageImpl%>.eINSTANCE.getSection_Extend())) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;concreteSections.add((&lt;%pamtram.structure.generic.Section%>) setting.getEObject());&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;abstractToConcreteSectionMap.put(section, concreteSections);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;Map&lt;EObject, Collection&lt;&lt;%org.eclipse.emf.ecore.EStructuralFeature.Setting%>>> targetSettings = &lt;%org.eclipse.emf.ecore.util.EcoreUtil%>.CrossReferencer.find(this.getTargetSections());&#xD;&#xA;&#x9;&#x9;&#x9;for (&lt;%pamtram.structure.generic.Section%> section : this.getTargetSections()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (section.isAbstract() &amp;&amp; targetSettings.containsKey(section)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;LinkedList&lt;&lt;%pamtram.structure.generic.Section%>> concreteSections = new LinkedList&lt;>();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for (&lt;%org.eclipse.emf.ecore.EStructuralFeature.Setting%> setting : targetSettings.get(section)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (setting.getEStructuralFeature().equals(&lt;%pamtram.structure.generic.impl.GenericPackageImpl%>.eINSTANCE.getSection_Extend())) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;concreteSections.add((&lt;%pamtram.structure.generic.Section%>) setting.getEObject());&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;abstractToConcreteSectionMap.put(section, concreteSections);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;ArrayList&lt;&lt;%pamtram.mapping.Mapping%>> concreteMappings = new ArrayList&lt;>();&#xD;&#xA;&#x9;&#x9;&#x9;for (&lt;%pamtram.mapping.Mapping%> mapping : this.getActiveMappings()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (!mapping.isAbstract()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;concreteMappings.add(mapping);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;/*&#xD;&#xA;&#x9;&#x9;&#x9; * Now, we copy all elements from the abstract sections to the concrete sections that extend them. In this&#xD;&#xA;&#x9;&#x9;&#x9; * process, we store the associations between the elements from the abstract sections and the copied elements in&#xD;&#xA;&#x9;&#x9;&#x9; * a map.&#xD;&#xA;&#x9;&#x9;&#x9; */&#xD;&#xA;&#x9;&#x9;&#x9;HashMap&lt;EObject, LinkedList&lt;&lt;%org.eclipse.emf.ecore.EObject%>>> abstractToConcreteElementMap = new HashMap&lt;>();&#xD;&#xA;&#x9;&#x9;&#x9;for (&lt;%pamtram.structure.generic.Section%> abstractSection : abstractToConcreteSectionMap.keySet()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;for (&lt;%pamtram.structure.generic.Section%> concreteSection : abstractToConcreteSectionMap.get(abstractSection)) {&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&lt;%pamtram.structure.generic.Section%> copiedSection = &lt;%org.eclipse.emf.ecore.util.EcoreUtil%>.copy(abstractSection);&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;TreeIterator&lt;&lt;%org.eclipse.emf.ecore.EObject%>> originalIterator = &lt;%org.eclipse.emf.ecore.util.EcoreUtil%>&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.getAllContents(&lt;%java.util.Collections%>.singleton(abstractSection));&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;TreeIterator&lt;&lt;%org.eclipse.emf.ecore.EObject%>> copyIterator = &lt;%org.eclipse.emf.ecore.util.EcoreUtil%>.getAllContents(&lt;%java.util.Collections%>.singleton(copiedSection));&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;// these lists will store the elements that we will add to the&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;// concrete section&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ArrayList&lt;&lt;%pamtram.structure.generic.Attribute%>> attributesToAdd = new ArrayList&lt;>();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ArrayList&lt;&lt;%pamtram.structure.generic.Reference%>> referencesToAdd = new ArrayList&lt;>();&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;while (originalIterator.hasNext()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;assert copyIterator.hasNext();&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;%org.eclipse.emf.ecore.EObject%> originalNext = originalIterator.next();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;%org.eclipse.emf.ecore.EObject%> copyNext = copyIterator.next();&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;// if the element is the section itself, we skip it&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (originalNext instanceof &lt;%pamtram.structure.generic.Section%>) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;continue;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;// if the element is a top-level element below the section,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// we add it to the concrete section&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (originalNext.eContainer().equals(abstractSection)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (copyNext instanceof &lt;%pamtram.structure.generic.Attribute%>) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;attributesToAdd.add((&lt;%pamtram.structure.generic.Attribute%>) copyNext);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} else if (copyNext instanceof &lt;%pamtram.structure.generic.Reference%>) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;referencesToAdd.add((&lt;%pamtram.structure.generic.Reference%>) copyNext);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;throw new RuntimeException(&quot;Unsupported element type '&quot; + copyNext.eClass().getName()&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;' encountered when merging extends!&quot;);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;// in any case, we fill the abstractToConcreteElementMap&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LinkedList&lt;&lt;%org.eclipse.emf.ecore.EObject%>> vals = abstractToConcreteElementMap.get(originalNext);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (vals == null) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;vals = new LinkedList&lt;>();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;vals.add(copyNext);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;abstractToConcreteElementMap.put(originalNext, vals);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;/*&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; * now, we add the collected elements to the concrete section; we have to do this after the process of&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; * iterating over the contents - otherwise, the &lt;%org.eclipse.emf.common.util.TreeIterator%> will throw IndexOutOfBoundsExceptions&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; */&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;concreteSection.getAttributes().addAll(attributesToAdd);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;concreteSection.getReferences().addAll(referencesToAdd);&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;/*&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; * Now, we redirect references from concrete sections to elements from the abstract section to the (new)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; * elements from the concrete sections.&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; */&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Map&lt;EObject, Collection&lt;&lt;%org.eclipse.emf.ecore.EStructuralFeature.Setting%>>> refsToAbstractSection = &lt;%org.eclipse.emf.ecore.util.EcoreUtil%>.UsageCrossReferencer&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.findAll(abstractToConcreteElementMap.keySet(), this.getActiveSourceSections().stream()&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.filter(s -> !s.isAbstract()).collect(&lt;%java.util.stream.Collectors%>.toList()));&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for (&lt;%org.eclipse.emf.ecore.EObject%> referencedObject : refsToAbstractSection.keySet()) {&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for (&lt;%org.eclipse.emf.ecore.EStructuralFeature.Setting%> setting : refsToAbstractSection.get(referencedObject).stream()&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.filter(s -> !s.getEStructuralFeature().isDerived()).collect(&lt;%java.util.stream.Collectors%>.toList())) {&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (setting.getEStructuralFeature().equals(&lt;%pamtram.structure.generic.GenericPackage%>.eINSTANCE.getSection_Extend())) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// the 'extend' feature has already been handled&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// above&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;continue;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// this is the element referencing the abstract section&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// (it should be an element of a section)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;%org.eclipse.emf.ecore.EObject%> hintElement = setting.getEObject();&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (setting.getEStructuralFeature().equals(&lt;%pamtram.structure.generic.GenericPackage%>.eINSTANCE.getClass_Container())) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (abstractSection.equals(hintElement) || abstractSection&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.isContainerFor((pamtram.structure.generic.Class&lt;?, ?, ?, ?>) hintElement)) {&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// redirect the reference (we can always use the&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// 'last' of the concrete objects as we just&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// added it above&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;setting.set(abstractToConcreteElementMap.get(referencedObject).getLast());&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;System.out.println(&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;Unhandled reference to element of an abstract section. Maybe consider redirecting this?&quot;);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;/*&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; * Now, we redirect references from MappingHints to elements from the abstract section to the elements&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; * from the concrete sections. Here, we only handle references from concrete mappings as the references&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; * from abstract mappings (and thus from extended hint groups) are handled afterwards when these hint&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; * groups are copied.&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; */&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;refsToAbstractSection = &lt;%org.eclipse.emf.ecore.util.EcoreUtil%>.UsageCrossReferencer.findAll(abstractToConcreteElementMap.keySet(),&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;concreteMappings);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for (&lt;%org.eclipse.emf.ecore.EObject%> referencedObject : refsToAbstractSection.keySet()) {&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for (&lt;%org.eclipse.emf.ecore.EStructuralFeature.Setting%> setting : refsToAbstractSection.get(referencedObject)) {&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// this is the element referencing the abstract section&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// (it should be contained in a &lt;%pamtram.mapping.Mapping%> and be either&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// part of a MappingHintGroup or of a Condition)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;%pamtram.mapping.MappingHintGroupType%> hintGroup = (&lt;%pamtram.mapping.MappingHintGroupType%>) &lt;%de.tud.et.ifa.agtele.emf.AgteleEcoreUtil%>.getAncestorOfKind(&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;setting.getEObject(), &lt;%pamtram.mapping.MappingPackage%>.Literals.MAPPING_HINT_GROUP_TYPE);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;%pamtram.mapping.Mapping%> mapping = (&lt;%pamtram.mapping.Mapping%>) &lt;%de.tud.et.ifa.agtele.emf.AgteleEcoreUtil%>.getAncestorOfKind(setting.getEObject(),&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;%pamtram.mapping.MappingPackage%>.Literals.MAPPING);&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (mapping == null) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;throw new RuntimeException(&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;Internal error during merging of extends. No containing element of type 'Mapping' found for element '&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;+ setting.getEObject() + &quot;'!&quot;);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// We do not need to handle deactivated&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// Mappings/MappingHintGroups&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (hintGroup instanceof &lt;%pamtram.DeactivatableElement%>&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&amp;&amp; ((&lt;%pamtram.DeactivatableElement%>) hintGroup).isDeactivated() || mapping.isDeactivated()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;continue;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/*&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * check if the hint group or its parent mapping equals the section that we just added the&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * concrete elements to&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; */&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (hintGroup != null&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&amp;&amp; (concreteSection.equals(hintGroup.getTargetSection())&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;|| concreteSection.isContainerFor(hintGroup.getTargetSection()))&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;|| concreteSection.equals(mapping.getSourceSection())&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;|| concreteSection.isContainerFor(mapping.getSourceSection())) {&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (setting.getEStructuralFeature().equals(&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;%pamtram.structure.impl.StructurePackageImpl%>.eINSTANCE.getTargetInstanceSelector_ReferenceAttribute())&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&amp;&amp; (setting.getEObject() instanceof &lt;%pamtram.mapping.extended.ContainerSelector%> || setting.getEObject() instanceof &lt;%pamtram.mapping.extended.ReferenceTargetSelector%>)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;|| setting.getEStructuralFeature().equals(&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;%pamtram.structure.impl.StructurePackageImpl%>.eINSTANCE.getTargetInstanceSelector_TargetClass())&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&amp;&amp; (setting.getEObject() instanceof &lt;%pamtram.mapping.extended.ContainerSelector%>  || setting.getEObject() instanceof &lt;%pamtram.mapping.extended.ReferenceTargetSelector%>)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// do nothing as&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// ReferenceTargetSelectors and ContainerSelectors are handled&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// below separately&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// redirect the reference (we can always use the&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// 'last' of the concrete objects as we just&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// added it above&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;setting.set(abstractToConcreteElementMap.get(referencedObject).getLast());&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;/*&#xD;&#xA;&#x9;&#x9;&#x9; * Now, we handle the ContainerSelectors and ReferenceTargetSelectors that we skipped above. We can do this now as we&#xD;&#xA;&#x9;&#x9;&#x9; * now know all concrete TargetSections that are a possible match for each &lt;%pamtram.mapping.extended.ContainerSelector%>/&lt;%pamtram.mapping.extended.ReferenceTargetSelector%> that points to an&#xD;&#xA;&#x9;&#x9;&#x9; * abstract &lt;%pamtram.structure.target.TargetSection%>.&#xD;&#xA;&#x9;&#x9;&#x9; */&#xD;&#xA;&#x9;&#x9;&#x9;for (&lt;%pamtram.structure.generic.Section%> abstractSection : abstractToConcreteSectionMap.keySet()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;for (&lt;%pamtram.structure.generic.Section%> concreteSection : abstractToConcreteSectionMap.get(abstractSection)) {&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;Map&lt;EObject, Collection&lt;&lt;%org.eclipse.emf.ecore.EStructuralFeature.Setting%>>> refsToAbstractSection = &lt;%org.eclipse.emf.ecore.util.EcoreUtil%>.UsageCrossReferencer&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.findAll(abstractToConcreteElementMap.keySet(), concreteMappings);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for (&lt;%org.eclipse.emf.ecore.EObject%> referencedObject : refsToAbstractSection.keySet()) {&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for (&lt;%org.eclipse.emf.ecore.EStructuralFeature.Setting%> setting : refsToAbstractSection.get(referencedObject)) {&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// this is the element referencing the abstract section&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// (it should be contained in a &lt;%pamtram.mapping.Mapping%> and be either&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// part of a MappingHintGroup or of a Condition)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;%pamtram.mapping.MappingHintGroupType%> hintGroup = (&lt;%pamtram.mapping.MappingHintGroupType%>) &lt;%de.tud.et.ifa.agtele.emf.AgteleEcoreUtil%>.getAncestorOfKind(&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;setting.getEObject(), &lt;%pamtram.mapping.MappingPackage%>.Literals.MAPPING_HINT_GROUP_TYPE);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;%pamtram.mapping.Mapping%> mapping = (&lt;%pamtram.mapping.Mapping%>) &lt;%de.tud.et.ifa.agtele.emf.AgteleEcoreUtil%>.getAncestorOfKind(setting.getEObject(),&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;%pamtram.mapping.MappingPackage%>.Literals.MAPPING);&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (mapping == null) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;throw new RuntimeException(&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;Internal error during merging of extends. No containing element of type 'Mapping' found for element '&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;+ setting.getEObject() + &quot;'!&quot;);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// We do not need to handle deactivated&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// Mappings/MappingHintGroups&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (hintGroup instanceof &lt;%pamtram.DeactivatableElement%>&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&amp;&amp; ((&lt;%pamtram.DeactivatableElement%>) hintGroup).isDeactivated() || mapping.isDeactivated()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;continue;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (setting.getEObject() instanceof &lt;%pamtram.mapping.extended.ContainerSelector%>) {&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (setting.getEStructuralFeature()&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.equals(&lt;%pamtram.structure.impl.StructurePackageImpl%>.eINSTANCE.getTargetInstanceSelector_TargetClass())) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;continue;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} else if (!setting.getEStructuralFeature().equals(&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;%pamtram.structure.impl.StructurePackageImpl%>.eINSTANCE.getTargetInstanceSelector_ReferenceAttribute())) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;throw new RuntimeException(&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;Internal error during redirection of ContainerSelectors in 'mergeExtends'...!&quot;);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// For Selectors, we must not simply redirect but we create a new Selector&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;%pamtram.structure.TargetInstanceSelector%> original = (&lt;%pamtram.structure.TargetInstanceSelector%>) setting.getEObject();&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for (&lt;%org.eclipse.emf.ecore.EObject%> concreteTargetSectionAttribute : abstractToConcreteElementMap&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.get(referencedObject)) {&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (!(concreteTargetSectionAttribute instanceof &lt;%pamtram.structure.target.TargetSectionAttribute%>)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;throw new RuntimeException(&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;Internal error during merging of extends! Object of type 'TargetSectionClass' expected.&quot;);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;%pamtram.structure.TargetInstanceSelector%> copy = &lt;%org.eclipse.emf.ecore.util.EcoreUtil%>.copy(original);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;copy.setReferenceAttribute((&lt;%pamtram.structure.target.TargetSectionAttribute%>) concreteTargetSectionAttribute);&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Collection&lt;&lt;%org.eclipse.emf.ecore.EObject%>> possibleTargetClasses = new ArrayList&lt;>();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (original.getTargetClass() instanceof &lt;%pamtram.structure.target.TargetSection%>) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;possibleTargetClasses&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.addAll(abstractToConcreteSectionMap.get(original.getTargetClass()));&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;possibleTargetClasses&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.addAll(abstractToConcreteElementMap.get(original.getTargetClass()));&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Optional&lt;&lt;%org.eclipse.emf.ecore.EObject%>> targetClass = possibleTargetClasses.stream()&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.filter(s -> s instanceof &lt;%pamtram.structure.target.TargetSectionClass%>&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&amp;&amp; ((&lt;%pamtram.structure.target.TargetSectionClass%>) s).getContainingSection().equals(&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;((&lt;%pamtram.structure.target.TargetSectionAttribute%>) concreteTargetSectionAttribute)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.getContainingSection()))&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.findAny();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (targetClass.isPresent()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;copy.setTargetClass((&lt;%pamtram.structure.target.TargetSectionClass%>) targetClass.get());&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;hintGroup.getMappingHints().add((&lt;%pamtram.mapping.extended.MappingHint%>)copy);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;/*&#xD;&#xA;&#x9;&#x9;&#x9; * Finally, we can copy the abstract hint groups&#xD;&#xA;&#x9;&#x9;&#x9; */&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;// collect each abstract hint group as well as the concrete hint groups&#xD;&#xA;&#x9;&#x9;&#x9;// that reference them&#xD;&#xA;&#x9;&#x9;&#x9;HashMap&lt;MappingHintGroupType, LinkedList&lt;&lt;%pamtram.mapping.MappingHintGroupType%>>> abstractToConcreteHintGroupMap = new HashMap&lt;>();&#xD;&#xA;&#x9;&#x9;&#x9;Map&lt;EObject, Collection&lt;&lt;%org.eclipse.emf.ecore.EStructuralFeature.Setting%>>> mappingSettings = &lt;%org.eclipse.emf.ecore.util.EcoreUtil%>.CrossReferencer.find(this.getActiveMappings());&#xD;&#xA;&#x9;&#x9;&#x9;for (&lt;%org.eclipse.emf.ecore.EObject%> element : mappingSettings.keySet()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (element instanceof &lt;%pamtram.mapping.MappingHintGroupType%> &amp;&amp; ((&lt;%pamtram.mapping.Mapping%>) element.eContainer()).isAbstract()) {&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;// We do not need to handle deactivated MappingHintGroups&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (element instanceof &lt;%pamtram.DeactivatableElement%> &amp;&amp; ((&lt;%pamtram.DeactivatableElement%>) element).isDeactivated()&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;|| element.eContainer() instanceof &lt;%pamtram.DeactivatableElement%>&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&amp;&amp; ((&lt;%pamtram.DeactivatableElement%>) element.eContainer()).isDeactivated()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;continue;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;LinkedList&lt;&lt;%pamtram.mapping.MappingHintGroupType%>> concreteHintGroups = new LinkedList&lt;>();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for (&lt;%org.eclipse.emf.ecore.EStructuralFeature.Setting%> setting : mappingSettings.get(element)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (setting.getEStructuralFeature()&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.equals(&lt;%pamtram.mapping.impl.MappingPackageImpl%>.eINSTANCE.getMappingHintGroupType_Extend())) {&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// only copy hints to activated hint groups&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (setting.getEObject() instanceof &lt;%pamtram.DeactivatableElement%>&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&amp;&amp; ((&lt;%pamtram.DeactivatableElement%>) setting.getEObject()).isDeactivated()&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;|| setting.getEObject().eContainer() instanceof &lt;%pamtram.DeactivatableElement%>&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&amp;&amp; ((&lt;%pamtram.DeactivatableElement%>) setting.getEObject().eContainer()).isDeactivated()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;continue;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;concreteHintGroups.add((&lt;%pamtram.mapping.MappingHintGroupType%>) setting.getEObject());&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;abstractToConcreteHintGroupMap.put((&lt;%pamtram.mapping.MappingHintGroupType%>) element, concreteHintGroups);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;// copy the contained elements (hints and condition) to the concrete&#xD;&#xA;&#x9;&#x9;&#x9;// hint groups&#xD;&#xA;&#x9;&#x9;&#x9;for (&lt;%pamtram.mapping.MappingHintGroupType%> abstractHintGroup : abstractToConcreteHintGroupMap.keySet()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;for (&lt;%pamtram.mapping.MappingHintGroupType%> concreteHintGroup : abstractToConcreteHintGroupMap.get(abstractHintGroup)) {&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;Collection&lt;&lt;%pamtram.mapping.extended.MappingHintBaseType%>> hintsToCopy = new BasicEList&lt;>();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;/*&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; * Collect all hints that will get copied. Those are all mapping hints (including ContainerSelectors)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; * that are not 'overwritten' by hints of the concrete HintGroup.&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; */&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for (&lt;%pamtram.mapping.extended.MappingHint%> abstractHint : abstractHintGroup.getActiveMappingHints()) {&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;// An abstract hint is copied if it is not overwritten&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (concreteHintGroup.getMappingHints().stream()&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.noneMatch(h -> h.getOverwrite() != null &amp;&amp; h.getOverwrite().equals(abstractHint))) {&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;hintsToCopy.add(abstractHint);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;// Retrieve a possible condition to be copied&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;%pamtram.condition.ComplexCondition%> condition = null;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (abstractHintGroup instanceof &lt;%pamtram.ConditionalElement%>) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;condition = ((&lt;%pamtram.ConditionalElement%>) abstractHintGroup).getLocalCondition() != null&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;? ((&lt;%pamtram.ConditionalElement%>) abstractHintGroup).getLocalCondition()&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;: ((&lt;%pamtram.ConditionalElement%>) abstractHintGroup).getSharedCondition();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;%pamtram.condition.ComplexCondition%> copiedCondition = condition != null ? &lt;%org.eclipse.emf.ecore.util.EcoreUtil%>.copy(condition) : null;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;Collection&lt;&lt;%pamtram.mapping.extended.MappingHintBaseType%>> copiedHints = &lt;%org.eclipse.emf.ecore.util.EcoreUtil%>.copyAll(hintsToCopy);&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;/*&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; * make sure that all references to elements from the abstract sections are redirected to the concrete&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; * sections that we created earlier&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; */&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Collection&lt;&lt;%org.eclipse.emf.ecore.EObject%>> copiedElements = new ArrayList&lt;>(copiedHints);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (copiedCondition != null) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;copiedElements.add(copiedCondition);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for (&lt;%org.eclipse.emf.ecore.EObject%> copiedElement : copiedElements) {&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;/*&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * these are the references from the copied hint (that will get added to the concrete hint group) to&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * elements from abstract sections&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; */&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Map&lt;EObject, Collection&lt;&lt;%org.eclipse.emf.ecore.EStructuralFeature.Setting%>>> refsToAbstractSection = &lt;%org.eclipse.emf.ecore.util.EcoreUtil%>.UsageCrossReferencer&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.findAll(abstractToConcreteElementMap.keySet(), copiedElement);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for (&lt;%org.eclipse.emf.ecore.EObject%> referencedObject : refsToAbstractSection.keySet()) {&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/*&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * based on the type of hint element that we are handling (local or external), source and target&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * sections or their containers are checked&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; */&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;boolean local = true;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (refsToAbstractSection.get(referencedObject).size() > 1) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;throw new RuntimeException(&quot;Internal Error! The element '&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;+ (copiedElement instanceof &lt;%pamtram.NamedElement%> ? ((&lt;%pamtram.NamedElement%>) copiedElement).getName()&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;: copiedElement.toString())&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;' in the hint group '&quot; + abstractHintGroup.getName()&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;' holds multiple references to the same object of an abstract section ('&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;+ referencedObject + &quot;'.&quot;);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (refsToAbstractSection.get(referencedObject).iterator().next()&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.getEObject() instanceof &lt;%pamtram.structure.ExternalDynamicSourceElement%>) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;local = false;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ArrayList&lt;&lt;%pamtram.structure.generic.Section%>> sourceAndTargetSections = new ArrayList&lt;>();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;%pamtram.structure.source.SourceSection%> sourceSection = ((&lt;%pamtram.mapping.Mapping%>) concreteHintGroup.eContainer()).getSourceSection();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (local) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sourceAndTargetSections.add(sourceSection);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;while (sourceSection.getContainer() != null) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sourceSection = sourceSection.getContainer().getContainingSection();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sourceAndTargetSections.add(sourceSection);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;%pamtram.structure.target.TargetSection%> targetSection = concreteHintGroup.getTargetSection();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (local) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sourceAndTargetSections.add(targetSection);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;while (targetSection.getContainer() != null) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;targetSection = targetSection.getContainer().getContainingSection();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sourceAndTargetSections.add(targetSection);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/*&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * these are possible targets for the redirection of references to the referenced object&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; */&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LinkedList&lt;&lt;%org.eclipse.emf.ecore.EObject%>> possibleTargets = abstractToConcreteElementMap.get(referencedObject);&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;boolean found = false;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;%org.eclipse.emf.ecore.EObject%> target = null; // this will contain the new&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// value for the reference&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for (&lt;%org.eclipse.emf.ecore.EObject%> possibleTarget : possibleTargets) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;%pamtram.structure.generic.Section%> containingSection = ((&lt;%pamtram.structure.generic.MetaModelElement%>) possibleTarget).getContainingSection();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (sourceAndTargetSections.contains(containingSection)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (found == false) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;found = true;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;target = possibleTarget;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// this should not happen, should it?&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;throw new RuntimeException(&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;Internal error! Multiple targets found for redirection of element '&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;+ referencedObject + &quot;' in.&quot;);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (found == false) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;throw new RuntimeException(&quot;Internal error! No target found for redirection of element '&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;+ referencedObject + &quot;'.&quot;);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for (&lt;%org.eclipse.emf.ecore.EStructuralFeature.Setting%> setting : refsToAbstractSection.get(referencedObject)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;setting.set(target);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;// Finally, we add the copied hints and condition to the&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;// concrete hint group&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;concreteHintGroup.getMappingHints().addAll(0, (Collection&lt;? extends &lt;%pamtram.mapping.extended.MappingHint%>>) copiedHints);&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (copiedCondition != null &amp;&amp; concreteHintGroup instanceof &lt;%pamtram.ConditionalElement%>) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;%pamtram.ConditionalElement%> concreteHintGroupCast = (&lt;%pamtram.ConditionalElement%>) concreteHintGroup;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// If there is already a condition present in the concrete&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// HintGroup, we have to create a new condition that will&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// conjunct both conditions&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (concreteHintGroupCast.getLocalCondition() != null) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;%pamtram.condition.And%> and = &lt;%pamtram.condition.ConditionFactory%>.eINSTANCE.createAnd();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and.getLocalCondParts().add(concreteHintGroupCast.getLocalCondition());&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and.getLocalCondParts().add(copiedCondition);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;concreteHintGroupCast.setLocalCondition(and);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} else if (concreteHintGroupCast.getSharedCondition() != null) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;%pamtram.condition.And%> and = &lt;%pamtram.condition.ConditionFactory%>.eINSTANCE.createAnd();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and.getLocalCondParts().add(&lt;%org.eclipse.emf.ecore.util.EcoreUtil%>.copy(concreteHintGroupCast.getSharedCondition()));&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and.getLocalCondParts().add(copiedCondition);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;concreteHintGroupCast.setSharedCondition(null);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;concreteHintGroupCast.setLocalCondition(and);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;concreteHintGroupCast.setLocalCondition(copiedCondition);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;/*&#xD;&#xA;&#x9;&#x9;&#x9; * At the end, we clear the values of the 'extend' references of the concrete elements as these are no longer&#xD;&#xA;&#x9;&#x9;&#x9; * needed.&#xD;&#xA;&#x9;&#x9;&#x9; */&#xD;&#xA;&#x9;&#x9;&#x9;for (Entry&lt;Section, LinkedList&lt;&lt;%pamtram.structure.generic.Section%>>> entry : abstractToConcreteSectionMap.entrySet()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;for (&lt;%pamtram.structure.generic.Section%> concreteSection : entry.getValue()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;concreteSection.getExtend().remove(entry.getKey());&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;for (Entry&lt;MappingHintGroupType, LinkedList&lt;&lt;%pamtram.mapping.MappingHintGroupType%>>> entry : abstractToConcreteHintGroupMap&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.entrySet()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;for (&lt;%pamtram.mapping.MappingHintGroupType%> concreteHintGroup : entry.getValue()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;concreteHintGroup.getExtend().remove(entry.getKey());&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getActiveSourceSectionModels" upperBound="-1" eType="#//SourceSectionModel">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="Object[] sourceSectionModels = Stream.concat(this.getSourceSectionModels().stream(), this.getSharedSourceSectionModels().stream()).filter(s -> !s.isDeactivated()).toArray();&#xD;&#xA;return new &lt;%org.eclipse.emf.common.util.BasicEList%>.UnmodifiableEList&lt;>(sourceSectionModels.length, sourceSectionModels);"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getActiveSourceSections" upperBound="-1" eType="#//structure/source/SourceSection">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="Object[] sourceSections = getActiveSourceSectionModels().stream().flatMap(s -> s.getSections().stream()).filter(s -> !s.isDeactivated()).toArray();&#xD;&#xA;return new &lt;%org.eclipse.emf.common.util.BasicEList%>.UnmodifiableEList&lt;>(sourceSections.length, sourceSections);"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="sourceSectionModels" upperBound="-1"
        eType="#//SourceSectionModel" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The list of SourceSectionModels contained in this PAMTraM instance.&#xD;&#xA;&lt;br />&#xD;&#xA;Together with the list of 'sharedSourceSectionModels', these make up the list of SourceSectionModels providing the SourceSections (LHS) that will be used during a transformation."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="sharedSourceSectionModels"
        upperBound="-1" eType="#//SourceSectionModel">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The list of external SourceSectionModels (stored in their own files with the file-ending '*.pamtram.source') referenced by this PAMTraM instance.&#xD;&#xA;&lt;br />&#xD;&#xA;Together with the list of (local) 'sourceSectionModels', these make up the list of SourceSectionModels providing the SourceSections (LHS) that will be used during a transformation."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="targetSectionModels" upperBound="-1"
        eType="#//TargetSectionModel" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The list of TargetSectionModels contained in this PAMTraM instance.&#xD;&#xA;&lt;br />&#xD;&#xA;Together with the list of 'sharedTargetSectionModels', these make up the list of TargetSectionModels providing the TargetSections (RHS) that will be used during a transformation."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="sharedTargetSectionModels"
        upperBound="-1" eType="#//TargetSectionModel">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The list of external TargetSectionModels (stored in their own files with the file-ending '*.pamtram.target') referenced by this PAMTraM instance.&#xD;&#xA;&lt;br />&#xD;&#xA;Together with the list of (local) 'targetSectionModels', these make up the list of TargetSectionModels providing the TargetSections (RHS) that will be used during a transformation."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="mappingModels" upperBound="-1"
        eType="#//MappingModel" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The list of MappingModels contained in this PAMTraM instance.&#xD;&#xA;&lt;br />&#xD;&#xA;Together with the list of 'sharedMappingModels', these make up the list of MappingModels defining the Mappings that will be executed during a transformation."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="sharedMappingModels" upperBound="-1"
        eType="#//MappingModel">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The list of external MappingSectionModels (stored in their own files with the file-ending '*.pamtram.mapping') referenced by this PAMTraM instance.&#xD;&#xA;&lt;br />&#xD;&#xA;Together with the list of (local) 'mappingSectionModels', these make up the list of MappingModels defining the Mappings that will be executed during a transformation."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="sourceSections" upperBound="-1"
        eType="#//structure/source/SourceSection" changeable="false" volatile="true"
        transient="true" derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="get" value="List&lt;SourceSection> sourceSections = Stream&#xD;&#xA;&#x9;&#x9;.concat(this.getSourceSectionModels().stream(),&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;this.getSharedSourceSectionModels().stream())&#xD;&#xA;&#x9;&#x9;.flatMap(s -> s.getSections().stream()).collect(Collectors.toList());&#xD;&#xA;return new EcoreEList.UnmodifiableEList&lt;>(this, PamtramPackage.Literals.PAM_TRA_M__SOURCE_SECTIONS,&#xD;&#xA;&#x9;&#x9;sourceSections.size(), sourceSections.toArray());"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The list of all SourceSections (LHS) contained in all local and global/shared SourceSectionModels."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="targetSections" upperBound="-1"
        eType="#//structure/target/TargetSection" changeable="false" volatile="true"
        transient="true" derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="get" value="List&lt;TargetSection> targetSections = Stream&#xD;&#xA;&#x9;&#x9;.concat(this.getTargetSectionModels().stream(),&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;this.getSharedTargetSectionModels().stream())&#xD;&#xA;&#x9;&#x9;.flatMap(s -> s.getSections().stream()).collect(Collectors.toList());&#xD;&#xA;return new EcoreEList.UnmodifiableEList&lt;>(this, PamtramPackage.Literals.PAM_TRA_M__TARGET_SECTIONS,&#xD;&#xA;&#x9;&#x9;targetSections.size(), targetSections.toArray());"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The list of all TargetSections (RHS) contained in all local and global/shared TargetSectionModels."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="mappings" upperBound="-1"
        eType="#//mapping/Mapping" changeable="false" volatile="true" transient="true"
        derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="get" value="&lt;%java.util.List%>&lt;&lt;%pamtram.mapping.Mapping%>> mappings = &lt;%java.util.stream.Stream%>.concat(this.getMappingModels().stream(), this.getSharedMappingModels().stream())&#xD;&#xA;&#x9;&#x9;.flatMap(s -> s.getMappings().stream()).collect(Collectors.toList());&#xD;&#xA;return new &lt;%org.eclipse.emf.ecore.util.EcoreEList%>.UnmodifiableEList&lt;>(this, &lt;%pamtram.PamtramPackage%>.Literals.PAM_TRA_M__MAPPINGS,&#xD;&#xA;&#x9;&#x9;mappings.size(), mappings.toArray());"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The list of all Mappings contained in all local and global/shared MappingModels."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="activeMappings" upperBound="-1"
        eType="#//mapping/Mapping" changeable="false" volatile="true" transient="true"
        derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="get" value="List&lt;&lt;%pamtram.mapping.Mapping%>> mappings = &lt;%java.util.stream.Stream%>.concat(this.getMappingModels().stream(), this.getSharedMappingModels().stream())&#xD;&#xA;&#x9;&#x9;.filter(m -> !m.isDeactivated()).flatMap(s -> s.getActiveMappings().stream())&#xD;&#xA;&#x9;&#x9;.filter(m -> m.getSourceSection() == null || !m.getSourceSection().isDeactivated())&#xD;&#xA;&#x9;&#x9;.collect(&lt;%java.util.stream.Collectors%>.toList());&#xD;&#xA;return new &lt;%org.eclipse.emf.ecore.util.EcoreEList%>.UnmodifiableEList&lt;>(this, &lt;%pamtram.PamtramPackage%>.Literals.PAM_TRA_M__ACTIVE_MAPPINGS,&#xD;&#xA;&#x9;&#x9;mappings.size(), mappings.toArray());"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The list of all 'active' Mappings contained in all local and global/shared MappingModels.&#xD;&#xA;&lt;br />&#xD;&#xA;A Mapping is active if its 'deactivated' attribute is not set to 'true'."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="globalValues" upperBound="-1"
        eType="#//FixedValue" changeable="false" volatile="true" transient="true"
        derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="get" value="&lt;%java.util.List%>&lt;FixedValue> globalValues = &lt;%java.util.stream.Stream%>.concat(this.getMappingModels().stream(), this.getSharedMappingModels().stream())&#xD;&#xA;&#x9;&#x9;.flatMap(s -> s.getGlobalValues().stream()).collect(&lt;%java.util.stream.Collectors%>.toList());&#xD;&#xA;return new &lt;%org.eclipse.emf.ecore.util.EcoreEList%>.UnmodifiableEList&lt;>(this, &lt;%pamtram.PamtramPackage%>.Literals.PAM_TRA_M__GLOBAL_VALUES,&#xD;&#xA;&#x9;&#x9;globalValues.size(), globalValues.toArray());"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The list of all GlobalValues contained in all local and global/shared MappingModels."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="globalAttributes" upperBound="-1"
        eType="#//mapping/GlobalAttribute" changeable="false" volatile="true" transient="true"
        derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="get" value="&lt;%java.util.List%>&lt;GlobalAttribute> globalAttributes = &lt;%java.util.stream.Stream%>.concat(this.getMappingModels().stream(), this.getSharedMappingModels().stream())&#xD;&#xA;&#x9;&#x9;.flatMap(s -> s.getGlobalAttributes().stream()).collect(&lt;%java.util.stream.Collectors%>.toList());&#xD;&#xA;return new &lt;%org.eclipse.emf.ecore.util.EcoreEList%>.UnmodifiableEList&lt;>(this, &lt;%pamtram.PamtramPackage%>.Literals.PAM_TRA_M__GLOBAL_ATTRIBUTES,&#xD;&#xA;&#x9;&#x9;globalAttributes.size(), globalAttributes.toArray());"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The list of all GlobalAttributes contained in all local and global/shared MappingModels."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="modifierSets" upperBound="-1"
        eType="#//mapping/modifier/ValueModifierSet" changeable="false" volatile="true"
        transient="true" derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="get" value="&lt;%java.util.List%>&lt;&lt;%pamtram.mapping.modifier.ValueModifierSet%>> modifierSets = &lt;%java.util.stream.Stream%>.concat(this.getMappingModels().stream(), this.getSharedMappingModels().stream())&#xD;&#xA;&#x9;&#x9;.flatMap(s -> s.getModifierSets().stream()).collect(&lt;%java.util.stream.Collectors%>.toList());&#xD;&#xA;return new &lt;%org.eclipse.emf.ecore.util.EcoreEList%>.UnmodifiableEList&lt;>(this, &lt;%pamtram.PamtramPackage%>.Literals.PAM_TRA_M__MODIFIER_SETS,&#xD;&#xA;&#x9;&#x9;modifierSets.size(), modifierSets.toArray());"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The list of all ValueModifierSets contained in all local and global/shared MappingModels."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="conditionModels" upperBound="-1"
        eType="#//ConditionModel" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The list of ConditionModels contained in this PAMTraM instance.&#xD;&#xA;&lt;br />&#xD;&#xA;Together with the list of 'sharedConditionModels', these make up the list of ConditionModels defining the global Conditions that can be referenced by other elements in the PAMTraM model."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="sharedConditionModels"
        upperBound="-1" eType="#//ConditionModel">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The list of external ConditionModels (stored in their own files with the file-ending '*.pamtram.condition') referenced by this PAMTraM instance.&#xD;&#xA;&lt;br />&#xD;&#xA;Together with the list of (local) 'conditionModels', these make up the list of ConditionModels defining the global Conditions that can be referenced by other elements in the PAMTraM model."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="SectionModel" abstract="true" eSuperTypes="#//NamedElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="SectionModels contain a list of Sections representing element structures. All element structures need to be based on the meta-model/EPackage identified by the 'metaModelPackage' reference."/>
    </eAnnotations>
    <eTypeParameters name="S">
      <eBounds eClassifier="#//structure/generic/Section">
        <eTypeArguments eTypeParameter="#//SectionModel/S"/>
        <eTypeArguments eTypeParameter="#//SectionModel/C"/>
        <eTypeArguments eTypeParameter="#//SectionModel/R"/>
        <eTypeArguments eTypeParameter="#//SectionModel/A"/>
      </eBounds>
    </eTypeParameters>
    <eTypeParameters name="C">
      <eBounds eClassifier="#//structure/generic/Class">
        <eTypeArguments eTypeParameter="#//SectionModel/S"/>
        <eTypeArguments eTypeParameter="#//SectionModel/C"/>
        <eTypeArguments eTypeParameter="#//SectionModel/R"/>
        <eTypeArguments eTypeParameter="#//SectionModel/A"/>
      </eBounds>
    </eTypeParameters>
    <eTypeParameters name="R">
      <eBounds eClassifier="#//structure/generic/Reference">
        <eTypeArguments eTypeParameter="#//SectionModel/S"/>
        <eTypeArguments eTypeParameter="#//SectionModel/C"/>
        <eTypeArguments eTypeParameter="#//SectionModel/R"/>
        <eTypeArguments eTypeParameter="#//SectionModel/A"/>
      </eBounds>
    </eTypeParameters>
    <eTypeParameters name="A">
      <eBounds eClassifier="#//structure/generic/Attribute">
        <eTypeArguments eTypeParameter="#//SectionModel/S"/>
        <eTypeArguments eTypeParameter="#//SectionModel/C"/>
        <eTypeArguments eTypeParameter="#//SectionModel/R"/>
        <eTypeArguments eTypeParameter="#//SectionModel/A"/>
      </eBounds>
    </eTypeParameters>
    <eStructuralFeatures xsi:type="ecore:EReference" name="metaModelPackage" lowerBound="1"
        eType="ecore:EClass http://www.eclipse.org/emf/2002/Ecore#//EPackage">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The meta-model (represented by an EPackage) based on which all element structures (Sections) in this SectionModel need to be based."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="sections" upperBound="-1"
        containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The list of Sections defined by this SectionModel.&#xD;&#xA;&lt;br />&#xD;&#xA;All Sections need to be based on the meta-model/EPackage specified via the 'metaModelPackage' reference."/>
      </eAnnotations>
      <eGenericType eTypeParameter="#//SectionModel/S"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="SourceSectionModel">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A SourceSectionModel contains a list of SourceSections which can act as the left-hand side (LHS) of a Mapping."/>
    </eAnnotations>
    <eGenericSuperTypes eClassifier="#//SectionModel">
      <eTypeArguments eClassifier="#//structure/source/SourceSection"/>
      <eTypeArguments eClassifier="#//structure/source/SourceSectionClass"/>
      <eTypeArguments eClassifier="#//structure/source/SourceSectionReference"/>
      <eTypeArguments eClassifier="#//structure/source/SourceSectionAttribute"/>
    </eGenericSuperTypes>
    <eGenericSuperTypes eClassifier="#//DeactivatableElement"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="TargetSectionModel">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A TargetSectionModel contains a list of TargetSections which can act as the right-hand side (RHS) of a Mapping."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="libraryElements" upperBound="-1"
        eType="#//structure/library/LibraryEntry" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The list of LibraryElement-based TargetSections defined by this SectionModel."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eGenericSuperTypes eClassifier="#//SectionModel">
      <eTypeArguments eClassifier="#//structure/target/TargetSection"/>
      <eTypeArguments eClassifier="#//structure/target/TargetSectionClass"/>
      <eTypeArguments eClassifier="#//structure/target/TargetSectionReference"/>
      <eTypeArguments eClassifier="#//structure/target/TargetSectionAttribute"/>
    </eGenericSuperTypes>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="MappingModel" eSuperTypes="#//NamedElement #//DeactivatableElement #//ConditionalElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A MappingModel contains a list of Mapping which will be executed by the transformation algorithm."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="mappings" lowerBound="1"
        upperBound="-1" eType="#//mapping/Mapping" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The list of Mappings which are contained in this MappingModel. These will be executed by the transformation algorithm.&#xD;&#xA;&lt;br />&#xD;&#xA;Note: Only 'active' Mappings will actually be executed (also see the 'activeMappings' reference)."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="modifierSets" upperBound="-1"
        eType="#//mapping/modifier/ValueModifierSet" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The list of ValueModiferSets which are contained in this MappingModel."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="globalValues" upperBound="-1"
        eType="#//FixedValue" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A list of global FixedValues. These values can e.g. be used in calculations of values of attributes in TargetSections. Therefore, they can be referenced in expressions via their name."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="activeMappings" upperBound="-1"
        eType="#//mapping/Mapping" changeable="false" volatile="true" transient="true"
        derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="get" value="&lt;%java.util.List%>&lt;Mapping> mappings = this.getMappings().stream().filter(m -> !m.isDeactivated() &amp;&amp; !m.isAbstract()).collect(&lt;%java.util.stream.Collectors%>.toList());&#xD;&#xA;return new &lt;%org.eclipse.emf.ecore.util.EcoreEList%>.UnmodifiableEList&lt;>(this, &lt;%pamtram.PamtramPackage%>.Literals.MAPPING_MODEL__ACTIVE_MAPPINGS,&#xD;&#xA;&#x9;&#x9;mappings.size(), mappings.toArray());"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The subset of the Mappings contained in this MappingModel that are not 'deactivated'. These will be executed by the transformation algorithm."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="globalAttributes" upperBound="-1"
        eType="#//mapping/GlobalAttribute" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The list of GlobalAttributes defined by this MappingModel."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ConditionalElement" abstract="true">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="eitherModelOrReferCondition referenceOnlyConditionsFromConditionModel"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A ConditionalElement is an element that can be attached with a Condition which restrains its applicability during the course of a transformation. This can e.g. be used to specify a platform condition which ensures that the element will only be evaluated if a certain scree size is available."/>
    </eAnnotations>
    <eOperations name="validateEitherModelOrReferCondition" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="&#xD;&#xA;boolean result = !(this.getLocalCondition() != null &amp;&amp; this.getSharedCondition() != null);&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;Please specify at most one (local or shared) condition!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;PamtramValidator.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;%pamtram.util.PamtramValidator%>.CONDITIONAL_ELEMENT__VALIDATE_EITHER_MODEL_OR_REFER_CONDITION,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, PamtramPackage.Literals.CONDITIONAL_ELEMENT }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      <eParameters name="context">
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments/>
          <eTypeArguments/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="validateReferenceOnlyConditionsFromConditionModel" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="&#xD;&#xA;boolean result = this.getSharedCondition() == null || this.getSharedCondition().eContainer() instanceof &lt;%pamtram.ConditionModel%>;&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;It is only allowed to reference shared conditions that are model inside the ConditionModel!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;PamtramValidator.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;%pamtram.util.PamtramValidator%>.CONDITIONAL_ELEMENT__VALIDATE_REFERENCE_ONLY_CONDITIONS_FROM_CONDITION_MODEL,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, PamtramPackage.Literals.CONDITIONAL_ELEMENT__SHARED_CONDITION }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      <eParameters name="context">
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments/>
          <eTypeArguments/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="localCondition" eType="#//condition/ComplexCondition"
        containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The (locally defined) Condition which restrains the applicability of this element during the course of a transformation.&#xD;&#xA;&lt;br />&#xD;&#xA;This can e.g. be used to specify a platform condition which ensures that the element will only be evaluated if a certain scree size is available.&#xD;&#xA;&lt;br />&#xD;&#xA;Note: Only one of 'localCondition' or 'sharedCondition' may be set for each element!"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="sharedCondition" eType="#//condition/ComplexCondition">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The (globally defined) referenced Condition which restrains the applicability of this element during the course of a transformation.&#xD;&#xA;&lt;br />&#xD;&#xA;This can e.g. be used to specify a platform condition which ensures that the element will only be evaluated if a certain scree size is available.&#xD;&#xA;&lt;br />&#xD;&#xA;Note: Only one of 'localCondition' or 'sharedCondition' may be set for each element!"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ConditionModel" eSuperTypes="#//NamedElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A ConditionModel contains a list of (global, reusable) Conditions which can be attached to ConditionalElements in order to restrain their applicability.&#xD;&#xA;&lt;br />&#xD;&#xA;In order to reference global conditions from a ConditionModel, you have to use a 'sharedCondition(s)' non-containment reference (e.g. present for a ConditionalElement)."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="conditions" upperBound="-1"
        eType="#//condition/ComplexCondition" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The lis of (global, reusable) Conditions defined by this ConditionModel."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ExpressionElement" abstract="true">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="An ExpressionElement can be equipped with a mathematical expression describing how to calculate the (numeric) value of this element.&#xD;&#xA;&lt;br />&#xD;&#xA;The specific meaning of the calculated 'value' is dependent on the concrete sub-type of this element."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="expression" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString" defaultValueLiteral="">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A mathematical expression describing how to calculate the (numeric) value of this element.&#xD;&#xA;&lt;br />&#xD;&#xA;The specific meaning of the calculated 'value' is dependent on the concrete type of this element.&#xD;&#xA;&lt;br />&#xD;&#xA;Note: Variables (e.g. global FixedValues or specified source elements) can be referenced in the expression via their name, e.g. '2*x' if their is a (local) source element or a global FixedValue named 'x'."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ModifiableElement" abstract="true">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A ModifiableElement can be equipped with a list of 'ValueModifierSets' that will be applied on the value of this element.&#xD;&#xA;&lt;br />&#xD;&#xA;The specific meaning of the modified 'value' is dependent on the concrete sub-type of this element."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="modifiers" upperBound="-1"
        eType="#//mapping/modifier/ValueModifierSet">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The list of 'ValueModifierSets' that will be applied on the value of this element.&#xD;&#xA;&lt;br />&#xD;&#xA;The specific meaning of the modified 'value' is dependent on the concrete sub-type of this element."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="FixedValue" eSuperTypes="#//NamedElement #//mapping/extended/AttributeMappingSourceInterface #//structure/InstanceSelectorSourceInterface #//structure/constraint/ValueConstraintSourceInterface #//mapping/extended/CardinalityMappingSourceInterface">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="This simply represents a certain numeric or literal value. It can be used e.g. as part of an AttributeMapping to specify the value of a TargetSectionAttribute."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The numeric or literal value."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eSubpackages name="structure" nsURI="http://mfreund.de/pamtram/structure" nsPrefix="structure">
    <eAnnotations source="http://www.eclipse.org/OCL/Import">
      <details key="ecore" value="http://www.eclipse.org/emf/2002/Ecore"/>
      <details key="genlib" value="http://www.et.tu-dresden.de/ifa/agtele/genlib"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="Main package of the PAMTraM (Persistent Ambiguous Mapping and Transformation Model) meta-model containing various structuring and general elements."/>
    </eAnnotations>
    <eClassifiers xsi:type="ecore:EClass" name="InstanceSelector" abstract="true"
        eSuperTypes="#//ExpressionElement #//ModifiableElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="constraints" value="noModifiedAttributeElementTypesInConditionModelConditions"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="InstanceSelectors can be used to select a certain subset of a list of model excerpts that have been matched for a certain Section.&#xD;&#xA;The specific use case for this selection depends on the concrete sub-type of this class.&#xD;&#xA;&lt;br />&#xD;&#xA;&lt;br />&#xD;&#xA;The selection process is based on the comparison of the value of a certain attribute of the matched Section with a reference value. The reference value is thereby calculated based on the list of specified 'sourceElements'."/>
      </eAnnotations>
      <eOperations name="validateNoModifiedAttributeElementTypesInConditionModelConditions"
          eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#xD;&#xA;boolean result = this.eContainer() instanceof &lt;%pamtram.condition.ComplexCondition%> &amp;&amp; ((ComplexCondition) this.eContainer()).isConditionModelCondition() ? this.getSourceElements().parallelStream().noneMatch(s -> s instanceof pamtram.structure.DynamicSourceElement) : true;&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;ModifiedAttributeElementTypes are not allowed as part of ConditionModelConditions!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.structure.util.StructureValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;StructureValidator.INSTANCE_SELECTOR__VALIDATE_NO_MODIFIED_ATTRIBUTE_ELEMENT_TYPES_IN_CONDITION_MODEL_CONDITIONS,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.structure.StructurePackage%>.Literals.INSTANCE_SELECTOR__SOURCE_ELEMENTS }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
        <eParameters name="context">
          <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
            <eTypeArguments/>
            <eTypeArguments/>
          </eGenericType>
        </eParameters>
      </eOperations>
      <eOperations name="getLocalSourceElements" unique="false" upperBound="-1" eType="#//structure/InstanceSelectorSourceElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="return new &lt;%org.eclipse.emf.common.util.BasicEList%>&lt;>(&#xD;&#xA;&#x9;&#x9;this.getSourceElements().stream().filter(i -> i instanceof InstanceSelectorSourceElement)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;.map(i -> (InstanceSelectorSourceElement) i).collect(&lt;%java.util.stream.Collectors%>.toList()));"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="getExternalSourceElements" unique="false" upperBound="-1"
          eType="#//structure/InstanceSelectorExternalSourceElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="return new &lt;%org.eclipse.emf.common.util.BasicEList%>&lt;>(&#xD;&#xA;&#x9;&#x9;this.getSourceElements().stream().filter(i -> i instanceof InstanceSelectorExternalSourceElement)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;.map(i -> (InstanceSelectorExternalSourceElement) i).collect(&lt;%java.util.stream.Collectors%>.toList()));"/>
        </eAnnotations>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="sourceElements" upperBound="-1"
          eType="#//structure/InstanceSelectorSourceInterface" containment="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The list of 'sourceElements' based on which the reference value used by this selector is calculated."/>
        </eAnnotations>
      </eStructuralFeatures>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="SourceInstanceSelector" eSuperTypes="#//structure/InstanceSelector">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="SourceInstanceSelectors can be used to select a certain subset of a list of source model excerpts that have been matched for a certain SourceSection in the course of a transformation.&#xD;&#xA;The specific use case for this selection depends on the concrete sub-type of this class.&#xD;&#xA;&lt;br />&#xD;&#xA;&lt;br />&#xD;&#xA;The selection process is based on the comparison of the value of a certain attribute of the matched SourceSections with a reference value. The reference value is thereby calculated based on the list of specified 'sourceElements'."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="referenceAttribute" eType="#//structure/source/SourceSectionAttribute">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The specific attribute of the matched SourceSections whose value is compared with the reference value used by this selector."/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="targetClass" lowerBound="1"
          eType="#//structure/source/SourceSectionClass">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The SourceSectionClass one of whose matched instances shall be selected."/>
        </eAnnotations>
      </eStructuralFeatures>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="TargetInstanceSelector" eSuperTypes="#//structure/InstanceSelector">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="TargetInstanceSelectors can be used to select a certain subset of a list of target model excerpts that have been created based on a certain TargetSection in the course of a transformation.&#xD;&#xA;The specific use case for this selection depends on the concrete sub-type of this class.&#xD;&#xA;&lt;br />&#xD;&#xA;&lt;br />&#xD;&#xA;The selection process is based on the comparison of the value of a certain attribute of the created TargetSections with a reference value. The reference value is thereby calculated based on the list of specified 'sourceElements'."/>
      </eAnnotations>
      <eOperations name="validateReferenceAttributeIsValid" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="if (this.referenceAttribute == null || this.targetClass == null&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;|| this.targetClass.getContainingSection() == null) {&#xD;&#xA;&#x9;&#x9;&#x9;return true;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#x9;// If a 'targetClass' has already been set for this 'TargetInstanceSelector', allow only 'referenceAttributes'&#xD;&#xA;&#x9;&#x9;// that are part of the same &lt;%pamtram.structure.target.TargetSection%> as the specified 'targetClass' (or of one of the extended&#xD;&#xA;&#x9;&#x9;// sections).&#xD;&#xA;&#x9;&#x9;//&#xD;&#xA;&#xD;&#x9;&lt;%pamtram.structure.target.TargetSection%> section = this.targetClass.getContainingSection();&#xD;&#xA;&#xD;&#x9;List&lt;&lt;%pamtram.structure.target.TargetSection%>> allowedSections = new ArrayList&lt;>(&lt;%java.util.Arrays%>.asList(section));&#xD;&#xA;&#x9;&#x9;allowedSections.addAll(section.getAllExtend());&#xD;&#xA;&#xD;&#x9;boolean result = allowedSections.contains(this.referenceAttribute.getContainingSection());&#xD;&#xA;&#xD;&#x9;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#x9;&#x9;String errorMessage = &quot;The 'referenceAttribute' must be contained in the same &lt;%pamtram.structure.target.TargetSection%> (or an extended section) as the 'targetClass'!&quot;;&#xD;&#xA;&#xD;&#x9;&#x9;diagnostics.add(new BasicDiagnostic(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR, &lt;%pamtram.structure.util.StructureValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;%pamtram.structure.util.StructureValidator%>.TARGET_INSTANCE_SELECTOR__VALIDATE_REFERENCE_ATTRIBUTE_IS_VALID, errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.structure.StructurePackage%>.Literals.TARGET_INSTANCE_SELECTOR__REFERENCE_ATTRIBUTE }));&#xD;&#xA;&#xD;&#x9;}&#xD;&#xA;&#xD;&#x9;return result;"/>
        </eAnnotations>
        <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
        <eParameters name="context">
          <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
            <eTypeArguments/>
            <eTypeArguments/>
          </eGenericType>
        </eParameters>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="referenceAttribute" eType="#//structure/target/TargetSectionAttribute">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The TargetSectionClass one of whose created instances shall be selected."/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="targetClass" lowerBound="1"
          eType="#//structure/target/TargetSectionClass">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The TargetSectionClass one of whose created instances shall be selected."/>
        </eAnnotations>
      </eStructuralFeatures>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="InstanceSelectorSourceInterface" abstract="true"
        interface="true" eSuperTypes="#//mapping/extended/MappingHintSourceInterface">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The common superclass of all types that can be used as 'sourceElement' to calculate the reference value used by an InstanceSelector."/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="InstanceSelectorSourceElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A concrete type of 'sourceElement' to calculate the reference value used by an InstanceSelector.&lt;br />&#xD;&#xA;This type is based on the value of a 'local' attribute.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;Note: See the documentation of 'LocalDynamicSourceElement' for a detailed explanation of the meaning of 'local' source elements."/>
      </eAnnotations>
      <eGenericSuperTypes eClassifier="#//structure/LocalDynamicSourceElement">
        <eTypeArguments eClassifier="#//structure/source/SourceSection"/>
        <eTypeArguments eClassifier="#//structure/source/SourceSectionClass"/>
        <eTypeArguments eClassifier="#//structure/source/SourceSectionReference"/>
        <eTypeArguments eClassifier="#//structure/source/SourceSectionAttribute"/>
      </eGenericSuperTypes>
      <eGenericSuperTypes eClassifier="#//structure/InstanceSelectorSourceInterface"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="InstanceSelectorExternalSourceElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A concrete type of 'sourceElement' to calculate the reference value used by an InstanceSelector.&lt;br />&#xD;&#xA;This type is based on the value of an 'external' attribute.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;Note: See the documentation of 'ExternalDynamicSourceElement' for a detailed explanation of the meaning of 'external' source elements."/>
      </eAnnotations>
      <eGenericSuperTypes eClassifier="#//structure/ExternalDynamicSourceElement">
        <eTypeArguments eClassifier="#//structure/source/SourceSection"/>
        <eTypeArguments eClassifier="#//structure/source/SourceSectionClass"/>
        <eTypeArguments eClassifier="#//structure/source/SourceSectionReference"/>
        <eTypeArguments eClassifier="#//structure/source/SourceSectionAttribute"/>
      </eGenericSuperTypes>
      <eGenericSuperTypes eClassifier="#//structure/InstanceSelectorSourceInterface"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="InstanceSelectorGlobalSourceElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A concrete type of 'sourceElement' to calculate the reference value used by an InstanceSelector.&lt;br />&#xD;&#xA;This type is based on the value of a 'global' attribute.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;Note: See the documentation of 'GlobalDynamicSourceElement' for a detailed explanation of the meaning of 'global' source elements."/>
      </eAnnotations>
      <eGenericSuperTypes eClassifier="#//structure/GlobalDynamicSourceElement">
        <eTypeArguments eClassifier="#//structure/source/SourceSection"/>
        <eTypeArguments eClassifier="#//structure/source/SourceSectionClass"/>
        <eTypeArguments eClassifier="#//structure/source/SourceSectionReference"/>
        <eTypeArguments eClassifier="#//structure/source/SourceSectionAttribute"/>
        <eTypeArguments eClassifier="#//structure/SourceInstanceSelector"/>
      </eGenericSuperTypes>
      <eGenericSuperTypes eClassifier="#//structure/InstanceSelectorSourceInterface"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="DynamicSourceElement" abstract="true"
        eSuperTypes="#//NamedElement #//ModifiableElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A DynamicSourceElement represents a certain value that can be used in various calculations.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;The dynamic value is thereby calculated based on the value of an attribute of a SourceSection (resp. the matched source model excerpt(s)). As multiple source model excerpts can be matched against a single SourceSection (and thus against a single SourceSectionAttribute), a DynamicSourceElement may actually deliver many values that will be used by the calculation."/>
      </eAnnotations>
      <eTypeParameters name="S">
        <eBounds eClassifier="#//structure/generic/Section">
          <eTypeArguments eTypeParameter="#//structure/DynamicSourceElement/S"/>
          <eTypeArguments eTypeParameter="#//structure/DynamicSourceElement/C"/>
          <eTypeArguments eTypeParameter="#//structure/DynamicSourceElement/R"/>
          <eTypeArguments eTypeParameter="#//structure/DynamicSourceElement/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="C">
        <eBounds eClassifier="#//structure/generic/Class">
          <eTypeArguments eTypeParameter="#//structure/DynamicSourceElement/S"/>
          <eTypeArguments eTypeParameter="#//structure/DynamicSourceElement/C"/>
          <eTypeArguments eTypeParameter="#//structure/DynamicSourceElement/R"/>
          <eTypeArguments eTypeParameter="#//structure/DynamicSourceElement/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="R">
        <eBounds eClassifier="#//structure/generic/Reference">
          <eTypeArguments eTypeParameter="#//structure/DynamicSourceElement/S"/>
          <eTypeArguments eTypeParameter="#//structure/DynamicSourceElement/C"/>
          <eTypeArguments eTypeParameter="#//structure/DynamicSourceElement/R"/>
          <eTypeArguments eTypeParameter="#//structure/DynamicSourceElement/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="A">
        <eBounds eClassifier="#//structure/generic/Attribute">
          <eTypeArguments eTypeParameter="#//structure/DynamicSourceElement/S"/>
          <eTypeArguments eTypeParameter="#//structure/DynamicSourceElement/C"/>
          <eTypeArguments eTypeParameter="#//structure/DynamicSourceElement/R"/>
          <eTypeArguments eTypeParameter="#//structure/DynamicSourceElement/A"/>
        </eBounds>
      </eTypeParameters>
      <eOperations name="getMappingHintGroup" unique="false" lowerBound="1" eType="#//NamedElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="EObject ret = this.eContainer;&#xD;&#xA;while(!(ret instanceof MappingHintGroupType || ret instanceof InstantiableMappingHintGroup)) {&#xD;&#xA;&#x9;ret = ret.eContainer();&#xD;&#xA;&#x9;if(ret instanceof PAMTraM) {&#xD;&#xA;&#x9;&#x9;// something went wrong&#xD;&#xA;&#x9;&#x9;return null;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return (NamedElement) ret;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="getMapping" unique="false" lowerBound="1" eType="#//mapping/Mapping">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="EObject ret = this.eContainer;&#xD;&#xA;while(!(ret instanceof Mapping)) {&#xD;&#xA;&#x9;ret = ret.eContainer();&#xD;&#xA;&#x9;if(ret instanceof PAMTraM) {&#xD;&#xA;&#x9;&#x9;// something went wrong&#xD;&#xA;&#x9;&#x9;return null;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return (Mapping) ret;"/>
        </eAnnotations>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="source" lowerBound="1">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The attribute of a SourceSection based on which the dynamic value(s) is/are calculated.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;The concrete sub-type of DynamicSourceElement poses additional constraints on the fact which SourceSectionAttributes may be used as 'source'."/>
        </eAnnotations>
        <eGenericType eTypeParameter="#//structure/DynamicSourceElement/A"/>
      </eStructuralFeatures>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="LocalDynamicSourceElement" abstract="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="constraints" value="sourceAttributeMatchesSectionOrContainedSection"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A LocalDynamicSourceElement represents a certain value that can be used in various calculations.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;The dynamic value is thereby calculated based on the value of an attribute of a SourceSection (resp. the matched source model excerpt(s)) that is specified via the 'source' reference. As multiple source model excerpts can be matched against a single SourceSection (and thus against a single SourceSectionAttribute), a DynamicSourceElement may actually deliver many values that will be used by the calculation.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;For 'LocalDynamicSourceElements', only instances of the specified 'source' attribute that are part of the source model excerpt which is currently handled by the transformation are used."/>
      </eAnnotations>
      <eTypeParameters name="S">
        <eBounds eClassifier="#//structure/generic/Section">
          <eTypeArguments eTypeParameter="#//structure/LocalDynamicSourceElement/S"/>
          <eTypeArguments eTypeParameter="#//structure/LocalDynamicSourceElement/C"/>
          <eTypeArguments eTypeParameter="#//structure/LocalDynamicSourceElement/R"/>
          <eTypeArguments eTypeParameter="#//structure/LocalDynamicSourceElement/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="C">
        <eBounds eClassifier="#//structure/generic/Class">
          <eTypeArguments eTypeParameter="#//structure/LocalDynamicSourceElement/S"/>
          <eTypeArguments eTypeParameter="#//structure/LocalDynamicSourceElement/C"/>
          <eTypeArguments eTypeParameter="#//structure/LocalDynamicSourceElement/R"/>
          <eTypeArguments eTypeParameter="#//structure/LocalDynamicSourceElement/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="R">
        <eBounds eClassifier="#//structure/generic/Reference">
          <eTypeArguments eTypeParameter="#//structure/LocalDynamicSourceElement/S"/>
          <eTypeArguments eTypeParameter="#//structure/LocalDynamicSourceElement/C"/>
          <eTypeArguments eTypeParameter="#//structure/LocalDynamicSourceElement/R"/>
          <eTypeArguments eTypeParameter="#//structure/LocalDynamicSourceElement/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="A">
        <eBounds eClassifier="#//structure/generic/Attribute">
          <eTypeArguments eTypeParameter="#//structure/LocalDynamicSourceElement/S"/>
          <eTypeArguments eTypeParameter="#//structure/LocalDynamicSourceElement/C"/>
          <eTypeArguments eTypeParameter="#//structure/LocalDynamicSourceElement/R"/>
          <eTypeArguments eTypeParameter="#//structure/LocalDynamicSourceElement/A"/>
        </eBounds>
      </eTypeParameters>
      <eOperations name="validateSourceAttributeMatchesSectionOrContainedSection"
          eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="if(this.getMapping() == null || this.source == null || this.getMapping().getSourceSection() == null&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;|| !(this.source.getContainingSection() instanceof &lt;%pamtram.structure.source.SourceSection%>)) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;SourceSection sourceSection = this.getMapping().getSourceSection();&#xD;&#xA;SourceSection containingSourceSection = (SourceSection) this.source.getContainingSection();&#xD;&#xA;&#xD;&#xA;boolean result = sourceSection == containingSourceSection &#xD;&#xA;&#x9;&#x9;|| sourceSection.getExtend().parallelStream().filter(e -> e.equals(containingSourceSection)).findAny().isPresent()&#xD;&#xA;&#x9;&#x9;|| sourceSection.getExtend().parallelStream().filter(e -> containingSourceSection.isReferencedBy(e, null)).findAny().isPresent()&#xD;&#xA;&#x9;&#x9;|| containingSourceSection.isReferencedBy(sourceSection, null);&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;String errorMessage = &quot;The source attribute '&quot; +&#xD;&#xA;&#x9;&#x9;&#x9; this.source.getName() + &quot;' is not referenced by the source section of the parent mapping '&quot; +&#xD;&#xA;&#x9;&#x9;&#x9; sourceSection.getName() + &quot;' or in one of its extended sections/sub-sections!'&quot;;&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;diagnostics.add&#xD;&#xA;&#x9;&#x9;(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9; &lt;%pamtram.structure.util.StructureValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9; StructureValidator.LOCAL_DYNAMIC_SOURCE_ELEMENT__VALIDATE_SOURCE_ATTRIBUTE_MATCHES_SECTION_OR_CONTAINED_SECTION,&#xD;&#xA;&#x9;&#x9;&#x9; errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9; new Object [] { this, &lt;%pamtram.structure.StructurePackage%>.Literals.DYNAMIC_SOURCE_ELEMENT__SOURCE }));&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
        <eParameters name="context">
          <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
            <eTypeArguments/>
            <eTypeArguments/>
          </eGenericType>
        </eParameters>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="referenceMatchSpec" upperBound="-1">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="In case of SourceSections referencing itself via a CrossReference, it may be necessary to further restrict the determined values that are used for the calculation (e.g. do not use the 'own' attribute value but only attribute values of 'referenced' elements. Therefore, this allows to specify a list of References describing a path how to get to the relevant attribute instances based on the root element of the Section."/>
        </eAnnotations>
        <eGenericType eTypeParameter="#//structure/LocalDynamicSourceElement/R"/>
      </eStructuralFeatures>
      <eGenericSuperTypes eClassifier="#//structure/DynamicSourceElement">
        <eTypeArguments eTypeParameter="#//structure/LocalDynamicSourceElement/S"/>
        <eTypeArguments eTypeParameter="#//structure/LocalDynamicSourceElement/C"/>
        <eTypeArguments eTypeParameter="#//structure/LocalDynamicSourceElement/R"/>
        <eTypeArguments eTypeParameter="#//structure/LocalDynamicSourceElement/A"/>
      </eGenericSuperTypes>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ExternalDynamicSourceElement" abstract="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="constraints" value="sourceAttributeMatchesContainerSection"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An ExternalDynamicSourceElement represents a certain value that can be used in various calculations.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;The dynamic value is thereby calculated based on the value of an attribute of a SourceSection (resp. the matched source model excerpt(s)) that is specified via the 'source' reference. As multiple source model excerpts can be matched against a single SourceSection (and thus against a single SourceSectionAttribute), a DynamicSourceElement may actually deliver many values that will be used by the calculation.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;For 'ExternalDynamicSourceElements', only instances of the specified 'source' attribute that are part of source model excerpts that are containers of the source model excerpt which is currently handled by the transformation are used."/>
      </eAnnotations>
      <eTypeParameters name="S">
        <eBounds eClassifier="#//structure/generic/Section">
          <eTypeArguments eTypeParameter="#//structure/ExternalDynamicSourceElement/S"/>
          <eTypeArguments eTypeParameter="#//structure/ExternalDynamicSourceElement/C"/>
          <eTypeArguments eTypeParameter="#//structure/ExternalDynamicSourceElement/R"/>
          <eTypeArguments eTypeParameter="#//structure/ExternalDynamicSourceElement/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="C">
        <eBounds eClassifier="#//structure/generic/Class">
          <eTypeArguments eTypeParameter="#//structure/ExternalDynamicSourceElement/S"/>
          <eTypeArguments eTypeParameter="#//structure/ExternalDynamicSourceElement/C"/>
          <eTypeArguments eTypeParameter="#//structure/ExternalDynamicSourceElement/R"/>
          <eTypeArguments eTypeParameter="#//structure/ExternalDynamicSourceElement/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="R">
        <eBounds eClassifier="#//structure/generic/Reference">
          <eTypeArguments eTypeParameter="#//structure/ExternalDynamicSourceElement/S"/>
          <eTypeArguments eTypeParameter="#//structure/ExternalDynamicSourceElement/C"/>
          <eTypeArguments eTypeParameter="#//structure/ExternalDynamicSourceElement/R"/>
          <eTypeArguments eTypeParameter="#//structure/ExternalDynamicSourceElement/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="A">
        <eBounds eClassifier="#//structure/generic/Attribute">
          <eTypeArguments eTypeParameter="#//structure/ExternalDynamicSourceElement/S"/>
          <eTypeArguments eTypeParameter="#//structure/ExternalDynamicSourceElement/C"/>
          <eTypeArguments eTypeParameter="#//structure/ExternalDynamicSourceElement/R"/>
          <eTypeArguments eTypeParameter="#//structure/ExternalDynamicSourceElement/A"/>
        </eBounds>
      </eTypeParameters>
      <eOperations name="validateSourceAttributeMatchesContainerSection" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="if(this.getMapping() == null || this.getSource() == null) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&lt;%pamtram.structure.source.SourceSection%> sourceSection = this.getMapping().getSourceSection();&#xD;&#xA;&#xD;&#xA;boolean result = sourceSection == null || !(this.getSource().getContainingSection() instanceof SourceSection) ? true : ((SourceSection) this.getSource().getContainingSection()).isContainerFor(sourceSection);&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;The source attribute '&quot; + this.getSource().getName() + &quot;' is not part of a container section of the source section of the parent mapping '&quot; + this.getMapping().getSourceSection().getName() + &quot;'!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.structure.util.StructureValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;StructureValidator.EXTERNAL_DYNAMIC_SOURCE_ELEMENT__VALIDATE_SOURCE_ATTRIBUTE_MATCHES_CONTAINER_SECTION,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.structure.StructurePackage%>.Literals.DYNAMIC_SOURCE_ELEMENT__SOURCE }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
        <eParameters name="context">
          <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
            <eTypeArguments/>
            <eTypeArguments/>
          </eGenericType>
        </eParameters>
      </eOperations>
      <eGenericSuperTypes eClassifier="#//structure/DynamicSourceElement">
        <eTypeArguments eTypeParameter="#//structure/ExternalDynamicSourceElement/S"/>
        <eTypeArguments eTypeParameter="#//structure/ExternalDynamicSourceElement/C"/>
        <eTypeArguments eTypeParameter="#//structure/ExternalDynamicSourceElement/R"/>
        <eTypeArguments eTypeParameter="#//structure/ExternalDynamicSourceElement/A"/>
      </eGenericSuperTypes>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="GlobalDynamicSourceElement" abstract="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A GlobalDynamicSourceElement represents a certain value that can be used in various calculations.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;The dynamic value is thereby calculated based on the value of an attribute of a SourceSection (resp. the matched source model excerpt(s)) that is specified via the 'source' reference. As multiple source model excerpts can be matched against a single SourceSection (and thus against a single SourceSectionAttribute), a DynamicSourceElement may actually deliver many values that will be used by the calculation.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;For 'GlobalDynamicSourceElements', all instances of the specified 'source' attribute found in the source model are used."/>
      </eAnnotations>
      <eTypeParameters name="S">
        <eBounds eClassifier="#//structure/generic/Section">
          <eTypeArguments eTypeParameter="#//structure/GlobalDynamicSourceElement/S"/>
          <eTypeArguments eTypeParameter="#//structure/GlobalDynamicSourceElement/C"/>
          <eTypeArguments eTypeParameter="#//structure/GlobalDynamicSourceElement/R"/>
          <eTypeArguments eTypeParameter="#//structure/GlobalDynamicSourceElement/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="C">
        <eBounds eClassifier="#//structure/generic/Class">
          <eTypeArguments eTypeParameter="#//structure/GlobalDynamicSourceElement/S"/>
          <eTypeArguments eTypeParameter="#//structure/GlobalDynamicSourceElement/C"/>
          <eTypeArguments eTypeParameter="#//structure/GlobalDynamicSourceElement/R"/>
          <eTypeArguments eTypeParameter="#//structure/GlobalDynamicSourceElement/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="R">
        <eBounds eClassifier="#//structure/generic/Reference">
          <eTypeArguments eTypeParameter="#//structure/GlobalDynamicSourceElement/S"/>
          <eTypeArguments eTypeParameter="#//structure/GlobalDynamicSourceElement/C"/>
          <eTypeArguments eTypeParameter="#//structure/GlobalDynamicSourceElement/R"/>
          <eTypeArguments eTypeParameter="#//structure/GlobalDynamicSourceElement/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="A">
        <eBounds eClassifier="#//structure/generic/Attribute">
          <eTypeArguments eTypeParameter="#//structure/GlobalDynamicSourceElement/S"/>
          <eTypeArguments eTypeParameter="#//structure/GlobalDynamicSourceElement/C"/>
          <eTypeArguments eTypeParameter="#//structure/GlobalDynamicSourceElement/R"/>
          <eTypeArguments eTypeParameter="#//structure/GlobalDynamicSourceElement/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="InstanceSelectorType">
        <eBounds eClassifier="#//structure/InstanceSelector"/>
      </eTypeParameters>
      <eStructuralFeatures xsi:type="ecore:EReference" name="instanceSelectors" upperBound="-1"
          containment="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A list of InstanceSelectors that can be used to select a certain subset of the list of matched SourceSectionAttributes that will be used to calculated the value(s) represented by this DynamicSourceElement."/>
        </eAnnotations>
        <eGenericType eTypeParameter="#//structure/GlobalDynamicSourceElement/InstanceSelectorType"/>
      </eStructuralFeatures>
      <eGenericSuperTypes eClassifier="#//structure/DynamicSourceElement">
        <eTypeArguments eTypeParameter="#//structure/GlobalDynamicSourceElement/S"/>
        <eTypeArguments eTypeParameter="#//structure/GlobalDynamicSourceElement/C"/>
        <eTypeArguments eTypeParameter="#//structure/GlobalDynamicSourceElement/R"/>
        <eTypeArguments eTypeParameter="#//structure/GlobalDynamicSourceElement/A"/>
      </eGenericSuperTypes>
    </eClassifiers>
    <eSubpackages name="generic" nsURI="http://mfreund.de/pamtram/structure/generic"
        nsPrefix="generic">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This package contains all elements related to the generic description of element structures.&#xD;&#xA;&lt;br />&#xD;&#xA;Element structures are always based on a specific metamodel but may impose further restrictions. For example, one may describe a structure containing of an element (Class) which holds exactly one element (Class) via a certain reference (Reference), although the metamodel allows for an unlimited number of elements referenced via this reference. Another example is the description of certain constraints for values of attributes (Attribute)."/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EClass" name="MetaModelElement" abstract="true"
          eSuperTypes="#//NamedElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The super type for all specific types that can be used to describe element structures."/>
        </eAnnotations>
        <eTypeParameters name="S">
          <eBounds eClassifier="#//structure/generic/Section">
            <eTypeArguments eTypeParameter="#//structure/generic/MetaModelElement/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/MetaModelElement/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/MetaModelElement/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/MetaModelElement/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="C">
          <eBounds eClassifier="#//structure/generic/Class">
            <eTypeArguments eTypeParameter="#//structure/generic/MetaModelElement/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/MetaModelElement/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/MetaModelElement/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/MetaModelElement/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="R">
          <eBounds eClassifier="#//structure/generic/Reference">
            <eTypeArguments eTypeParameter="#//structure/generic/MetaModelElement/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/MetaModelElement/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/MetaModelElement/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/MetaModelElement/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="A">
          <eBounds eClassifier="#//structure/generic/Attribute">
            <eTypeArguments eTypeParameter="#//structure/generic/MetaModelElement/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/MetaModelElement/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/MetaModelElement/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/MetaModelElement/A"/>
          </eBounds>
        </eTypeParameters>
        <eOperations name="getContainingSection" lowerBound="1">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="MetaModelElement&lt;S,C,R,A> element = this;&#xD;&#xA;&#xD;&#xA;// move upwards in the hierarchy&#xD;&#xA;while(element.eContainer() instanceof MetaModelElement) {&#xD;&#xA;&#x9;element = (MetaModelElement&lt;S,C,R,A>) element.eContainer();&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;if(element instanceof Section || element.eContainer() instanceof ContainerParameter) {&#xD;&#xA;&#x9;// we have found the section&#xD;&#xA;&#x9;return (S) element;&#xD;&#xA;} else if((element instanceof TargetSectionAttribute &amp;&amp; (element.eContainer() instanceof AttributeParameter || element.eContainer() instanceof ResourceParameter)) || &#xD;&#xA;&#x9;&#x9;(element instanceof TargetSectionCrossReference) &amp;&amp; element.eContainer() instanceof ExternalReferenceParameter) {&#xD;&#xA;&#x9;LibraryEntry libEntry = (LibraryEntry) element.eContainer().eContainer();&#xD;&#xA;&#x9;for (LibraryParameter&lt;?> param : libEntry.getParameters()) {&#xD;&#xA;&#x9;&#x9;//TODO if multiple container parameters exist, there might need to be additional logic&#xD;&#xA;&#x9;&#x9;if(param instanceof ContainerParameter) {&#xD;&#xA;&#x9;&#x9;&#x9;return (S) ((ContainerParameter) param).getClass_();&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;return null;&#xD;&#xA;} else  if(element instanceof VirtualTargetSectionAttribute &amp;&amp; element.eContainer() instanceof LibraryEntry) {&#xD;&#xA;&#x9;LibraryEntry libEntry = (LibraryEntry) element.eContainer();&#xD;&#xA;&#x9;for (LibraryParameter&lt;?> param : libEntry.getParameters()) {&#xD;&#xA;&#x9;&#x9;//TODO if multiple container parameters exist, there might need to be additional logic&#xD;&#xA;&#x9;&#x9;if(param instanceof ContainerParameter) {&#xD;&#xA;&#x9;&#x9;&#x9;return (S) ((ContainerParameter) param).getClass_();&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;return null;&#xD;&#xA;} else {&#xD;&#xA;&#x9;// something went wrong&#xD;&#xA;&#x9;return null;&#xD;&#xA;}"/>
          </eAnnotations>
          <eGenericType eTypeParameter="#//structure/generic/MetaModelElement/S"/>
        </eOperations>
        <eOperations name="getContainingSectionModel" lowerBound="1">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="S section = this.getContainingSection();&#xD;&#xA;&#xD;&#xA;EObject container = section.eContainer();&#xD;&#xA;while(!(container instanceof SectionModel)) {&#xD;&#xA;&#x9;// we have reached the root element&#xD;&#xA;&#x9;if(container == null) {&#xD;&#xA;&#x9;&#x9;return null;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;container = container.eContainer();&#xD;&#xA;}&#xD;&#xA;return (SectionModel&lt;S, C, R, A>) container;"/>
          </eAnnotations>
          <eGenericType eClassifier="#//SectionModel">
            <eTypeArguments eTypeParameter="#//structure/generic/MetaModelElement/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/MetaModelElement/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/MetaModelElement/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/MetaModelElement/A"/>
          </eGenericType>
        </eOperations>
        <eOperations name="isLibraryEntry" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="return (this.getContainingSection().eContainer() instanceof ContainerParameter);"/>
          </eAnnotations>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Class" abstract="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="eClassMatchesParentEReference variableCardinalityIsValid containerIsValid"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This represents one element (as an instance of an EClass) of an element structure.&#xD;&#xA;&lt;br />&#xD;&#xA;In order to allow for the description of complex element structures, Classes can be equipped with Attributes and References (which itself may reference/contain other Classes)."/>
        </eAnnotations>
        <eTypeParameters name="S">
          <eBounds eClassifier="#//structure/generic/Section">
            <eTypeArguments eTypeParameter="#//structure/generic/Class/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Class/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Class/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Class/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="C">
          <eBounds eClassifier="#//structure/generic/Class">
            <eTypeArguments eTypeParameter="#//structure/generic/Class/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Class/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Class/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Class/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="R">
          <eBounds eClassifier="#//structure/generic/Reference">
            <eTypeArguments eTypeParameter="#//structure/generic/Class/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Class/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Class/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Class/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="A">
          <eBounds eClassifier="#//structure/generic/Attribute">
            <eTypeArguments eTypeParameter="#//structure/generic/Class/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Class/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Class/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Class/A"/>
          </eBounds>
        </eTypeParameters>
        <eOperations name="isContainerFor" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="C container = containedClass.getContainer();&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;// Prevent stack overflow in case of modeling error&#xD;&#xA;&#x9;&#x9;//&#xD;&#xA;&#x9;&#x9;if(&lt;%org.eclipse.emf.ecore.util.EcoreUtil%>.isAncestor(containedClass, container)) {&#xD;&#xA;&#x9;&#x9;&#x9;return false;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#x9;// this means that we have reached the top level container for the 'containedClass'&#xD;&#xA;&#x9;&#x9;if (container == null) {&#xD;&#xA;&#x9;&#x9;&#x9;return false;&#xD;&#xA;&#x9;&#x9;&#x9;// this is the container&#xD;&#xA;&#x9;&#x9;} else if (this.equals(container)) {&#xD;&#xA;&#x9;&#x9;&#x9;return true;&#xD;&#xA;&#x9;&#x9;&#x9;// one of the extended sections is the container&#xD;&#xA;&#x9;&#x9;} else if (container instanceof &lt;%pamtram.structure.generic.Section%> &amp;&amp; ((&lt;%pamtram.structure.generic.Section%>) container).getExtend().contains(this)) {&#xD;&#xA;&#x9;&#x9;&#x9;return true;&#xD;&#xA;&#x9;&#x9;&#x9;// this was not the container, so iterate up in the containment hierarchy&#xD;&#xA;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;return this.isContainerFor(container);&#xD;&#xA;&#x9;&#x9;}"/>
          </eAnnotations>
          <eParameters name="containedClass" lowerBound="1">
            <eGenericType eTypeParameter="#//structure/generic/Class/C"/>
          </eParameters>
        </eOperations>
        <eOperations name="isContainedIn" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="EList&lt;C> containedClasses = new BasicEList&lt;>();&#xD;&#xA;&#xD;&#xA;// collect all classes that are referenced by containment references&#xD;&#xA;BasicEList&lt;R> refs = new BasicEList&lt;>(containerClass.getReferences());&#xD;&#xA;if(containerClass instanceof Section) {&#xD;&#xA;&#x9;EList&lt;Section> sections = ((Section) containerClass).getExtend(); &#xD;&#xA;&#x9;for (Section s : sections) {&#xD;&#xA;&#x9;&#x9;refs.addAll(s.getReferences());&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;for (R ref : containerClass.getReferences()) {&#xD;&#xA;&#x9;if(!(ref instanceof ActualReference&lt;?, ?, ?, ?>) || !(((ActualReference&lt;?, ?, ?, ?>) ref).getEReference().isContainment())) {&#xD;&#xA;&#x9;&#x9;continue;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;if(ref instanceof CompositeReference&lt;?,?,?,?>){&#xD;&#xA;&#x9;&#x9;containedClasses.addAll(((CompositeReference&lt;S,C,R,A>) ref).getValue());&#xD;&#xA;&#x9;} else if(ref instanceof CrossReference) {&#xD;&#xA;&#x9;&#x9;containedClasses.addAll((Collection&lt;? extends C>) ((CrossReference) ref).getValue());&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#x9;&#xD;&#xA;// recursively iterate over all contained classes&#xD;&#xA;boolean found = false;&#xD;&#xA;for (C containedClass : containedClasses) {&#xD;&#xA;&#x9;if(containedClass.equals(this) || isContainedIn(containedClass)) {&#xD;&#xA;&#x9;&#x9;found = true;&#xD;&#xA;&#x9;&#x9;break;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return found;"/>
          </eAnnotations>
          <eParameters name="containerClass" lowerBound="1">
            <eGenericType eTypeParameter="#//structure/generic/Class/C"/>
          </eParameters>
        </eOperations>
        <eOperations name="getOwningContainmentReference">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="if(this.eContainer() instanceof CompositeReference&lt;?,?,?,?>) {&#xD;&#xA;&#x9;return (CompositeReference&lt;S,C,R,A>) this.eContainer();&#xD;&#xA;} else {&#xD;&#xA;&#x9;return null;&#xD;&#xA;}"/>
          </eAnnotations>
          <eGenericType eClassifier="#//structure/generic/CompositeReference">
            <eTypeArguments eTypeParameter="#//structure/generic/Class/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Class/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Class/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Class/A"/>
          </eGenericType>
        </eOperations>
        <eOperations name="isReferencedBy" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="if(referencedClasses == null) {&#xD;&#xA;&#x9;referencedClasses = new BasicEList&lt;>();&#xD;&#xA;}&#xD;&#xA;BasicEList&lt;C> classes = new BasicEList&lt;>();&#xD;&#xA;&#xD;&#xA;// collect all classes that are referenced&#xD;&#xA;for (R ref : referencingClass.getReferences()) {&#xD;&#xA;&#xD;&#xA;&#x9;if(ref instanceof ContainmentReference&lt;?,?,?,?>){&#xD;&#xA;&#x9;&#x9;classes.addAll(((ContainmentReference&lt;S,C,R,A>) ref).getValue());&#xD;&#xA;&#x9;} else if(ref instanceof MetaModelSectionReference) {&#xD;&#xA;&#x9;&#x9;classes.addAll((Collection&lt;? extends C>) ((MetaModelSectionReference) ref).getValue());&#xD;&#xA;&#x9;} else if(ref instanceof NonContainmentReference){&#xD;&#xA;&#x9;&#x9;classes.addAll(((NonContainmentReference&lt;S,C,R,A>) ref).getValue());&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// recursively iterate over all referenced classes&#xD;&#xA;for (C clazz : classes) {&#xD;&#xA;&#x9;if(clazz.equals(this) || isReferencedBy(clazz, referencedClasses)) {&#xD;&#xA;&#x9;&#x9;return true;&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;if(!referencedClasses.contains(clazz)) {&#xD;&#xA;&#x9;&#x9;&#x9;referencedClasses.add(clazz);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return false;"/>
          </eAnnotations>
          <eParameters name="referencingClass" lowerBound="1">
            <eGenericType eTypeParameter="#//structure/generic/Class/C"/>
          </eParameters>
          <eParameters name="referencedClasses" upperBound="-1">
            <eGenericType eTypeParameter="#//structure/generic/Class/C"/>
          </eParameters>
        </eOperations>
        <eOperations name="validateEClassMatchesParentEReference" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xD;&#xA;if(this == this.getContainingSection() || this.getEClass() == null || !(this.eContainer() instanceof ActualReference&lt;?, ?, ?, ?>)) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&lt;%pamtram.structure.generic.ActualReference%>&lt;?, ?, ?, ?> parentReference = (ActualReference&lt;?, ?, ?, ?>) this.eContainer();&#xD;&#xA;&#xD;&#xA;if(parentReference.getEReference() == null) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;boolean result = parentReference.getEReference().getEReferenceType().isSuperTypeOf(this.getEClass());&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;The eClass '&quot; + this.eClass().getName() + &quot;' is not allowed by the containing reference!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.structure.generic.util.GenericValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;GenericValidator.CLASS__VALIDATE_ECLASS_MATCHES_PARENT_EREFERENCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.structure.generic.GenericPackage%>.Literals.CLASS__ECLASS }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
          </eAnnotations>
          <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
          <eParameters name="context">
            <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
              <eTypeArguments/>
              <eTypeArguments/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="validateCardinalityIsValid" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xD;&#xA;if(this == this.getContainingSection() || this.getEClass() == null || !(this.eContainer() instanceof ActualReference&lt;?, ?, ?, ?>)) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&lt;%pamtram.structure.generic.ActualReference%>&lt;?, ?, ?, ?> parentReference = (ActualReference&lt;?, ?, ?, ?>) this.eContainer();&#xD;&#xA;&#xD;&#xA;if(parentReference.getEReference() == null) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;boolean result = !(this.cardinality != &lt;%pamtram.structure.generic.CardinalityType%>.ONE &amp;&amp; parentReference.getEReference().getUpperBound() == 1 &amp;&amp; parentReference.getEReference().getLowerBound() == 1);&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;The cardinality of a Class must be specified as 'CardinalityType::ONE' when the upper and lower bound of the containing Reference is '1'!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.structure.generic.util.GenericValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;GenericValidator.CLASS__VALIDATE_CARDINALITY_IS_VALID,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.structure.generic.GenericPackage%>.Literals.CLASS__CARDINALITY }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
          </eAnnotations>
          <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
          <eParameters name="context">
            <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
              <eTypeArguments/>
              <eTypeArguments/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="validateContainerIsValid" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="boolean result;&#xD;&#xA;&#x9;&#x9;String errorMessage = &quot;&quot;;&#xD;&#xA;&#xD;&#x9;if (this.getContainer() == null) {&#xD;&#xA;&#x9;&#x9;&#x9;// nothing specified -> no problem as the 'container' is an optional info&#xD;&#xA;&#x9;&#x9;&#x9;//&#xD;&#xA;&#x9;&#x9;&#x9;result = true;&#xD;&#xA;&#x9;&#x9;} else if (this instanceof Section&lt;?, ?, ?, ?>) {&#xD;&#xA;&#x9;&#x9;&#x9;// For Sections, the container must point to a Class that can theoretically (according to the metamodel) act&#xD;&#xA;&#x9;&#x9;&#x9;// as container&#xD;&#xA;&#x9;&#x9;&#x9;//&#xD;&#xA;&#x9;&#x9;&#x9;result = this.getEClass() == null || this.getContainer().getEClass() == null&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;|| this.getContainer().getEClass().getEAllContainments().stream().map(org.eclipse.emf.ecore.EReference::getEReferenceType)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.anyMatch(e -> e.isSuperTypeOf(this.getEClass()));&#xD;&#xA;&#x9;&#x9;&#x9;errorMessage = &quot;The 'container' reference must point to a Class whose type (&lt;%org.eclipse.emf.ecore.EClass%>) owns a suitable containment reference!&quot;;&#xD;&#xA;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;// For normal Class, the container must point to a the containing Class&#xD;&#xA;&#x9;&#x9;&#x9;//&#xD;&#xA;&#x9;&#x9;&#x9;result = this.getContainer().equals(this.eContainer().eContainer());&#xD;&#xA;&#x9;&#x9;&#x9;errorMessage = &quot;The 'container' refrence must point to the containing Class!&quot;;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#x9;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#x9;&#x9;diagnostics.add(new BasicDiagnostic(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR, &lt;%pamtram.structure.generic.util.GenericValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;%pamtram.structure.generic.util.GenericValidator%>.CLASS__VALIDATE_CONTAINER_IS_VALID, errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.structure.generic.GenericPackage%>.Literals.CLASS__CONTAINER }));&#xD;&#xA;&#xD;&#x9;}&#xD;&#xA;&#xD;&#x9;return result;"/>
          </eAnnotations>
          <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
          <eParameters name="context">
            <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
              <eTypeArguments/>
              <eTypeArguments/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="eClass" lowerBound="1"
            eType="ecore:EClass http://www.eclipse.org/emf/2002/Ecore#//EClass">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The metamodel element (EClass) that this Class represents."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="cardinality" lowerBound="1"
            eType="#//structure/generic/CardinalityType" defaultValueLiteral="ONE">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This can be used to specify a cardinality constraint for this element.&#xD;&#xA;&lt;br />&#xD;&#xA;For example, setting this to 'ONE' means that exactly one element must be present to be matched (for SourceSections) resp. will be created during the execution of one mapping (for TargetSections)."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="references" upperBound="-1"
            containment="true" eOpposite="#//structure/generic/Reference/owningClass">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A list of References based on which further elements of the element structure a specified."/>
          </eAnnotations>
          <eGenericType eTypeParameter="#//structure/generic/Class/R"/>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="container">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This can be used to specify additional constraints on the containment structure of the current element structure.&#xD;&#xA;&lt;br />&#xD;&#xA;For SourceSections: By setting the 'container' reference, SourceSections will only be matched if the specified container Class can also be matched in the source model.&#xD;&#xA;&lt;br />&#xD;&#xA;For TargetSections: Created target structures will automatically connected to (contained by) an instance of the specified container Class."/>
          </eAnnotations>
          <eGenericType eTypeParameter="#//structure/generic/Class/C"/>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="attributes" upperBound="-1"
            containment="true" eOpposite="#//structure/generic/Attribute/owningClass">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A list of Attribute further describing the current element.&#xD;&#xA;&lt;br />&#xD;&#xA;Specified attributes can e.g. be equipped with additional constraints (for SourceSections) or can be set via an AttributeMapping (for TargetSections)."/>
          </eAnnotations>
          <eGenericType eTypeParameter="#//structure/generic/Class/A"/>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="allContainer" upperBound="-1"
            changeable="false" volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="get" value="&lt;%java.util.List%>&lt;Object> ret = new &lt;%java.util.ArrayList%>&lt;>();&#xD;&#xA;if(this.getContainer() != null) {&#xD;&#xA;&#xD;&#xA;&#x9;&lt;%pamtram.structure.generic.Class%>&lt;?, ?, ?, ?> toCheck = this;&#xD;&#xA;&#xD;&#xA;&#x9;while (toCheck.getContainer() != null &amp;&amp; !ret.contains(toCheck.getContainer())) {&#xD;&#xA;&#x9;&#x9;ret.add(toCheck.getContainer());&#xD;&#xA;&#x9;&#x9;toCheck = toCheck.getContainer();&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;if(this.getContainer() instanceof &lt;%pamtram.structure.generic.Section%>&lt;?, ?, ?, ?>) {&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;ret.addAll(((Section&lt;?, ?, ?, ?>) this.getContainer()).getAllExtend());&#xD;&#xA;&#x9;&#x9;ret.addAll(((Section&lt;?, ?, ?, ?>) this.getContainer()).getAllExtend().stream().flatMap(s -> s.getAllContainer().stream()).collect(&lt;%java.util.stream.Collectors%>.toList()));&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;ret = ret.stream().distinct().collect(Collectors.toList());&#xD;&#xA;&#xD;&#xA;return new &lt;%org.eclipse.emf.ecore.util.EcoreEList%>.UnmodifiableEList&lt;>(this, &lt;%pamtram.structure.generic.GenericPackage%>.Literals.CLASS__ALL_CONTAINER,&#xD;&#xA;&#x9;&#x9;ret.size(), ret.toArray());"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The list of recursively collected 'container' Classes."/>
          </eAnnotations>
          <eGenericType eTypeParameter="#//structure/generic/Class/C"/>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="actualAttributes" upperBound="-1"
            changeable="false" volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="get" value="&lt;%java.util.List%>&lt;Object> ret = this.getAttributes().stream().filter(a -> a instanceof pamtram.structure.generic.ActualAttribute&lt;?, ?, ?, ?>).collect(&lt;%java.util.stream.Collectors%>.toList());&#xD;&#xA;&#xD;&#xA;return new &lt;%org.eclipse.emf.ecore.util.EcoreEList%>.UnmodifiableEList&lt;>(this, &lt;%pamtram.structure.generic.GenericPackage%>.Literals.CLASS__ACTUAL_ATTRIBUTES,&#xD;&#xA;&#x9;&#x9;ret.size(), ret.toArray());"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The subset of the 'attributes' that are of type ActualAttribute."/>
          </eAnnotations>
          <eGenericType eTypeParameter="#//structure/generic/Class/A"/>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="virtualAttributes"
            upperBound="-1" changeable="false" volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="get" value="&lt;%java.util.List%>&lt;Object> ret = this.getAttributes().stream().filter(a -> a instanceof pamtram.structure.generic.VirtualAttribute&lt;?, ?, ?, ?>).collect(&lt;%java.util.stream.Collectors%>.toList());&#xD;&#xA;&#xD;&#xA;return new &lt;%org.eclipse.emf.ecore.util.EcoreEList%>.UnmodifiableEList&lt;>(this, &lt;%pamtram.structure.generic.GenericPackage%>.Literals.CLASS__ACTUAL_ATTRIBUTES,&#xD;&#xA;&#x9;&#x9;ret.size(), ret.toArray());"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The subset of the 'attributes' that are of type VirtualAttribute."/>
          </eAnnotations>
          <eGenericType eTypeParameter="#//structure/generic/Class/A"/>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="actualReferences" upperBound="-1"
            changeable="false" volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="get" value="&lt;%java.util.List%>&lt;Object> ret = this.getReferences().stream().filter(a -> a instanceof pamtram.structure.generic.ActualReference&lt;?, ?, ?, ?>).collect(&lt;%java.util.stream.Collectors%>.toList());&#xD;&#xA;&#xD;&#xA;return new &lt;%org.eclipse.emf.ecore.util.EcoreEList%>.UnmodifiableEList&lt;>(this, &lt;%pamtram.structure.generic.GenericPackage%>.Literals.CLASS__ACTUAL_REFERENCES,&#xD;&#xA;&#x9;&#x9;ret.size(), ret.toArray());"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The subset of the 'references' that are of type ActualReference."/>
          </eAnnotations>
          <eGenericType eTypeParameter="#//structure/generic/Class/R"/>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="virtualReferences"
            upperBound="-1" changeable="false" volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="get" value="&lt;%java.util.List%>&lt;Object> ret = this.getReferences().stream().filter(a -> a instanceof pamtram.structure.generic.VirtualReference&lt;?, ?, ?, ?>).collect(&lt;%java.util.stream.Collectors%>.toList());&#xD;&#xA;&#xD;&#xA;return new &lt;%org.eclipse.emf.ecore.util.EcoreEList%>.UnmodifiableEList&lt;>(this, &lt;%pamtram.structure.generic.GenericPackage%>.Literals.CLASS__VIRTUAL_REFERENCES,&#xD;&#xA;&#x9;&#x9;ret.size(), ret.toArray());"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The subset of the 'references' that are of type VirtualReference."/>
          </eAnnotations>
          <eGenericType eTypeParameter="#//structure/generic/Class/R"/>
        </eStructuralFeatures>
        <eGenericSuperTypes eClassifier="#//structure/generic/MetaModelElement">
          <eTypeArguments eTypeParameter="#//structure/generic/Class/S"/>
          <eTypeArguments eTypeParameter="#//structure/generic/Class/C"/>
          <eTypeArguments eTypeParameter="#//structure/generic/Class/R"/>
          <eTypeArguments eTypeParameter="#//structure/generic/Class/A"/>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Section" abstract="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="extendsValidSections containerMatchesExtendContainer"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A special Class that represents the root element (as an instance of an EClass) of an element structure.&#xD;&#xA;&lt;br />&#xD;&#xA;Note: Every specified structure must contain one and only one Section element (its root element)."/>
        </eAnnotations>
        <eTypeParameters name="S">
          <eBounds eClassifier="#//structure/generic/Section">
            <eTypeArguments eTypeParameter="#//structure/generic/Section/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Section/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Section/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Section/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="C">
          <eBounds eClassifier="#//structure/generic/Class">
            <eTypeArguments eTypeParameter="#//structure/generic/Section/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Section/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Section/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Section/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="R">
          <eBounds eClassifier="#//structure/generic/Reference">
            <eTypeArguments eTypeParameter="#//structure/generic/Section/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Section/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Section/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Section/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="A">
          <eBounds eClassifier="#//structure/generic/Attribute">
            <eTypeArguments eTypeParameter="#//structure/generic/Section/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Section/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Section/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Section/A"/>
          </eBounds>
        </eTypeParameters>
        <eOperations name="validateContainerMatchesExtendContainer" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="if(this.getContainer() == null) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;boolean result = this.getExtend().parallelStream().allMatch(&#xD;&#xA;&#x9;&#x9;e -> e.getContainer() == null || e.getContainer() == this.getContainer());&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;String errorMessage = &quot;The section extends a section that specifies a different container!&quot;;&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;diagnostics.add&#xD;&#xA;&#x9;&#x9;(new BasicDiagnostic&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9; &lt;%pamtram.structure.generic.util.GenericValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;GenericValidator.SECTION__VALIDATE_CONTAINER_MATCHES_EXTEND_CONTAINER,&#xD;&#xA;&#x9;&#x9;&#x9; errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9; new Object [] { this, &lt;%pamtram.structure.generic.GenericPackage%>.Literals.SECTION__EXTEND }));&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;return result;"/>
          </eAnnotations>
          <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
          <eParameters name="context">
            <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
              <eTypeArguments/>
              <eTypeArguments/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="validateExtendsValidSections" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xD;&#xA;if(this.getEClass() == null) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;boolean result = this.getExtend().parallelStream().noneMatch(e -> !e.isAbstract() || e.getEClass() != null&#xD;&#xA;&#x9;&#x9;&amp;&amp; this.getEClass() != e.getEClass() &amp;&amp; !this.getEClass().getEAllSuperTypes().contains(e.getEClass()));&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;The section extends a section that is either not abstract or that references an EClass of a different (super-)type!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.structure.generic.util.GenericValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;GenericValidator.SECTION__VALIDATE_EXTENDS_VALID_SECTIONS,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.structure.generic.GenericPackage%>.Literals.SECTION__EXTEND }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
          </eAnnotations>
          <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
          <eParameters name="context">
            <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
              <eTypeArguments/>
              <eTypeArguments/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="abstract" lowerBound="1"
            eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
            defaultValueLiteral="false">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="If set to 'true', this Section can be extended by other specified Sections (via the 'extend' reference) which will then recursively inherit the structure specified by this Section (all contained Attributes, References and Classes).&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;Note: Abstract Sections will not be (directly) matched against a source model. Consequently, Mappings based on abstract Sections will never be executed. Such mappings can however be used to specifiy abstract MappingHintGroups which can be extended by concrete MappingHintGroups that are based on a concrete Sub-Section of this abstract Section."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="extend" upperBound="-1">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The list of (abstract) Sections that this Section extends.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;This Section will recursively inherit the structure specified by all extended Sections (all contained Attributes, References and Classes)."/>
          </eAnnotations>
          <eGenericType eTypeParameter="#//structure/generic/Section/S"/>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="allExtend" upperBound="-1"
            changeable="false" volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="get" value="&lt;%java.util.Set%>&lt;Object> ret = new &lt;%java.util.HashSet%>&lt;>();&#xD;&#xA;&#xD;&#x9;List&lt;Section&lt;?, ?, ?, ?>> toCheck = new ArrayList&lt;>();&#xD;&#xA;&#x9;&#x9;toCheck.add(this);&#xD;&#xA;&#xD;&#x9;while (!toCheck.isEmpty()) {&#xD;&#xA;&#x9;&#x9;&#x9;Section&lt;?, ?, ?, ?> next = toCheck.remove(0);&#xD;&#xA;&#xD;&#x9;&#x9;List&lt;Section&lt;?, ?, ?, ?>> localToCheck = next.getExtend().stream().filter(e -> !ret.contains(e))&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.collect(&lt;%java.util.stream.Collectors%>.toList());&#xD;&#xA;&#x9;&#x9;&#x9;ret.addAll(localToCheck);&#xD;&#xA;&#x9;&#x9;&#x9;toCheck.addAll(localToCheck);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#x9;ret.addAll(this.getExtend().stream().flatMap(s -> s.getAllExtend().stream()).collect(&lt;%java.util.stream.Collectors%>.toList()));&#xD;&#xA;&#xD;&#x9;return new &lt;%org.eclipse.emf.ecore.util.EcoreEList%>.UnmodifiableEList&lt;>(this, &lt;%pamtram.structure.generic.GenericPackage%>.Literals.SECTION__ALL_EXTEND, ret.size(),&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ret.toArray());"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The list of recursively collected (abstract) extended Sections."/>
          </eAnnotations>
          <eGenericType eTypeParameter="#//structure/generic/Section/S"/>
        </eStructuralFeatures>
        <eGenericSuperTypes eClassifier="#//structure/generic/Class">
          <eTypeArguments eTypeParameter="#//structure/generic/Section/S"/>
          <eTypeArguments eTypeParameter="#//structure/generic/Section/C"/>
          <eTypeArguments eTypeParameter="#//structure/generic/Section/R"/>
          <eTypeArguments eTypeParameter="#//structure/generic/Section/A"/>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Reference" abstract="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="eReferenceMatchesParentEClass"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This represents a reference of an element structure.&#xD;&#xA;&lt;br />&#xD;&#xA;In order to allow for the description of complex element structures, target elements (Classes) can be specified for References via the 'value' reference."/>
        </eAnnotations>
        <eTypeParameters name="S">
          <eBounds eClassifier="#//structure/generic/Section">
            <eTypeArguments eTypeParameter="#//structure/generic/Reference/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Reference/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Reference/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Reference/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="C">
          <eBounds eClassifier="#//structure/generic/Class">
            <eTypeArguments eTypeParameter="#//structure/generic/Reference/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Reference/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Reference/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Reference/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="R">
          <eBounds eClassifier="#//structure/generic/Reference">
            <eTypeArguments eTypeParameter="#//structure/generic/Reference/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Reference/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Reference/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Reference/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="A">
          <eBounds eClassifier="#//structure/generic/Attribute">
            <eTypeArguments eTypeParameter="#//structure/generic/Reference/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Reference/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Reference/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Reference/A"/>
          </eBounds>
        </eTypeParameters>
        <eOperations name="getValuesGeneric" upperBound="-1">
          <eGenericType eTypeParameter="#//structure/generic/Reference/C"/>
        </eOperations>
        <eOperations name="addValuesGeneric">
          <eParameters name="values" upperBound="-1">
            <eGenericType eTypeParameter="#//structure/generic/Reference/C"/>
          </eParameters>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="owningClass" changeable="false"
            eOpposite="#//structure/generic/Class/references">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The Class containing this Reference."/>
          </eAnnotations>
          <eGenericType eTypeParameter="#//structure/generic/Reference/C"/>
        </eStructuralFeatures>
        <eGenericSuperTypes eClassifier="#//structure/generic/MetaModelElement">
          <eTypeArguments eTypeParameter="#//structure/generic/Reference/S"/>
          <eTypeArguments eTypeParameter="#//structure/generic/Reference/C"/>
          <eTypeArguments eTypeParameter="#//structure/generic/Reference/R"/>
          <eTypeArguments eTypeParameter="#//structure/generic/Reference/A"/>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ActualReference" abstract="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This represents a reference (as an instance of an EReference) of an element structure.&#xD;&#xA;&lt;br />&#xD;&#xA;In order to allow for the description of complex element structures, target elements (Classes) can be specified for References via the 'value' reference."/>
        </eAnnotations>
        <eTypeParameters name="S">
          <eBounds eClassifier="#//structure/generic/Section">
            <eTypeArguments eTypeParameter="#//structure/generic/ActualReference/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/ActualReference/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/ActualReference/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/ActualReference/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="C">
          <eBounds eClassifier="#//structure/generic/Class">
            <eTypeArguments eTypeParameter="#//structure/generic/ActualReference/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/ActualReference/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/ActualReference/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/ActualReference/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="R">
          <eBounds eClassifier="#//structure/generic/Reference">
            <eTypeArguments eTypeParameter="#//structure/generic/ActualReference/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/ActualReference/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/ActualReference/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/ActualReference/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="A">
          <eBounds eClassifier="#//structure/generic/Attribute">
            <eTypeArguments eTypeParameter="#//structure/generic/ActualReference/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/ActualReference/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/ActualReference/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/ActualReference/A"/>
          </eBounds>
        </eTypeParameters>
        <eOperations name="validateEReferenceMatchesParentEClass" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xD;&#xA;if(this.isLibraryEntry() || this.getEReference() == null || !(this.eContainer() instanceof &lt;%pamtram.structure.generic.Class%>)) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&lt;%org.eclipse.emf.ecore.EClass%> parentEClass = ((&lt;%pamtram.structure.generic.Class%>&lt;?, ?, ?, ?>) this.eContainer()).getEClass();&#xD;&#xA;&#xD;&#xA;boolean result = parentEClass == null ? true : parentEClass.getEAllReferences().contains(this.getEReference());&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;The eReference '&quot; + this.getEReference().getName() + &quot;' is not allowed by the containing Class!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.structure.generic.util.GenericValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;GenericValidator.ACTUAL_REFERENCE__VALIDATE_EREFERENCE_MATCHES_PARENT_ECLASS,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.structure.generic.GenericPackage%>.Literals.ACTUAL_REFERENCE__EREFERENCE }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
          </eAnnotations>
          <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
          <eParameters name="context">
            <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
              <eTypeArguments/>
              <eTypeArguments/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="eReference" lowerBound="1"
            eType="ecore:EClass http://www.eclipse.org/emf/2002/Ecore#//EReference">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The metamodel element (EReference) that this Reference represents."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eGenericSuperTypes eClassifier="#//structure/generic/Reference">
          <eTypeArguments eTypeParameter="#//structure/generic/ActualReference/S"/>
          <eTypeArguments eTypeParameter="#//structure/generic/ActualReference/C"/>
          <eTypeArguments eTypeParameter="#//structure/generic/ActualReference/R"/>
          <eTypeArguments eTypeParameter="#//structure/generic/ActualReference/A"/>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="VirtualReference" abstract="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This represents a reference of an element structure. In contrast to 'actual' References, 'virtual' Reference do not represent an actual metamodel element (EReference) but can be used to create additional (virtual) references.&#xD;&#xA;&lt;br />&#xD;&#xA;In order to allow for the description of complex element structures, target elements (Classes) can be specified for References via the 'value' reference. As the Reference is not based on an actual EReference, the actual instances of the specified target Classes need to be specified by the modeler by means of additional language elements (dependent on the concrete sub-type)."/>
        </eAnnotations>
        <eTypeParameters name="S">
          <eBounds eClassifier="#//structure/generic/Section">
            <eTypeArguments eTypeParameter="#//structure/generic/VirtualReference/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/VirtualReference/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/VirtualReference/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/VirtualReference/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="C">
          <eBounds eClassifier="#//structure/generic/Class">
            <eTypeArguments eTypeParameter="#//structure/generic/VirtualReference/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/VirtualReference/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/VirtualReference/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/VirtualReference/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="R">
          <eBounds eClassifier="#//structure/generic/Reference">
            <eTypeArguments eTypeParameter="#//structure/generic/VirtualReference/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/VirtualReference/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/VirtualReference/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/VirtualReference/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="A">
          <eBounds eClassifier="#//structure/generic/Attribute">
            <eTypeArguments eTypeParameter="#//structure/generic/VirtualReference/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/VirtualReference/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/VirtualReference/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/VirtualReference/A"/>
          </eBounds>
        </eTypeParameters>
        <eGenericSuperTypes eClassifier="#//structure/generic/Reference">
          <eTypeArguments eTypeParameter="#//structure/generic/VirtualReference/S"/>
          <eTypeArguments eTypeParameter="#//structure/generic/VirtualReference/C"/>
          <eTypeArguments eTypeParameter="#//structure/generic/VirtualReference/R"/>
          <eTypeArguments eTypeParameter="#//structure/generic/VirtualReference/A"/>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="CompositeReference" abstract="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="eReferenceIsContainment"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This represents a reference of an element structure. CompositeReferences can be used to describe the tree that is the basis of an element structure.&#xD;&#xA;&lt;br />&#xD;&#xA;In order to allow for the description of complex element structures, target elements (Classes) can be specified for References via the 'value' reference."/>
        </eAnnotations>
        <eTypeParameters name="S">
          <eBounds eClassifier="#//structure/generic/Section">
            <eTypeArguments eTypeParameter="#//structure/generic/CompositeReference/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/CompositeReference/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/CompositeReference/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/CompositeReference/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="C">
          <eBounds eClassifier="#//structure/generic/Class">
            <eTypeArguments eTypeParameter="#//structure/generic/CompositeReference/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/CompositeReference/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/CompositeReference/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/CompositeReference/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="R">
          <eBounds eClassifier="#//structure/generic/Reference">
            <eTypeArguments eTypeParameter="#//structure/generic/CompositeReference/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/CompositeReference/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/CompositeReference/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/CompositeReference/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="A">
          <eBounds eClassifier="#//structure/generic/Attribute">
            <eTypeArguments eTypeParameter="#//structure/generic/CompositeReference/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/CompositeReference/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/CompositeReference/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/CompositeReference/A"/>
          </eBounds>
        </eTypeParameters>
        <eOperations name="validateEReferenceIsContainment" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xD;&#xA;&lt;%org.eclipse.emf.ecore.EReference%> reference = this instanceof &lt;%pamtram.structure.generic.ActualReference%> ? ((ActualReference&lt;?, ?, ?, ?>) this).getEReference() : null;&#xD;&#xA;&#xD;&#xA;boolean result = reference == null || reference.isContainment();&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;The eReference '&quot; + reference.getName() + &quot;' is no containment reference!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.structure.generic.util.GenericValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;GenericValidator.COMPOSITE_REFERENCE__VALIDATE_EREFERENCE_IS_CONTAINMENT,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.structure.generic.GenericPackage%>.Literals.ACTUAL_REFERENCE__EREFERENCE }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
          </eAnnotations>
          <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
          <eParameters name="context">
            <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
              <eTypeArguments/>
              <eTypeArguments/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="value" upperBound="-1"
            containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The list of elements (Classes) further describing the element structure."/>
          </eAnnotations>
          <eGenericType eTypeParameter="#//structure/generic/CompositeReference/C"/>
        </eStructuralFeatures>
        <eGenericSuperTypes eClassifier="#//structure/generic/Reference">
          <eTypeArguments eTypeParameter="#//structure/generic/CompositeReference/S"/>
          <eTypeArguments eTypeParameter="#//structure/generic/CompositeReference/C"/>
          <eTypeArguments eTypeParameter="#//structure/generic/CompositeReference/R"/>
          <eTypeArguments eTypeParameter="#//structure/generic/CompositeReference/A"/>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="CrossReference" abstract="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="eReferenceIsNonContainment"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This represents a reference of an element structure. CrossReferences can be used to describe references to other element structures or to other elements of this structure.&#xD;&#xA;&lt;br />&#xD;&#xA;In order to allow for the description of complex element structures, target elements (Classes) can be specified for References via the 'value' reference."/>
        </eAnnotations>
        <eTypeParameters name="S">
          <eBounds eClassifier="#//structure/generic/Section">
            <eTypeArguments eTypeParameter="#//structure/generic/CrossReference/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/CrossReference/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/CrossReference/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/CrossReference/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="C">
          <eBounds eClassifier="#//structure/generic/Class">
            <eTypeArguments eTypeParameter="#//structure/generic/CrossReference/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/CrossReference/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/CrossReference/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/CrossReference/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="R">
          <eBounds eClassifier="#//structure/generic/Reference">
            <eTypeArguments eTypeParameter="#//structure/generic/CrossReference/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/CrossReference/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/CrossReference/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/CrossReference/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="A">
          <eBounds eClassifier="#//structure/generic/Attribute">
            <eTypeArguments eTypeParameter="#//structure/generic/CrossReference/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/CrossReference/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/CrossReference/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/CrossReference/A"/>
          </eBounds>
        </eTypeParameters>
        <eOperations name="validateValuesMatchReferenceType" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xD;&#xA;&lt;%org.eclipse.emf.ecore.EReference%> reference = this instanceof &lt;%pamtram.structure.generic.ActualReference%> ? ((ActualReference&lt;?, ?, ?, ?>) this).getEReference() : null;&#xD;&#xA;&#xD;&#xA;boolean result = reference == null ? true : this.getValue().parallelStream().allMatch(c -> reference.getEReferenceType().isSuperTypeOf(c.getEClass()));&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = this.getValue().parallelStream()&#xD;&#xA;&#x9;&#x9;.filter(c -> !reference.getEReferenceType().isSuperTypeOf(c.getEClass())).count()&#xD;&#xA;&#x9;&#x9;+ &quot; of the selected target Classes (Value) are not allowed by the selected eReference '&quot;&#xD;&#xA;&#x9;&#x9;+ reference.getName() + &quot;'!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.structure.generic.util.GenericValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;GenericValidator.CROSS_REFERENCE__VALIDATE_VALUES_MATCH_REFERENCE_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.structure.generic.GenericPackage%>.Literals.CROSS_REFERENCE__VALUE }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
          </eAnnotations>
          <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
          <eParameters name="context">
            <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
              <eTypeArguments/>
              <eTypeArguments/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="value" upperBound="-1">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The list of elements (Classes) further describing the element structure."/>
          </eAnnotations>
          <eGenericType eTypeParameter="#//structure/generic/CrossReference/C"/>
        </eStructuralFeatures>
        <eGenericSuperTypes eClassifier="#//structure/generic/Reference">
          <eTypeArguments eTypeParameter="#//structure/generic/CrossReference/S"/>
          <eTypeArguments eTypeParameter="#//structure/generic/CrossReference/C"/>
          <eTypeArguments eTypeParameter="#//structure/generic/CrossReference/R"/>
          <eTypeArguments eTypeParameter="#//structure/generic/CrossReference/A"/>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Attribute" abstract="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This represents an attribute of an element structure."/>
        </eAnnotations>
        <eTypeParameters name="S">
          <eBounds eClassifier="#//structure/generic/Section">
            <eTypeArguments eTypeParameter="#//structure/generic/Attribute/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Attribute/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Attribute/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Attribute/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="C">
          <eBounds eClassifier="#//structure/generic/Class">
            <eTypeArguments eTypeParameter="#//structure/generic/Attribute/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Attribute/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Attribute/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Attribute/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="R">
          <eBounds eClassifier="#//structure/generic/Reference">
            <eTypeArguments eTypeParameter="#//structure/generic/Attribute/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Attribute/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Attribute/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Attribute/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="A">
          <eBounds eClassifier="#//structure/generic/Attribute">
            <eTypeArguments eTypeParameter="#//structure/generic/Attribute/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Attribute/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Attribute/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Attribute/A"/>
          </eBounds>
        </eTypeParameters>
        <eStructuralFeatures xsi:type="ecore:EReference" name="owningClass" changeable="false"
            eOpposite="#//structure/generic/Class/attributes">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The Class containing this Attribute."/>
          </eAnnotations>
          <eGenericType eTypeParameter="#//structure/generic/Attribute/C"/>
        </eStructuralFeatures>
        <eGenericSuperTypes eClassifier="#//structure/generic/MetaModelElement">
          <eTypeArguments eTypeParameter="#//structure/generic/Attribute/S"/>
          <eTypeArguments eTypeParameter="#//structure/generic/Attribute/C"/>
          <eTypeArguments eTypeParameter="#//structure/generic/Attribute/R"/>
          <eTypeArguments eTypeParameter="#//structure/generic/Attribute/A"/>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ActualAttribute" abstract="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="attributeMatchesParentEClass"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This represents an attribute (as an instance of an EAttribute) of an element structure."/>
        </eAnnotations>
        <eTypeParameters name="S">
          <eBounds eClassifier="#//structure/generic/Section">
            <eTypeArguments eTypeParameter="#//structure/generic/ActualAttribute/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/ActualAttribute/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/ActualAttribute/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/ActualAttribute/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="C">
          <eBounds eClassifier="#//structure/generic/Class">
            <eTypeArguments eTypeParameter="#//structure/generic/ActualAttribute/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/ActualAttribute/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/ActualAttribute/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/ActualAttribute/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="R">
          <eBounds eClassifier="#//structure/generic/Reference">
            <eTypeArguments eTypeParameter="#//structure/generic/ActualAttribute/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/ActualAttribute/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/ActualAttribute/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/ActualAttribute/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="A">
          <eBounds eClassifier="#//structure/generic/Attribute">
            <eTypeArguments eTypeParameter="#//structure/generic/ActualAttribute/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/ActualAttribute/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/ActualAttribute/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/ActualAttribute/A"/>
          </eBounds>
        </eTypeParameters>
        <eOperations name="validateAttributeMatchesParentEClass" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xD;&#xA;if(this.isLibraryEntry() || this.getAttribute() == null || !(this.eContainer() instanceof &lt;%pamtram.structure.generic.Class%>&lt;?, ?, ?, ?>)) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;EClass parentEClass = ((&lt;%pamtram.structure.generic.Class%>&lt;?, ?, ?, ?>) this.eContainer()).getEClass();&#xD;&#xA;&#xD;&#xA;boolean result = parentEClass == null ? true : parentEClass.getEAllAttributes().contains(this.getAttribute());&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;The eAttribute '&quot; + this.getAttribute().getName() + &quot;' is not allowed by the containing Class!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.structure.generic.util.GenericValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;GenericValidator.ACTUAL_ATTRIBUTE__VALIDATE_ATTRIBUTE_MATCHES_PARENT_ECLASS,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.structure.generic.GenericPackage%>.Literals.ACTUAL_ATTRIBUTE__ATTRIBUTE }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
          </eAnnotations>
          <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
          <eParameters name="context">
            <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
              <eTypeArguments/>
              <eTypeArguments/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="attribute" lowerBound="1"
            eType="ecore:EClass http://www.eclipse.org/emf/2002/Ecore#//EAttribute">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The metamodel element (EAttribute) that this Attribute represents."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eGenericSuperTypes eClassifier="#//structure/generic/Attribute">
          <eTypeArguments eTypeParameter="#//structure/generic/ActualAttribute/S"/>
          <eTypeArguments eTypeParameter="#//structure/generic/ActualAttribute/C"/>
          <eTypeArguments eTypeParameter="#//structure/generic/ActualAttribute/R"/>
          <eTypeArguments eTypeParameter="#//structure/generic/ActualAttribute/A"/>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="VirtualAttribute" abstract="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This represents an attribute of an element structure. In contrast to 'actual' Attributes, 'virtual' Attributes do not represent an actual metamodel element (EAttribtue) but can be used to create additional (virtual) attributes.&#xD;&#xA;&lt;br />&#xD;&#xA; As the Attribute is not based on an actual EAttribute, the actual values held by this Attribute need to be specified manually by means of additional language elements (dependent on the concrete sub-type)."/>
        </eAnnotations>
        <eTypeParameters name="S">
          <eBounds eClassifier="#//structure/generic/Section">
            <eTypeArguments eTypeParameter="#//structure/generic/VirtualAttribute/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/VirtualAttribute/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/VirtualAttribute/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/VirtualAttribute/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="C">
          <eBounds eClassifier="#//structure/generic/Class">
            <eTypeArguments eTypeParameter="#//structure/generic/VirtualAttribute/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/VirtualAttribute/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/VirtualAttribute/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/VirtualAttribute/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="R">
          <eBounds eClassifier="#//structure/generic/Reference">
            <eTypeArguments eTypeParameter="#//structure/generic/VirtualAttribute/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/VirtualAttribute/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/VirtualAttribute/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/VirtualAttribute/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="A">
          <eBounds eClassifier="#//structure/generic/Attribute">
            <eTypeArguments eTypeParameter="#//structure/generic/VirtualAttribute/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/VirtualAttribute/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/VirtualAttribute/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/VirtualAttribute/A"/>
          </eBounds>
        </eTypeParameters>
        <eGenericSuperTypes eClassifier="#//structure/generic/Attribute">
          <eTypeArguments eTypeParameter="#//structure/generic/VirtualAttribute/S"/>
          <eTypeArguments eTypeParameter="#//structure/generic/VirtualAttribute/C"/>
          <eTypeArguments eTypeParameter="#//structure/generic/VirtualAttribute/R"/>
          <eTypeArguments eTypeParameter="#//structure/generic/VirtualAttribute/A"/>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EEnum" name="CardinalityType">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The type of cardinality constraint for an element."/>
        </eAnnotations>
        <eLiterals name="ONE">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Exactly one element must be present to be matched (for SourceSections) resp. will be created during the execution of one mapping (for TargetSections)."/>
          </eAnnotations>
        </eLiterals>
        <eLiterals name="ONE__INFINITY" value="1">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="At least one element must be present to be matched (for SourceSections) resp. will be created during the execution of one mapping (for TargetSections).&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;For elements of TargetSections, the concrete number to be created should be specified by additional MappingHints (CardinalityMappings or AttributeMappings)."/>
          </eAnnotations>
        </eLiterals>
        <eLiterals name="ZERO__INFINITY" value="2">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Zero or any number of elements must be present to be matched (for SourceSections) resp. will be created during the execution of one mapping (for TargetSections).&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;For elements of TargetSections, the concrete number to be created should be specified by additional MappingHints (CardinalityMappings or AttributeMappings)."/>
          </eAnnotations>
        </eLiterals>
      </eClassifiers>
    </eSubpackages>
    <eSubpackages name="constraint" nsURI="http://mfreund.de/pamtram/structure/constraint"
        nsPrefix="constraint">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This package contains all elements related to the description of ValueConstraints that may e.g. be used to describe a restriction/claim of specific values of an attribute in a SourceSection."/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EClass" name="ValueConstraint" abstract="true"
          interface="true" eSuperTypes="#//NamedElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The super type for all specific types that can be used to describe constraints for attribute values.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;ValueConstraints thereby specify a single reference value or list/range of reference values which the actual attribute value must or must not satisfy."/>
        </eAnnotations>
        <eOperations name="isLocalConstraint" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="if (this instanceof &lt;%pamtram.structure.constraint.ChoiceConstraint%>) {&#xD;&#xA;&#x9;return ((ChoiceConstraint) this).getChoices().stream().allMatch(&lt;%pamtram.structure.constraint.ValueConstraint%>::isLocalConstraint);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;if (&lt;%de.tud.et.ifa.agtele.emf.AgteleEcoreUtil%>.hasAncestorOfKind(this, &lt;%pamtram.structure.source.SourcePackage%>.Literals.ACTUAL_SOURCE_SECTION_ATTRIBUTE)) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;if (!(this instanceof &lt;%pamtram.structure.constraint.SingleReferenceValueConstraint%>)&#xD;&#xA;&#x9;&#x9;|| !AgteleEcoreUtil.hasAncestorOfKind(this, &lt;%pamtram.condition.ConditionPackage%>.Literals.ATTRIBUTE_CONDITION)) {&#xD;&#xA;&#x9;throw new UnsupportedOperationException();&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&lt;%org.eclipse.emf.ecore.EObject%> container = this;&#xD;&#xA;&#xD;&#xA;while (!(container instanceof &lt;%pamtram.mapping.Mapping%>)) {&#xD;&#xA;&#x9;if (container == null) {&#xD;&#xA;&#x9;&#x9;return false;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;container = container.eContainer();&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// The SourceSection of the Mapping that contains the constraint&#xD;&#xA;//&#xD;&#xA;SourceSection localSection = ((Mapping) container).getSourceSection();&#xD;&#xA;&#xD;&#xA;if (((SingleReferenceValueConstraint) this).getSourceElements().parallelStream()&#xD;&#xA;&#x9;&#x9;.allMatch(s -> s instanceof &lt;%pamtram.FixedValue%> || s instanceof &lt;%pamtram.mapping.extended.GlobalAttributeImporter%>&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;|| s instanceof &lt;%pamtram.structure.constraint.ValueConstraintSourceElement%> &amp;&amp; ((ValueConstraintSourceElement) s).getSource()&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.getContainingSection().equals(localSection)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;|| s instanceof &lt;%pamtram.structure.constraint.ValueConstraintExternalSourceElement%>&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&amp;&amp; ((ValueConstraintExternalSourceElement) s).getSource().getContainingSection()&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.isContainerFor(localSection))) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// A constraint is also 'local' if an InstancePointer with local or external SourceAttributes exist&#xD;&#xA;//&#xD;&#xA;return ((SingleReferenceValueConstraint) this).getInstanceSelectors()&#xD;&#xA;&#x9;&#x9;.parallelStream()&#xD;&#xA;&#x9;&#x9;.flatMap(instanceSelector -> instanceSelector.getSourceElements().parallelStream()&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;.filter(s -> s instanceof &lt;%pamtram.structure.InstanceSelectorSourceElement%>&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;|| s instanceof &lt;%pamtram.structure.InstanceSelectorExternalSourceElement%>))&#xD;&#xA;&#x9;&#x9;.findAny().isPresent();"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="type" lowerBound="1"
            eType="#//structure/constraint/ValueConstraintType" defaultValueLiteral="REQUIRED">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The type of this constraint (either REQUIRED or FORBIDDEN)."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EEnum" name="ValueConstraintType">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The type of value constraint (either REQUIRED or FORBIDDEN)."/>
        </eAnnotations>
        <eLiterals name="REQUIRED">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The actual attribute value MUST satisfy the value(s) specified by this constraint."/>
          </eAnnotations>
        </eLiterals>
        <eLiterals name="FORBIDDEN" value="1">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The actual attribute value MUST NOT satisfy the value(s) specified by this constraint."/>
          </eAnnotations>
        </eLiterals>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="SingleReferenceValueConstraint"
          abstract="true" eSuperTypes="#//structure/constraint/ValueConstraint #//ExpressionElement #//ModifiableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="onlyFixedValuesInSourceSections onlyFixedValuesOrGlobalAttributesInConditionModel"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A ValueConstraint for which the reference value is calculated based on the combination of a list of 'sourceElements'."/>
        </eAnnotations>
        <eOperations name="checkConstraint" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eParameters name="attrValue" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
          <eParameters name="refValue" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
        </eOperations>
        <eOperations name="validateOnlyFixedValuesInSourceSections" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="if(this.getSourceElements().isEmpty() || &#xD;&#xA;&#x9;&#x9;!&lt;%de.tud.et.ifa.agtele.emf.AgteleEcoreUtil%>.hasAncestorOfKind(this, &lt;%pamtram.structure.source.SourcePackage%>.eINSTANCE.getActualSourceSectionAttribute())) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;boolean result = this.getSourceElements().parallelStream().allMatch(s -> s instanceof &lt;%pamtram.FixedValue%>);&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;String errorMessage = &quot;This ValueConstraint must only&quot;&#xD;&#xA;&#x9;&#x9;&#x9;+ &quot; contain FixedValues as source elements as it is modeled as part of a SourceSection!'&quot;;&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;diagnostics.add&#xD;&#xA;&#x9;&#x9;(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9; &lt;%pamtram.structure.constraint.util.ConstraintValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;ConstraintValidator.SINGLE_REFERENCE_VALUE_CONSTRAINT__VALIDATE_ONLY_FIXED_VALUES_IN_SOURCE_SECTIONS,&#xD;&#xA;&#x9;&#x9;&#x9; errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9; new Object [] { this,  &lt;%pamtram.structure.constraint.ConstraintPackage%>.Literals.SINGLE_REFERENCE_VALUE_CONSTRAINT__SOURCE_ELEMENTS }));&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;return result;"/>
          </eAnnotations>
          <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
          <eParameters name="context">
            <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
              <eTypeArguments/>
              <eTypeArguments/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="validateOnlyFixedValuesOrGlobalAttributesInConditionModel"
            eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="if(this.getSourceElements().isEmpty() || &#xD;&#xA;&#x9;&#x9;!&lt;%de.tud.et.ifa.agtele.emf.AgteleEcoreUtil%>.hasAncestorOfKind(this, &lt;%pamtram.condition.ConditionPackage%>.eINSTANCE.getComplexCondition())) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&lt;%pamtram.condition.ComplexCondition%> condition = (ComplexCondition) AgteleEcoreUtil.getAncestorOfKind(this, &lt;%pamtram.condition.ConditionPackage%>.eINSTANCE.getComplexCondition());&#xD;&#xA;&#xD;&#xA;if(!condition.isConditionModelCondition()) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;boolean result = this.getSourceElements().parallelStream().allMatch(s -> s instanceof &lt;%pamtram.FixedValue%> || s instanceof &lt;%pamtram.mapping.extended.GlobalAttributeImporter%>);&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;String errorMessage = &quot;This ValueConstraint must only&quot;&#xD;&#xA;&#x9;&#x9;&#x9;+ &quot; contain FixedValues or GlobalAttributeImporters as source elements as it is modeled as part of a condition inside a ConditionModel!'&quot;;&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;diagnostics.add&#xD;&#xA;&#x9;&#x9;(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9; &lt;%pamtram.structure.constraint.util.ConstraintValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9; ConstraintValidator.SINGLE_REFERENCE_VALUE_CONSTRAINT__VALIDATE_ONLY_FIXED_VALUES_OR_GLOBAL_ATTRIBUTES_IN_CONDITION_MODEL,&#xD;&#xA;&#x9;&#x9;&#x9; errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9; new Object [] { this,  &lt;%pamtram.structure.constraint.ConstraintPackage%>.Literals.SINGLE_REFERENCE_VALUE_CONSTRAINT__SOURCE_ELEMENTS }));&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;return result;"/>
          </eAnnotations>
          <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
          <eParameters name="context">
            <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
              <eTypeArguments/>
              <eTypeArguments/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="sourceElements" upperBound="-1"
            eType="#//structure/constraint/ValueConstraintSourceInterface" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The list of 'sourceElements' based on which the reference value for this constraint is calculated."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="instanceSelectors"
            upperBound="-1" eType="#//structure/SourceInstanceSelector" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A list of InstanceSelectors that can be used to restrict the application of this constraint: &#xD;&#xA;&lt;br />&#xD;&#xA;Only Attributes (resp. their values) identified by the list of InstanceSelectors are checked against this constraint."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="EqualityConstraint" eSuperTypes="#//structure/constraint/SingleReferenceValueConstraint">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This ValueConstraint type checks if the determined attribute value is equal to the calculated reference value."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ChoiceConstraint" eSuperTypes="#//structure/constraint/ValueConstraint">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A ValueConstraint that specifies a list of values (each by means of an EqualityConstraint). For this constraint to be fulfilled, the actual attribute value must match at least one of the specified values."/>
        </eAnnotations>
        <eOperations name="checkConstraint" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="return refValue.stream().anyMatch(r -> r.equals(attrValue));"/>
          </eAnnotations>
          <eParameters name="attrValue" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
          <eParameters name="refValue" lowerBound="1" upperBound="-1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="choices" lowerBound="2"
            upperBound="-1" eType="#//structure/constraint/EqualityConstraint" containment="true"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="NumericConstraint" eSuperTypes="#//structure/constraint/SingleReferenceValueConstraint">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A ValueConstraint type that can be used for numeric attribute values. It (numerically) compares the determined attribute value to the calculated reference value.&#xD;&#xA;"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="operatorType" lowerBound="1"
            eType="#//structure/constraint/NumericConstraintOperatorType">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The comparison type used to (numerically) compare the actual attribute value to the determined reference value."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EEnum" name="NumericConstraintOperatorType">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The type of numerical comparison to be performed."/>
        </eAnnotations>
        <eLiterals name="EQUAL" literal="EQUAL">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The actual attribute value must be equal to the determined reference value."/>
          </eAnnotations>
        </eLiterals>
        <eLiterals name="GREATER" value="1" literal="GREATER">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The actual attribute value must be greater then the determined reference value."/>
          </eAnnotations>
        </eLiterals>
        <eLiterals name="GREATER_OR_EQUAL" value="2" literal="GREATER_OR_EQUAL">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The actual attribute value must be greater then or equal to the determined reference value."/>
          </eAnnotations>
        </eLiterals>
        <eLiterals name="LESS" value="3" literal="LESS">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The actual attribute value must be less then the determined reference value."/>
          </eAnnotations>
        </eLiterals>
        <eLiterals name="LESS_OR_EQUAL" value="4" literal="LESS_OR_EQUAL">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The actual attribute value must be less then or equal to the determined reference value."/>
          </eAnnotations>
        </eLiterals>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="StringConstraint" eSuperTypes="#//structure/constraint/SingleReferenceValueConstraint">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A ValueConstraint type that can be used for literal attribute values. It compares the determined attribute value to the calculated reference value based on a String comparison.&#xD;&#xA;"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="operatorType" lowerBound="1"
            eType="#//structure/constraint/StringConstraintOperatorType">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The comparison type used to compare the actual attribute value to the determined reference value."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="caseSensitive" lowerBound="1"
            eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
            defaultValueLiteral="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Whether the String comparison shall be performed case-sensitive (true) or case-insensitive (false)."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EEnum" name="StringConstraintOperatorType">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The type of String-based comparison to be performed."/>
        </eAnnotations>
        <eLiterals name="MATCH_EQUAL">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The actual attribute value must be equal to the determined reference value."/>
          </eAnnotations>
        </eLiterals>
        <eLiterals name="MATCH_BEGINNING" value="1">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The actual attribute value must begin with the determined reference value."/>
          </eAnnotations>
        </eLiterals>
        <eLiterals name="MATCH_ENDING" value="2">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The actual attribute value must end with the determined reference value."/>
          </eAnnotations>
        </eLiterals>
        <eLiterals name="MATCH_SUBSTRING" value="3">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The actual attribute value must contain the determined reference value."/>
          </eAnnotations>
        </eLiterals>
        <eLiterals name="MATCH_REGEX" value="4">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The actual attribute value must satisfy the regular expression specified by the determined reference value."/>
          </eAnnotations>
        </eLiterals>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ValueConstraintSourceInterface"
          abstract="true" interface="true" eSuperTypes="#//mapping/extended/MappingHintSourceInterface">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The common superclass of all types that can be used as 'sourceElement' to calculate the reference value of a ValueConstraint."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ValueConstraintSourceElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A concrete type of 'sourceElement' to calculate the reference value of a ValueConstraint.&lt;br />&#xD;&#xA;This type is based on the value of a 'local' attribute.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;Note: See the documentation of 'LocalDynamicSourceElement' for a detailed explanation of the meaning of 'local' source elements."/>
        </eAnnotations>
        <eGenericSuperTypes eClassifier="#//structure/LocalDynamicSourceElement">
          <eTypeArguments eClassifier="#//structure/source/SourceSection"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionClass"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionReference"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionAttribute"/>
        </eGenericSuperTypes>
        <eGenericSuperTypes eClassifier="#//structure/constraint/ValueConstraintSourceInterface"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ValueConstraintExternalSourceElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A concrete type of 'sourceElement' to calculate the reference value of a ValueConstraint.&lt;br />&#xD;&#xA;This type is based on the value of an 'external' attribute.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;Note: See the documentation of 'ExternalDynamicSourceElement' for a detailed explanation of the meaning of 'external' source elements."/>
        </eAnnotations>
        <eGenericSuperTypes eClassifier="#//structure/ExternalDynamicSourceElement">
          <eTypeArguments eClassifier="#//structure/source/SourceSection"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionClass"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionReference"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionAttribute"/>
        </eGenericSuperTypes>
        <eGenericSuperTypes eClassifier="#//structure/constraint/ValueConstraintSourceInterface"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ValueConstraintGlobalSourceElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A concrete type of 'sourceElement' to calculate the reference value of a ValueConstraint.&lt;br />&#xD;&#xA;This type is based on the value of a 'global' attribute.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;Note: See the documentation of 'GlobalDynamicSourceElement' for a detailed explanation of the meaning of 'global' source elements."/>
        </eAnnotations>
        <eGenericSuperTypes eClassifier="#//structure/ExternalDynamicSourceElement">
          <eTypeArguments eClassifier="#//structure/source/SourceSection"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionClass"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionReference"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionAttribute"/>
        </eGenericSuperTypes>
        <eGenericSuperTypes eClassifier="#//structure/constraint/ValueConstraintSourceInterface"/>
      </eClassifiers>
    </eSubpackages>
    <eSubpackages name="source" nsURI="http://mfreund.de/pamtram/structure/source"
        nsPrefix="source">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This package contains all elements related to the description of source element structures (aka SourceSections). These form the left-hand side (LHS) of a mapping."/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EClass" name="SourceSection">
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="isReferencedByMapping"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A special SourceSectionClass that represents the root element (as an instance of an EClass) of an element structure in a source model.&#xD;&#xA;&lt;br />&#xD;&#xA;Note: Every specified source model structure must contain one and only one SourceSection element (its root element)."/>
        </eAnnotations>
        <eOperations name="validateIsReferencedByMapping" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xD;&#xA;boolean result = !this.getReferencingMappings().isEmpty();&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;The section is not referenced by any mapping!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.WARNING,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.structure.source.util.SourceValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;SourceValidator.SOURCE_SECTION__VALIDATE_IS_REFERENCED_BY_MAPPING,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.structure.source.SourcePackage%>.Literals.SOURCE_SECTION }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
          </eAnnotations>
          <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
          <eParameters name="context">
            <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
              <eTypeArguments/>
              <eTypeArguments/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="referencingMappings"
            upperBound="-1" eType="#//mapping/MappingType" changeable="false" volatile="true"
            transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="get" value="&#xD;&#xA;List&lt;&lt;%pamtram.mapping.Mapping%>> mappings = new &lt;%java.util.ArrayList%>&lt;>();&#xD;&#xA;&#xD;&#xA;if (this.eResource() != null) {&#xD;&#xA;&#xD;&#xA;&#x9;mappings = this.eResource().getResourceSet().getResources().stream()&#xD;&#xA;&#x9;&#x9;&#x9;.filter(r -> r.getContents().get(0) instanceof pamtram.PAMTraM)&#xD;&#xA;&#x9;&#x9;&#x9;.flatMap(r -> ((pamtram.PAMTraM) r.getContents().get(0)).getMappings().stream())&#xD;&#xA;&#x9;&#x9;&#x9;.collect(&lt;%java.util.stream.Collectors%>.toList());&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;List&lt;Mapping> referencingMappings = mappings.stream().filter(m -> this.equals(m.getSourceSection())).collect(Collectors.toList());&#xD;&#xA;&#xD;&#xA;return new &lt;%org.eclipse.emf.ecore.util.EcoreEList.UnmodifiableEList%>&lt;>(this, &lt;%pamtram.structure.source.SourcePackage%>.Literals.SOURCE_SECTION__REFERENCING_MAPPINGS,&#xD;&#xA;&#x9;&#x9;referencingMappings.size(), referencingMappings.toArray());"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="All Mappings that are based on this SourceSection (that specify this as their 'sourceSection')."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eGenericSuperTypes eClassifier="#//structure/source/SourceSectionClass"/>
        <eGenericSuperTypes eClassifier="#//structure/generic/Section">
          <eTypeArguments eClassifier="#//structure/source/SourceSection"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionClass"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionReference"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionAttribute"/>
        </eGenericSuperTypes>
        <eGenericSuperTypes eClassifier="#//DeactivatableElement"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="SourceSectionClass">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This represents one element (as an instance of an EClass) of a source model element structure.&#xD;&#xA;&lt;br />&#xD;&#xA;In order to allow for the description of complex element structures, Classes can be equipped with Attributes and References (which itself may reference/contain other Classes)."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="includeSubTypes" lowerBound="1"
            eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
            defaultValueLiteral="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Whether this shall also represent source model elements that are instances of sub-classes of the specified EClass."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eGenericSuperTypes eClassifier="#//structure/generic/Class">
          <eTypeArguments eClassifier="#//structure/source/SourceSection"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionClass"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionReference"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionAttribute"/>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="SourceSectionReference" abstract="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This represents a reference of a source model element structure.&#xD;&#xA;&lt;br />&#xD;&#xA;In order to allow for the description of complex element structures, target elements (Classes) can be specified for References via the 'value' reference."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="ignoreUnmatchedElements"
            lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
            defaultValueLiteral="false">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This determines the matching behavior in the case that there are source model elements that are not covered by one of the Classes specified as 'value' for this Reference.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;If this is set to 'true', the source model excerpt will nonetheless be declared a match for this SourceSection.&#xD;&#xA;&lt;br />&#xD;&#xA;If this is set to 'false', the source model excerpt will NOT be declared a match. This means, that all source model elements referenced via this Reference need to matched against Classes specified as 'value' for this Reference."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eGenericSuperTypes eClassifier="#//structure/generic/Reference">
          <eTypeArguments eClassifier="#//structure/source/SourceSection"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionClass"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionReference"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionAttribute"/>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="SourceSectionCompositeReference">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This represents a reference (as an instance of an EReference) of a source model element structure. CompositeReferences can be used to describe the tree that is the basis of an element structure.&#xD;&#xA;&lt;br />&#xD;&#xA;In order to allow for the description of complex element structures, target elements (Classes) can be specified for References via the 'value' reference."/>
        </eAnnotations>
        <eGenericSuperTypes eClassifier="#//structure/generic/CompositeReference">
          <eTypeArguments eClassifier="#//structure/source/SourceSection"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionClass"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionReference"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionAttribute"/>
        </eGenericSuperTypes>
        <eGenericSuperTypes eClassifier="#//structure/source/SourceSectionReference"/>
        <eGenericSuperTypes eClassifier="#//structure/generic/ActualReference">
          <eTypeArguments eClassifier="#//structure/source/SourceSection"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionClass"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionReference"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionAttribute"/>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="SourceSectionCrossReference">
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="valuesMatchReferenceType"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This represents a reference (as an instance of an EReference) of a source model element structure. CrossReferences can be used to describe references to other element structures or to other elements of this structure.&#xD;&#xA;&lt;br />&#xD;&#xA;In order to allow for the description of complex element structures, target elements (Classes) can be specified for References via the 'value' reference."/>
        </eAnnotations>
        <eGenericSuperTypes eClassifier="#//structure/generic/CrossReference">
          <eTypeArguments eClassifier="#//structure/source/SourceSection"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionClass"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionReference"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionAttribute"/>
        </eGenericSuperTypes>
        <eGenericSuperTypes eClassifier="#//structure/source/SourceSectionReference"/>
        <eGenericSuperTypes eClassifier="#//structure/generic/ActualReference">
          <eTypeArguments eClassifier="#//structure/source/SourceSection"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionClass"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionReference"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionAttribute"/>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="VirtualSourceSectionCrossReference">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This represents a reference of a source model element structure. CrossReferences can be used to describe references to other element structures or to other elements of this structure.&#xD;&#xA;&lt;br />&#xD;&#xA;In order to allow for the description of complex element structures, target elements (Classes) can be specified for References via the 'value' reference.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;In contrast to 'actual' References, 'virtual' Reference do not represent an actual metamodel element (EReference) but can be used to create additional (virtual) references. As the Reference is not based on an actual EReference, the actual instances of the specified target Classes need to be specified manually. Therefore, a 'derivation' specification has to be given by the modeler."/>
        </eAnnotations>
        <eOperations name="validateDerivation" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xD;&#xA;if (this.getDerivation() == null || this.getDerivation().isEmpty()&#xD;&#xA;&#x9;&#x9;|| !(this.eContainer() instanceof SourceSectionClass)&#xD;&#xA;&#x9;&#x9;|| ((&lt;%pamtram.structure.source.SourceSectionClass%>) this.eContainer()).getEClass() == null) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;boolean result = true;&#xD;&#xA;String parserException = &quot;&quot;;&#xD;&#xA;&#xD;&#xA;try {&#xD;&#xA;&#x9;&lt;%pamtram.util.OCLUtil%>.validateQuery(this.getDerivation(), ((SourceSectionClass) this.eContainer()).getEClass());&#xD;&#xA;} catch (&lt;%org.eclipse.ocl.ParserException%> e) {&#xD;&#xA;&#x9;result = false;&#xD;&#xA;&#x9;parserException = e.getMessage();&#xD;&#xA;&#x9;e.printStackTrace();&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;The specified derivation is not valid! The following error was provided: &quot; + parserException;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.structure.source.util.SourceValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;SourceValidator.VIRTUAL_SOURCE_SECTION_CROSS_REFERENCE__VALIDATE_DERIVATION,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.structure.source.SourcePackage%>.Literals.VIRTUAL_SOURCE_SECTION_CROSS_REFERENCE }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
          </eAnnotations>
          <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
          <eParameters name="context">
            <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
              <eTypeArguments/>
              <eTypeArguments/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="derivation" lowerBound="1"
            eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="An OCL expression describing the derivation of the actual instances of the specified target Classes."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eGenericSuperTypes eClassifier="#//structure/generic/CrossReference">
          <eTypeArguments eClassifier="#//structure/source/SourceSection"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionClass"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionReference"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionAttribute"/>
        </eGenericSuperTypes>
        <eGenericSuperTypes eClassifier="#//structure/source/SourceSectionReference"/>
        <eGenericSuperTypes eClassifier="#//structure/generic/VirtualReference">
          <eTypeArguments eClassifier="#//structure/source/SourceSection"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionClass"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionReference"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionAttribute"/>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="SourceSectionAttribute" abstract="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This represents an attribute of a source model element structure."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="valueConstraints" upperBound="-1"
            eType="#//structure/constraint/ValueConstraint" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A list of ValueConstraints that specify a single reference value or a list/range of reference values which the actual attribute value must or must not satisfy.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;A certain attribute (value) in a source model will only match against this Attribute if all specified constraints are met."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eGenericSuperTypes eClassifier="#//structure/generic/Attribute">
          <eTypeArguments eClassifier="#//structure/source/SourceSection"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionClass"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionReference"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionAttribute"/>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ActualSourceSectionAttribute">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This represents an attribute (as an instance of an EAttribute) of a source model element structure."/>
        </eAnnotations>
        <eGenericSuperTypes eClassifier="#//structure/source/SourceSectionAttribute"/>
        <eGenericSuperTypes eClassifier="#//structure/generic/ActualAttribute">
          <eTypeArguments eClassifier="#//structure/source/SourceSection"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionClass"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionReference"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionAttribute"/>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="VirtualSourceSectionAttribute">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This represents an attribute of a source model element structure. In contrast to 'actual' Attributes, 'virtual' Attributes do not represent an actual metamodel element (EAttribtue) but can be used to create additional (virtual) attributes.&#xD;&#xA;&lt;br />&#xD;&#xA; As the Attribute is not based on an actual EAttribute, the actual values held by this Attribute need to be specified manually. Therefore, a 'derivation' specification has to be given by the modeler."/>
        </eAnnotations>
        <eOperations name="validateDerivation" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xD;&#xA;if (this.getDerivation() == null || this.getDerivation().isEmpty()&#xD;&#xA;&#x9;&#x9;|| !(this.eContainer() instanceof SourceSectionClass)&#xD;&#xA;&#x9;&#x9;|| ((&lt;%pamtram.structure.source.SourceSectionClass%>) this.eContainer()).getEClass() == null) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;boolean result = true;&#xD;&#xA;String parserException = &quot;&quot;;&#xD;&#xA;&#xD;&#xA;try {&#xD;&#xA;&#x9;&lt;%pamtram.util.OCLUtil%>.validateQuery(this.getDerivation(), ((SourceSectionClass) this.eContainer()).getEClass());&#xD;&#xA;} catch (&lt;%org.eclipse.ocl.ParserException%> e) {&#xD;&#xA;&#x9;result = false;&#xD;&#xA;&#x9;parserException = e.getMessage();&#xD;&#xA;&#x9;e.printStackTrace();&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;The specified derivation is not valid! The following error was provided: &quot; + parserException;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.structure.source.util.SourceValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;SourceValidator.VIRTUAL_SOURCE_SECTION_ATTRIBUTE__VALIDATE_DERIVATION,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.structure.source.SourcePackage%>.Literals.VIRTUAL_SOURCE_SECTION_ATTRIBUTE }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
          </eAnnotations>
          <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
          <eParameters name="context">
            <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
              <eTypeArguments/>
              <eTypeArguments/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="derivation" lowerBound="1"
            eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="An OCL expression describing the derivation of the actual value(s) of this attribute."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eGenericSuperTypes eClassifier="#//structure/source/SourceSectionAttribute"/>
        <eGenericSuperTypes eClassifier="#//structure/generic/VirtualAttribute">
          <eTypeArguments eClassifier="#//structure/source/SourceSection"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionClass"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionReference"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionAttribute"/>
        </eGenericSuperTypes>
      </eClassifiers>
    </eSubpackages>
    <eSubpackages name="target" nsURI="http://mfreund.de/pamtram/structure/target"
        nsPrefix="target">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This package contains all elements related to the description of target element structures (aka TargetSections). These form the right-hand side (RHS) of a mapping."/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EClass" name="TargetSection">
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="isReferencedByMappingHintGroup"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A special TargetSectionClass that represents the root element (as an instance of an EClass) of an element structure to be created in a target model.&#xD;&#xA;&lt;br />&#xD;&#xA;Note: Every specified target model structure must contain one and only one TargetSection element (its root element)."/>
        </eAnnotations>
        <eOperations name="validateIsReferencedByMappingHintGroup" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xD;&#xA;boolean result = !this.getReferencingMappingHintGroups().isEmpty();&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;The section is not referenced by any hint group and will not be instantiated!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.WARNING,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.structure.target.util.TargetValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;TargetValidator.TARGET_SECTION__VALIDATE_IS_REFERENCED_BY_MAPPING_HINT_GROUP,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.structure.target.TargetPackage%>.Literals.TARGET_SECTION }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
          </eAnnotations>
          <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
          <eParameters name="context">
            <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
              <eTypeArguments/>
              <eTypeArguments/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="validateCardinality" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="boolean result = this.getCardinality() != &lt;%pamtram.structure.generic.CardinalityType%>.ONE;&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;The cardinality of this section is currently set to 'ONE'. Consider changing the cardinality if you want to allow that multiple instances of this section are created based on a mapping!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.WARNING,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.structure.target.util.TargetValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;TargetValidator.TARGET_SECTION__VALIDATE_CARDINALITY,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.structure.target.TargetPackage%>.Literals.TARGET_SECTION }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
          </eAnnotations>
          <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
          <eParameters name="context">
            <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
              <eTypeArguments/>
              <eTypeArguments/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="referencingMappingHintGroups"
            upperBound="-1" eType="#//mapping/MappingHintGroupType" changeable="false"
            volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="get" value="&#xD;&#xA;List&lt;&lt;%pamtram.mapping.Mapping%>> mappings = new &lt;%java.util.ArrayList%>&lt;>();&#xD;&#xA;&#xD;&#xA;if (this.eResource() != null) {&#xD;&#xA;&#xD;&#xA;&#x9;mappings = this.eResource().getResourceSet().getResources().stream()&#xD;&#xA;&#x9;&#x9;&#x9;.filter(r -> r.getContents().get(0) instanceof pamtram.PAMTraM)&#xD;&#xA;&#x9;&#x9;&#x9;.flatMap(r -> ((pamtram.PAMTraM) r.getContents().get(0)).getMappings().stream())&#xD;&#xA;&#x9;&#x9;&#x9;.collect(&lt;%java.util.stream.Collectors%>.toList());&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;List&lt;MappingHintGroupType> referencingHintGroups = mappings.stream().flatMap(m -> m.getMappingHintGroups().stream()).filter(m -> this.equals(m.getTargetSection())).collect(Collectors.toList());&#xD;&#xA;&#xD;&#xA;return new &lt;%org.eclipse.emf.ecore.util.EcoreEList.UnmodifiableEList%>&lt;>(this, &lt;%pamtram.structure.target.TargetPackage%>.Literals.TARGET_SECTION__REFERENCING_MAPPING_HINT_GROUPS,&#xD;&#xA;&#x9;&#x9;referencingHintGroups.size(), referencingHintGroups.toArray());"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="All MappingHintGroups that lead to the instantiation of this TargetSection (that specify this as their 'targetSection')."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="file" eType="#//structure/target/FileAttribute">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="If present, this specifies the model resp. file to which the created target model structure will be persisted.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;This can be used to statically or dynamically specify the target models/model files to be created in the course of a transformation."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eGenericSuperTypes eClassifier="#//structure/target/TargetSectionClass"/>
        <eGenericSuperTypes eClassifier="#//structure/generic/Section">
          <eTypeArguments eClassifier="#//structure/target/TargetSection"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionClass"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionReference"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionAttribute"/>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="FileAttribute" eSuperTypes="#//structure/target/VirtualTargetSectionAttribute">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This specifies the model resp. file to which the target model structure(s) created based on this TargetSection will be persisted.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;This can be used to statically or dynamically specify the target models/model files to be created in the course of a transformation. For example, this can be used to persist each instance of a TargetSection in its own file (if the 'value' of this attribute is set dynamically for each instance)."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="fileType" lowerBound="1"
            eType="#//structure/target/FileType">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The type of the model/file to be created."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EEnum" name="FileType">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The type of a model/file."/>
        </eAnnotations>
        <eLiterals name="XMI">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="An XMI file that is based on an Ecore-based metamodel."/>
          </eAnnotations>
        </eLiterals>
        <eLiterals name="XML" value="1">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="An XML file that is based on an XML schema (XSD)."/>
          </eAnnotations>
        </eLiterals>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="TargetSectionClass">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This represents one element (as an instance of an EClass) of an element structure to be created in a target model.&#xD;&#xA;&lt;br />&#xD;&#xA;In order to allow for the description of complex element structures, Classes can be equipped with Attributes and References (which itself may reference/contain other Classes)."/>
        </eAnnotations>
        <eGenericSuperTypes eClassifier="#//structure/generic/Class">
          <eTypeArguments eClassifier="#//structure/target/TargetSection"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionClass"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionReference"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionAttribute"/>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="TargetSectionReference" abstract="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This represents a reference of an element structure to be created in a target model.&#xD;&#xA;&lt;br />&#xD;&#xA;In order to allow for the description of complex element structures, target elements (Classes) can be specified for References via the 'value' reference."/>
        </eAnnotations>
        <eGenericSuperTypes eClassifier="#//structure/generic/Reference">
          <eTypeArguments eClassifier="#//structure/target/TargetSection"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionClass"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionReference"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionAttribute"/>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="TargetSectionCompositeReference">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This represents a reference (as an instance of an EReference) of an element structure to be created in a target model. CompositeReferences can be used to describe the tree that is the basis of an element structure.&#xD;&#xA;&lt;br />&#xD;&#xA;In order to allow for the description of complex element structures, target elements (Classes) can be specified for References via the 'value' reference."/>
        </eAnnotations>
        <eGenericSuperTypes eClassifier="#//structure/generic/CompositeReference">
          <eTypeArguments eClassifier="#//structure/target/TargetSection"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionClass"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionReference"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionAttribute"/>
        </eGenericSuperTypes>
        <eGenericSuperTypes eClassifier="#//structure/target/TargetSectionReference"/>
        <eGenericSuperTypes eClassifier="#//structure/generic/ActualReference">
          <eTypeArguments eClassifier="#//structure/target/TargetSection"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionClass"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionReference"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionAttribute"/>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="TargetSectionCrossReference">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This represents a reference (as an instance of an EReference) of an element structure to be created in a target model. CrossReferences can be used to describe references to other element structures or to other elements of this structure.&#xD;&#xA;&lt;br />&#xD;&#xA;In order to allow for the description of complex element structures, target elements (Classes) can be specified for References via the 'value' reference."/>
        </eAnnotations>
        <eOperations name="validateEReferenceIsNonContainment" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xD;&#xA;boolean result = this.getEReference() == null ? true : !this.getEReference().isContainment();&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;The eReference '&quot; + this.getEReference().getName() + &quot;' is no non-containment reference! CrossReferences based on ContainmentReferences are not yet supported...&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.structure.target.util.TargetValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;TargetValidator.TARGET_SECTION_CROSS_REFERENCE__VALIDATE_EREFERENCE_IS_NON_CONTAINMENT,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.structure.generic.GenericPackage%>.Literals.ACTUAL_REFERENCE__EREFERENCE }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
          </eAnnotations>
          <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
          <eParameters name="context">
            <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
              <eTypeArguments/>
              <eTypeArguments/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eGenericSuperTypes eClassifier="#//structure/generic/CrossReference">
          <eTypeArguments eClassifier="#//structure/target/TargetSection"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionClass"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionReference"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionAttribute"/>
        </eGenericSuperTypes>
        <eGenericSuperTypes eClassifier="#//structure/target/TargetSectionReference"/>
        <eGenericSuperTypes eClassifier="#//structure/generic/ActualReference">
          <eTypeArguments eClassifier="#//structure/target/TargetSection"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionClass"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionReference"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionAttribute"/>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="TargetSectionAttribute" abstract="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This represents an attribute of an element structure to be created in a target model."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="unique" lowerBound="1"
            eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
            defaultValueLiteral="false">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="If this is set to 'true', no two element structures with the same value of this Attribute will be created in the course of a transformation.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;Currently, if a second element structure with the same attribute value would be created, this second structure is simply discarded. In the future, it might be useful to consider merging the two created structures."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This can be used to specify a fixed value for this attribute that will be used for all created instances.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;Note: The specified value will be overriden in case an AttributeMapping is specified for this Attribute."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eGenericSuperTypes eClassifier="#//structure/generic/Attribute">
          <eTypeArguments eClassifier="#//structure/target/TargetSection"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionClass"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionReference"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionAttribute"/>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ActualTargetSectionAttribute">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This represents an attribute (as an instance of an EAttribute) of an element structure to be created in a target model."/>
        </eAnnotations>
        <eGenericSuperTypes eClassifier="#//structure/target/TargetSectionAttribute"/>
        <eGenericSuperTypes eClassifier="#//structure/generic/ActualAttribute">
          <eTypeArguments eClassifier="#//structure/target/TargetSection"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionClass"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionReference"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionAttribute"/>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="VirtualTargetSectionAttribute">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This represents an attribute of a target model element structure. In contrast to 'actual' Attributes, 'virtual' Attributes do not represent an actual metamodel element (EAttribtue) an will thus not actually be persisted in the target model.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;VirtualTargetSectionAttributes are usually used as temporary variables (to store values calculated by means of an AttributeMapping). The stored values can then e.g. be used as reference value for Container- or ReferenceTargetSelectors."/>
        </eAnnotations>
        <eGenericSuperTypes eClassifier="#//structure/target/TargetSectionAttribute"/>
        <eGenericSuperTypes eClassifier="#//structure/generic/VirtualAttribute">
          <eTypeArguments eClassifier="#//structure/target/TargetSection"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionClass"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionReference"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionAttribute"/>
        </eGenericSuperTypes>
      </eClassifiers>
    </eSubpackages>
    <eSubpackages name="library" nsURI="http://mfreund.de/pamtram/structure/library"
        nsPrefix="library">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This package contains all elements related to the usage of library elements as TargetSections resp. right-hand side of a mapping.&#xD;&#xA;&lt;br />&#xD;&#xA;The library elements need to be based on the generic library meta-model 'GenLibrary' (or one of its specializations for a specific UI meta-model)."/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EClass" name="LibraryParameter" abstract="true"
          eSuperTypes="#//NamedElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The common super type for all wrapper elements for GenLibrary parameters."/>
        </eAnnotations>
        <eTypeParameters name="ParameterType"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="source" lowerBound="1"
            eType="ecore:EClass http://www.eclipse.org/emf/2002/Ecore#//EObject">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The model element inside the GenLibrary entry that this parameter influences."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="originalParameter"
            lowerBound="1">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The GenLibrary parameter that this wraps."/>
          </eAnnotations>
          <eGenericType eTypeParameter="#//structure/library/LibraryParameter/ParameterType"/>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="AttributeParameter">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A wrapper element for a GenLibrary AttributeParameter."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="attribute" lowerBound="1"
            eType="#//structure/target/ActualTargetSectionAttribute" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The Attribute that can be used to set the value for the AttributeParameter (either by specifying a fixed value or by means of an AttributeMapping)."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eGenericSuperTypes eClassifier="#//structure/library/LibraryParameter">
          <eTypeArguments eClassifier="ecore:EClass ../../de.tud.et.ifa.agtele.genlibrary/model/genlibrary.ecore#//AbstractAttributeParameter">
            <eTypeArguments/>
          </eTypeArguments>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ContainerParameter">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A wrapper element for a GenLibrary ContainerParameter."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="class" lowerBound="1"
            eType="#//structure/target/TargetSection" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The Class that can be used to set the value (the container) for the ContainerParameter (e.g. by means of a ContainerSelector)."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eGenericSuperTypes eClassifier="#//structure/library/LibraryParameter">
          <eTypeArguments eClassifier="ecore:EClass ../../de.tud.et.ifa.agtele.genlibrary/model/genlibrary.ecore#//AbstractContainerParameter">
            <eTypeArguments/>
            <eTypeArguments/>
          </eTypeArguments>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ExternalReferenceParameter">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A wrapper element for a GenLibrary ExternalReferenceParameter."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="reference" lowerBound="1"
            eType="#//structure/target/TargetSectionCrossReference" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The Reference that can be used to set the value(s) for the ExternalReferenceParameter (e.g. by means of a ReferenceTargetSelector)."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eGenericSuperTypes eClassifier="#//structure/library/LibraryParameter">
          <eTypeArguments eClassifier="ecore:EClass ../../de.tud.et.ifa.agtele.genlibrary/model/genlibrary.ecore#//AbstractExternalReferenceParameter">
            <eTypeArguments/>
            <eTypeArguments/>
          </eTypeArguments>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ResourceParameter" eSuperTypes="#//NamedElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A wrapper element for a GenLibrary ResourceParameter."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="attribute" lowerBound="1"
            eType="#//structure/target/VirtualTargetSectionAttribute" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The Attribute that can be used to set the value for the ResourceParameter (either by specifying a fixed value or by means of an AttributeMapping)."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="originalParameter"
            lowerBound="1" eType="ecore:EClass ../../de.tud.et.ifa.agtele.genlibrary/model/genlibrary.ecore#//ResourceParameter">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The GenLibrary parameter that this wraps."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="LibraryEntry">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This represents an element structure to be created in a target model based on a GenLibrary LibraryEntry.&#xD;&#xA;&lt;br />&#xD;&#xA;Instances of this class act as wrapper for GenLibrary entries. This wrapper-based approach allows us to (1) instantiate LibraryEntries during the course of a transformation while (2) relying on the existing mechanisms for MappingHints."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="parameters" lowerBound="1"
            upperBound="-1" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The list of LibraryParameters that need to be specified by the user for a successful instantiation of the LibraryEntry."/>
          </eAnnotations>
          <eGenericType eClassifier="#//structure/library/LibraryParameter">
            <eTypeArguments/>
          </eGenericType>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="libraryFile" lowerBound="1"
            eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The file containing the GenLibrary LibraryEntry that this wraps."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="originalLibraryEntry"
            lowerBound="1" eType="ecore:EClass ../../de.tud.et.ifa.agtele.genlibrary/model/genlibrary.ecore#//LibraryEntry">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The GenLibrary LibraryEntry that this wraps."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="classpath" lowerBound="1"
            eType="#//structure/target/VirtualTargetSectionAttribute" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The classpath identifying the GenLibrary LibraryEntry that this wraps.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;Note: This can be overridden by an AttributeMapping during a transformation. That way, more specific LibraryEntries may be instantiated without having to create an own wrapper for each specific GenLibrary LibraryEntry."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="id" lowerBound="1"
            eType="#//structure/target/VirtualTargetSectionAttribute" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This can be used to specify an optional unique id for the entry to be instantiated. The id will be passed to the GenLibrary instantiation mechanism."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="resourceParameters"
            upperBound="-1" eType="#//structure/library/ResourceParameter" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The list of ResourceParameters that need to be specified by the user for a successful instantiation of the LibraryEntry."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
    </eSubpackages>
  </eSubpackages>
  <eSubpackages name="condition" nsURI="http://mfreund.de/pamtram/condition" nsPrefix="condition">
    <eAnnotations source="http://www.eclipse.org/OCL/Import">
      <details key="ecore" value="http://www.eclipse.org/emf/2002/Ecore"/>
      <details key="genlib" value="http://www.et.tu-dresden.de/ifa/agtele/genlib"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="This package contains all elements related to the description of Conditions. These can e.g. be used to restrict the applicability of a Mapping."/>
    </eAnnotations>
    <eClassifiers xsi:type="ecore:EClass" name="ComplexCondition" abstract="true"
        eSuperTypes="#//NamedElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The super type for all specific Condition types."/>
      </eAnnotations>
      <eOperations name="isLocalCondition" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eOperations name="isMappingCondition" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="return getRootCondition().eContainer() instanceof Mapping;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="isConditionModelCondition" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="return getRootCondition().eContainer() instanceof ConditionModel;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="getConditionPartsFlat" lowerBound="1" upperBound="-1" eType="#//condition/ComplexCondition"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="VariadicCondition" abstract="true"
        eSuperTypes="#//condition/ComplexCondition">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="constraints" value="minimalNumberOfArgs"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A Condition that is composed of multiple sub-conditions.&#xD;&#xA;&lt;br />&#xD;&#xA;The sub-conditions can be specified locally (via the 'localCondParts' reference) and/or globally (specified via the 'sharedCondParts' reference)."/>
      </eAnnotations>
      <eOperations name="referencesOnlyValidConditions" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="if(this.sharedCondParts == null || this.sharedCondParts.size() == 0) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;EList&lt;ComplexCondition> conditionRefs = new BasicEList&lt;ComplexCondition>();&#xD;&#xA;conditionRefs.add((ComplexCondition) this.sharedCondParts);&#xD;&#xA;for(ComplexCondition condition : conditionRefs){&#xD;&#xA;&#x9;if(!(condition instanceof ConditionModel)){&#xD;&#xA;&#x9;&#x9;return false;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return true;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="validateMinimalNumberOfArgs" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#xD;&#xA;boolean result = this.getLocalCondParts().size() + this.getSharedCondParts().size() > 1;&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;At least two (local or shared) condition parts need to be specified!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.condition.util.ConditionValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ConditionValidator.VARIADIC_CONDITION__VALIDATE_MINIMAL_NUMBER_OF_ARGS,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.condition.ConditionPackage%>.Literals.VARIADIC_CONDITION }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
        <eParameters name="context">
          <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
            <eTypeArguments/>
            <eTypeArguments/>
          </eGenericType>
        </eParameters>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="localCondParts" upperBound="-1"
          eType="#//condition/ComplexCondition" containment="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The list of locally defined sub-conditions."/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="sharedCondParts" upperBound="-1"
          eType="#//condition/ComplexCondition">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The list of globally specified sub-conditions."/>
        </eAnnotations>
      </eStructuralFeatures>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="And" eSuperTypes="#//condition/VariadicCondition">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A Condition that evaluates to 'true' only if ALL specified sub-conditions evaluate to 'true'.&#xD;&#xA;&lt;br />&#xD;&#xA;The sub-conditions can be specified locally (via the 'localCondParts' reference) and/or globally (specified via the 'sharedCondParts' reference)."/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Or" eSuperTypes="#//condition/VariadicCondition">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A Condition that evaluates to 'true' if AT LEAST ONE of the specified sub-conditions evaluates to 'true'.&#xD;&#xA;&lt;br />&#xD;&#xA;The sub-conditions can be specified locally (via the 'localCondParts' reference) and/or globally (specified via the 'sharedCondParts' reference)."/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UnaryCondition" abstract="true" eSuperTypes="#//condition/ComplexCondition">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="constraints" value="exactlyOneArg"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A Condition that is composed of exactly one sub-condition.&#xD;&#xA;&lt;br />&#xD;&#xA;The sub-condition can be specified locally (via the 'localCondPart' reference) or globally (specified via the 'sharedCondPart' reference)."/>
      </eAnnotations>
      <eOperations name="validateExactlyOneArg" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#xD;&#xA;boolean result = this.getLocalCondPart() != null ^ this.getSharedCondPart() != null;&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;Please specify exactly one (local or shared) condition part!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.condition.util.ConditionValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ConditionValidator.UNARY_CONDITION__VALIDATE_EXACTLY_ONE_ARG,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.condition.ConditionPackage%>.Literals.UNARY_CONDITION }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
        <eParameters name="context">
          <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
            <eTypeArguments/>
            <eTypeArguments/>
          </eGenericType>
        </eParameters>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="localCondPart" eType="#//condition/ComplexCondition"
          containment="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The locally defined sub-condition.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;Note: Only one of 'localCondPart' or 'sharedCondPart' may be set!"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="sharedCondPart" eType="#//condition/ComplexCondition">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The globally specified sub-condition.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;Note: Only one of 'localCondPart' or 'sharedCondPart' may be set!"/>
        </eAnnotations>
      </eStructuralFeatures>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Not" eSuperTypes="#//condition/UnaryCondition">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="constraints" value="referenceOnlyConditionsFromConditionModelOrFromConditionalElements"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A Condition that evaluates to 'true' if the specified sub-condition evaluates to 'false'.&#xD;&#xA;&lt;br />&#xD;&#xA;The sub-condition can be specified locally (via the 'localCondPart' reference) or globally (specified via the 'sharedCondPart' reference)."/>
      </eAnnotations>
      <eOperations name="validateReferenceOnlyConditionsFromConditionModelOrFromConditionalElements"
          eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#xD;&#xA;if(this.sharedCondPart == null) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&lt;%org.eclipse.emf.ecore.EObject%> sharedCondPartContainer = this.sharedCondPart.eContainer();&#xD;&#xA;&#xD;&#xA;boolean result = sharedCondPartContainer instanceof &lt;%pamtram.ConditionModel%> || sharedCondPartContainer instanceof ConditionalElement;&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;Reference only Conditions that are placed inside ConditionModel or where the Container is a ConditionalElement!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.condition.util.ConditionValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ConditionValidator.NOT__VALIDATE_REFERENCE_ONLY_CONDITIONS_FROM_CONDITION_MODEL_OR_FROM_CONDITIONAL_ELEMENTS,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.condition.ConditionPackage%>.Literals.UNARY_CONDITION__SHARED_COND_PART }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
        <eParameters name="context">
          <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
            <eTypeArguments/>
            <eTypeArguments/>
          </eGenericType>
        </eParameters>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Condition" abstract="true" eSuperTypes="#//condition/ComplexCondition">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The super type for all Condition types that are not only simple logical compositions of sub-conditions."/>
      </eAnnotations>
      <eTypeParameters name="TargetType"/>
      <eOperations name="checkCondition" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eParameters name="condition" eType="#//condition/ComplexCondition"/>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"
          defaultValueLiteral="1">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="Together with the defined 'comparator', this specifies how often/for how many of the elements matched for the specified 'target' element this Condition needs to be fulfilled.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;For example, if 'value' is set to '1' and 'comparator is set to 'GE', the condition needs to be fulfilled at least once."/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="comparator" eType="#//condition/ComparatorEnum">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="Together with the defined 'value', this specifies how often/for how many of the elements matched for the specified 'target' element this Condition needs to be fulfilled.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;For example, if 'value' is set to '1' and 'comparator is set to 'GE', the condition needs to be fulfilled at least once."/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="target" lowerBound="1">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The element on which this condition is evaluated.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;Note: As the specified 'target' element may be matched multiple times in a source model, additional restrictions on how often this condition should be met may be specified via the 'value' and 'comparator' attributes."/>
        </eAnnotations>
        <eGenericType eTypeParameter="#//condition/Condition/TargetType"/>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="instanceSelectors" upperBound="-1"
          eType="#//structure/SourceInstanceSelector" containment="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A list of InstanceSelectors that can be used to restrict the application of this condition: &#xD;&#xA;&lt;br />&#xD;&#xA;The specified 'target' element may be matched multiple times in a source model. However, the Condition will only evaluated for those matches that are identified by the specified list of InstanceSelectors."/>
        </eAnnotations>
      </eStructuralFeatures>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EEnum" name="ComparatorEnum">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This specifies how two values shall be compared."/>
      </eAnnotations>
      <eLiterals name="EQ" literal="EQ">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The value to be checked needs to be equal to the reference value."/>
        </eAnnotations>
      </eLiterals>
      <eLiterals name="GT" value="1" literal="GT">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The value to be checked needs to be greater than the reference value."/>
        </eAnnotations>
      </eLiterals>
      <eLiterals name="LT" value="2" literal="LT">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The value to be checked needs to be less than the reference value."/>
        </eAnnotations>
      </eLiterals>
      <eLiterals name="GE" value="3" literal="GE">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The value to be checked needs to be greater than or equal to the reference value."/>
        </eAnnotations>
      </eLiterals>
      <eLiterals name="LE" value="4" literal="LE">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The value to be checked needs to be less than or equal to the reference value."/>
        </eAnnotations>
      </eLiterals>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="AttributeCondition">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This condition can be used to check the value of an Attribute."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="valueConstraints" lowerBound="1"
          upperBound="-1" eType="#//structure/constraint/ValueConstraint" containment="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A list of ValueConstraints that specify a single reference value or a list/range of reference values which the value of the 'target' Attribute must or must not satisfy.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;A certain attribute (value) in a source model will only match against the specified 'target' Attribute if all specified constraints are met."/>
        </eAnnotations>
      </eStructuralFeatures>
      <eGenericSuperTypes eClassifier="#//condition/Condition">
        <eTypeArguments eClassifier="#//structure/source/ActualSourceSectionAttribute"/>
      </eGenericSuperTypes>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="CardinalityCondition">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This condition can be used to check the cardinality of a Class (how often the class is present in the matched source model excerpt)."/>
      </eAnnotations>
      <eGenericSuperTypes eClassifier="#//condition/Condition">
        <eTypeArguments eClassifier="#//structure/source/SourceSectionClass"/>
      </eGenericSuperTypes>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ApplicationDependency">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A condition that allows to check whether another 'ConditionalElement' was applied/executed a certain number of times.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;This can e.g. be used to create dependencies between mappings like &quot;Only execute this mapping, if another mapping was applied for a certain part of a source model&quot;.&#xD;&#xA;"/>
      </eAnnotations>
      <eGenericSuperTypes eClassifier="#//condition/Condition">
        <eTypeArguments eClassifier="#//ConditionalElement"/>
      </eGenericSuperTypes>
    </eClassifiers>
  </eSubpackages>
  <eSubpackages name="mapping" nsURI="http://mfreund.de/pamtram/mapping" nsPrefix="mapping">
    <eAnnotations source="http://www.eclipse.org/OCL/Import">
      <details key="ecore" value="http://www.eclipse.org/emf/2002/Ecore"/>
      <details key="genlib" value="http://www.et.tu-dresden.de/ifa/agtele/genlib"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="This package contains all elements related to the description of Mappings between a SourceSection (representing its left-hand side) and one or multiple TargetSections (representing its right-hand side).&#xD;&#xA;&lt;br />&#xD;&#xA;The elements directly contained in this package can be used to create 'basic' mappings which only link Source- and TargetSections. Elements that can be used to realize 'extended' mappings which contain additional information for the transformation algorithms (aka MappingHints) are contained in the 'extended' sub-package."/>
    </eAnnotations>
    <eClassifiers xsi:type="ecore:EClass" name="MappingType" abstract="true" eSuperTypes="#//NamedElement #//DeactivatableElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An abstract super type for elements describing some kind of mapping. Currently, there is only one concrete sub-element (Mapping)."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="sourceSection" lowerBound="1"
          eType="#//structure/source/SourceSection">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The SourceSection that this Mapping is based on.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;This Mapping will be executed/applied if the specified SourceSection is matched in the source model. If the SourceSection is matched multiple times, this Mapping will also be executed multiple times."/>
        </eAnnotations>
      </eStructuralFeatures>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Mapping" eSuperTypes="#//mapping/MappingType #//ConditionalElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="constraints" value="containsHintGroups containsDeactivatedHintGroups"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A Mapping between a SourceSection and one or multiple TargetSections.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;This Mapping will be executed/applied if the specified SourceSection is matched in the source model. If the SourceSection is matched multiple times, this Mapping will also be executed multiple times.&#xD;&#xA;Each execution of the Mapping will result in the instantiation of each specified TargetSection.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;Note: Each TargetSection to be instantiated is specified via its own MappingHintGroup that can be created as child of the Mapping."/>
      </eAnnotations>
      <eOperations name="getActiveMappingHintGroups" upperBound="-1" eType="#//mapping/MappingHintGroupType">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="Object[] hintGroups = getMappingHintGroups().stream().filter(h -> !(h instanceof InstantiableMappingHintGroup) ||  !((InstantiableMappingHintGroup) h).isDeactivated()).toArray();&#xD;&#xA;return new &lt;%org.eclipse.emf.common.util.BasicEList%>.UnmodifiableEList&lt;>(hintGroups.length, hintGroups);"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="getActiveImportedMappingHintGroups" upperBound="-1" eType="#//mapping/MappingHintGroupImporter">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="Object[] importedHintGroups = getImportedMappingHintGroups().stream().filter(h -> !h.isDeactivated()).toArray();&#xD;&#xA;return new &lt;%org.eclipse.emf.common.util.BasicEList%>.UnmodifiableEList&lt;>(importedHintGroups.length, importedHintGroups);"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="validateContainsHintGroups" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#xD;&#xA;boolean result = !this.getMappingHintGroups().isEmpty();&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;The mapping does not contain any hint groups!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.WARNING,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.mapping.util.MappingValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;MappingValidator.MAPPING__VALIDATE_CONTAINS_HINT_GROUPS,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.mapping.MappingPackage%>.Literals.MAPPING }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
        <eParameters name="context">
          <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
            <eTypeArguments/>
            <eTypeArguments/>
          </eGenericType>
        </eParameters>
      </eOperations>
      <eOperations name="validateContainsDeactivatedHintGroups" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#xD;&#xA;boolean result = this.isDeactivated() ? this.getMappingHintGroups().size() == this.getActiveMappingHintGroups().size() &amp;&amp; this.getImportedMappingHintGroups().size() == this.getActiveImportedMappingHintGroups().size() : true;&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;The mapping contains deactivated hint groups that will not be used in a transformation!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.WARNING,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.mapping.util.MappingValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;MappingValidator.MAPPING__VALIDATE_CONTAINS_DEACTIVATED_HINT_GROUPS,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.mapping.MappingPackage%>.Literals.MAPPING }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
        <eParameters name="context">
          <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
            <eTypeArguments/>
            <eTypeArguments/>
          </eGenericType>
        </eParameters>
      </eOperations>
      <eOperations name="validateSourceSectionIsActive" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#xD;&#xA;boolean result = this.getSourceSection() == null || !this.getSourceSection().isDeactivated();&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;The mapping is based on a deactivated SourceSection and will not be used in a transformation!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.WARNING,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.mapping.util.MappingValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;MappingValidator.MAPPING__VALIDATE_SOURCE_SECTION_IS_ACTIVE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.mapping.MappingPackage%>.Literals.MAPPING }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
        <eParameters name="context">
          <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
            <eTypeArguments/>
            <eTypeArguments/>
          </eGenericType>
        </eParameters>
      </eOperations>
      <eOperations name="validateNoConditionForAbstractMapping" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="boolean result = !this.isAbstract() || this.getLocalCondition() == null &amp;&amp; this.getSharedCondition() == null;&#xD;&#xA;&#xD;&#x9;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#x9;&#x9;String errorMessage = &quot;Conditions are not supported for abstract Mappings! Consider moving the condition to the contained MappingHintGroup(s).&quot;;&#xD;&#xA;&#xD;&#x9;&#x9;diagnostics.add(new BasicDiagnostic(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR, &lt;%pamtram.mapping.util.MappingValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;%pamtram.mapping.util.MappingValidator%>.MAPPING__VALIDATE_NO_CONDITION_FOR_ABSTRACT_MAPPING, errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new Object[] { this,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;this.getLocalCondition() != null&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;? &lt;%pamtram.PamtramPackage%>.Literals.CONDITIONAL_ELEMENT__LOCAL_CONDITION&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;: &lt;%pamtram.PamtramPackage%>.Literals.CONDITIONAL_ELEMENT__SHARED_CONDITION }));&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#x9;return result;"/>
        </eAnnotations>
        <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
        <eParameters name="context">
          <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
            <eTypeArguments/>
            <eTypeArguments/>
          </eGenericType>
        </eParameters>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="mappingHintGroups" upperBound="-1"
          eType="#//mapping/MappingHintGroupType" containment="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The list of MappingHintGroups specifying the TargetSections to be instantiated when the Mapping is executed."/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="importedMappingHintGroups"
          upperBound="-1" eType="#//mapping/MappingHintGroupImporter" containment="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The list of MappingHintGroupImporters specifying imported MappingHintGroups whose TargetSections shall be instantiated when the Mapping is executed."/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="abstract" lowerBound="1"
          eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
          defaultValueLiteral="false">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="If a Mapping is marked as 'abstract', it will not be executed directly. However, the MappingHintGroups contained in other Mappings may extend the MappingHintGroups defined in an abstract Mapping.&#xD;&#xA;&lt;br />&#xD;&#xA;Consequently, abstract Mappings can be used to define some kind of template mappings that can be reqused by other (non-abstract) Mappings."/>
        </eAnnotations>
      </eStructuralFeatures>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="MappingHintGroupType" abstract="true"
        eSuperTypes="#//NamedElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An abstract super-type for elements describing some kind of MappingHintGroup that will lead to the instantiation of a specified TargetSection."/>
      </eAnnotations>
      <eOperations name="validateExtendsOnlyValidHintGroups" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#xD;&#xA;&lt;%pamtram.structure.source.SourceSection%> sourceSection = ((&lt;%pamtram.mapping.Mapping%>) this.eContainer()).getSourceSection();&#xD;&#xA;&#xD;&#xA;if (sourceSection == null) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&lt;%java.util.List%>&lt;SourceSection> validExtends = new &lt;%java.util.ArrayList%>&lt;>();&#xD;&#xA;validExtends.add(sourceSection);&#xD;&#xA;validExtends.addAll(sourceSection.getAllExtend());&#xD;&#xA;&#xD;&#xA;&lt;%java.util.Optional%>&lt;MappingHintGroupType> result = this.getExtend().stream()&#xD;&#xA;&#x9;&#x9;.filter(hg -> !validExtends.contains(((Mapping) hg.eContainer()).getSourceSection())).findFirst();&#xD;&#xA;&#xD;&#xA;if (result.isPresent() &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;The MappingHintGroup '&quot; + result.get().getName() + &quot;' may not be extended by this MappingHintGroup because the referenced SourceSections are not compatible!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.mapping.util.MappingValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;MappingValidator.MAPPING_HINT_GROUP_TYPE__VALIDATE_EXTENDS_ONLY_VALID_HINT_GROUPS,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.mapping.MappingPackage%>.Literals.MAPPING_HINT_GROUP_TYPE__EXTEND }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return !result.isPresent();"/>
        </eAnnotations>
        <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
        <eParameters name="context">
          <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
            <eTypeArguments/>
            <eTypeArguments/>
          </eGenericType>
        </eParameters>
      </eOperations>
      <eOperations name="getActiveMappingHints" upperBound="-1" eType="#//mapping/extended/MappingHint">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="Object[] hints = getMappingHints().stream().filter(h -> !h.isDeactivated()).toArray();&#xD;&#xA;return new &lt;%org.eclipse.emf.common.util.BasicEList%>.UnmodifiableEList&lt;>(hints.length, hints);"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="validateDoNotUseLibraryElementsWithoutLibraryNature" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="if (!this.getTargetSection().isLibraryEntry()) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// Check if the 'PAMTraM Library Nature' is set for the project&#xD;&#xA;//&#xD;&#xA;&lt;%org.eclipse.core.resources.IFile%> file = &lt;%de.tud.et.ifa.agtele.resources.ResourceHelper%>.getFileForResource(this.eResource());&#xD;&#xA;if (file == null || file.getProject() == null) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;String errorMessage = &quot;The 'PAMTraM Library Nature' is not activated for this project. Thus, LibraryEntries may not be used as TargetSections! You can activate the nature in the project properties...&quot;;&#xD;&#xA;&#xD;&#xA;try {&#xD;&#xA;&#x9;if (!Boolean.parseBoolean(&lt;%de.mfreund.pamtram.properties.PropertySupplier%>.getResourceProperty(&lt;%de.mfreund.pamtram.properties.PropertySupplier%>.PROP_HAS_LIBRARY_NATURE,&#xD;&#xA;&#x9;&#x9;&#x9;file.getProject()))) {&#xD;&#xA;&#x9;&#x9;if (diagnostics != null) {&#xD;&#xA;&#x9;&#x9;&#x9;diagnostics.add(new BasicDiagnostic(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR, &lt;%pamtram.mapping.util.MappingValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;%pamtram.mapping.util.MappingValidator%>.MAPPING_HINT_GROUP_TYPE__VALIDATE_DO_NOT_USE_LIBRARY_ELEMENTS_WITHOUT_LIBRARY_NATURE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.mapping.MappingPackage%>.Literals.MAPPING_HINT_GROUP_TYPE__TARGET_SECTION }));&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;return false;&#xD;&#xA;&#x9;}&#xD;&#xA;} catch (&lt;%org.eclipse.core.runtime.CoreException%> e) {&#xD;&#xA;&#x9;e.printStackTrace();&#xD;&#xA;}&#xD;&#xA;return true;"/>
        </eAnnotations>
        <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
        <eParameters name="context">
          <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
            <eTypeArguments/>
            <eTypeArguments/>
          </eGenericType>
        </eParameters>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="targetSection" lowerBound="1"
          eType="#//structure/target/TargetSection">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The TargetSection to be instantiated based on this MappingHintGroup."/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="mappingHints" upperBound="-1"
          eType="#//mapping/extended/MappingHint" containment="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="An optional list of MappingHints refining this Mapping resp. MappingHintGroup.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;MappingHints can be used to assist the transformation algorithm in the instantiation of TargetSections. For example, AttributeMappings can be added that specify how to set the values of the Attributes defined as part of the TargetSection."/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="extend" upperBound="-1"
          eType="#//mapping/MappingHintGroupType">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="One or multiple MappingHintGroups (that are part of an 'abstract' Mapping) which shall be extended by this MappingHintGroup.&#xD;&#xA;&lt;br />&#xD;&#xA;All MappingHints that are defined in extended MappingHintGroups will be added to the MappingHints defined locally in this Group.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;Note: If an extended Group defines a MappingHint that is 'overwritten' by a MappingHint defined locally, it will not be added."/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="attributeMappings" upperBound="-1"
          eType="#//mapping/extended/AttributeMapping" changeable="false" volatile="true"
          transient="true" derived="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="get" value="&lt;%java.util.List%>&lt;&lt;%pamtram.mapping.extended.AttributeMapping%>> attributeMappings = this.getMappingHints().stream()&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;.filter(hint -> hint instanceof AttributeMapping).map(hint -> (AttributeMapping) hint)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;.collect(&lt;%java.util.stream.Collectors%>.toList());&#xD;&#xA;return new &lt;%org.eclipse.emf.ecore.util.EcoreEList%>.UnmodifiableEList&lt;>(this, &lt;%pamtram.mapping.MappingPackage%>.Literals.MAPPING_HINT_GROUP_TYPE__ATTRIBUTE_MAPPINGS,&#xD;&#xA;&#x9;&#x9;attributeMappings.size(),attributeMappings.toArray());&#xD;&#xA;"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The subset of the 'mappingHints' that are of type AttributeMapping."/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="cardinalityMappings"
          upperBound="-1" eType="#//mapping/extended/CardinalityMapping" changeable="false"
          volatile="true" transient="true" derived="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="get" value="&lt;%java.util.List%>&lt;&lt;%pamtram.mapping.extended.CardinalityMapping%>> cardinalityMappings = this.getMappingHints().stream()&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;.filter(hint -> hint instanceof CardinalityMapping).map(hint -> (CardinalityMapping) hint)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;.collect(&lt;%java.util.stream.Collectors%>.toList());&#xD;&#xA;return new &lt;%org.eclipse.emf.ecore.util.EcoreEList%>.UnmodifiableEList&lt;>(this, &lt;%pamtram.mapping.MappingPackage%>.Literals.MAPPING_HINT_GROUP_TYPE__CARDINALITY_MAPPINGS,&#xD;&#xA;&#x9;&#x9;cardinalityMappings.size(),cardinalityMappings.toArray());&#xD;&#xA;"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The subset of the 'mappingHints' that are of type CardinalityMapping."/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="referenceTargetSelectors"
          upperBound="-1" eType="#//mapping/extended/ReferenceTargetSelector" changeable="false"
          volatile="true" transient="true" derived="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="get" value="&lt;%java.util.List%>&lt;&lt;%pamtram.mapping.extended.ReferenceTargetSelector%>> referenceTargetSelectors = this.getMappingHints().stream()&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;.filter(hint -> hint instanceof ReferenceTargetSelector).map(hint -> (ReferenceTargetSelector) hint)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;.collect(&lt;%java.util.stream.Collectors%>.toList());&#xD;&#xA;return new &lt;%org.eclipse.emf.ecore.util.EcoreEList%>.UnmodifiableEList&lt;>(this, &lt;%pamtram.mapping.MappingPackage%>.Literals.MAPPING_HINT_GROUP_TYPE__REFERENCE_TARGET_SELECTORS,&#xD;&#xA;&#x9;&#x9;referenceTargetSelectors.size(),referenceTargetSelectors.toArray());&#xD;&#xA;"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The subset of the 'mappingHints' that are of type ReferenceTargetSelector."/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="containerSelectors" upperBound="-1"
          eType="#//mapping/extended/ContainerSelector" changeable="false" volatile="true"
          transient="true" derived="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="get" value="&lt;%java.util.List%>&lt;&lt;%pamtram.mapping.extended.ContainerSelector%>> containerSelectors = this.getMappingHints().stream()&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;.filter(hint -> hint instanceof ContainerSelector).map(hint -> (ContainerSelector) hint)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;.collect(&lt;%java.util.stream.Collectors%>.toList());&#xD;&#xA;return new &lt;%org.eclipse.emf.ecore.util.EcoreEList%>.UnmodifiableEList&lt;>(this, &lt;%pamtram.mapping.MappingPackage%>.Literals.MAPPING_HINT_GROUP_TYPE__CONTAINER_SELECTORS,&#xD;&#xA;&#x9;&#x9;containerSelectors.size(),containerSelectors.toArray());&#xD;&#xA;"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The subset of the 'mappingHints' that are of type ContainerSelector."/>
        </eAnnotations>
      </eStructuralFeatures>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="InstantiableMappingHintGroup" abstract="true"
        eSuperTypes="#//NamedElement #//DeactivatableElement #//ConditionalElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An abstract super-type for elements describing some kind of MappingHintGroup that (resp. whose specified TargetSection) can be directly instantiated."/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="MappingHintGroup" eSuperTypes="#//mapping/MappingHintGroupType #//mapping/InstantiableMappingHintGroup">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A MappingHintGroup serves two purposes:&#xD;&#xA;&lt;br />&#xD;&#xA;(1) It specifies a TargetSection that will be instantiated when the Mapping containing this MappingHintGroup is executed.&#xD;&#xA;&lt;br />&#xD;&#xA;(2) It acts as container for a set of MappingHints. MappingHints can be used to assist the transformation algorithm in the instantiation of the specified TargetSection. For example, AttributeMappings can be added that specify how to set the values of the Attributes defined as part of the TargetSection.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;Note: Each execution of the Mapping will result in the instantiation of the specified TargetSection."/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="MappingHintGroupImporter" eSuperTypes="#//NamedElement #//mapping/InstantiableMappingHintGroup">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A MappingHintGroupImporter does not specify its own TargetSection to be instantiated but 'imports' an existing (exported) MappingHintGroup instead.&#xD;&#xA;&lt;br />&#xD;&#xA;Importing thereby means that all values that have been collected for the MappingHints defined in the exported MappingHintGroup are reused during the instantiation.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;Note: There is a difference between (1) 'extending' and (2) 'importing' MappingHintGroups:&#xD;&#xA;&lt;br />&#xD;&#xA;(1) Extending a HintGroup means that all MappingHints defined in the extended HintGroup are added to the Extending HintGroup (before execution of the transformation).&#xD;&#xA;(2) Importing a HintGroup means that the VALUES of all MappingHints defined in the exported HintGroup are used when instantiating the HintGroupImporter (during the execution of the transformation).&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;In most cases, 'extending' HintGroups will be the desired behavior. Importing HintGroups is only necessary for a few special use cases."/>
      </eAnnotations>
      <eOperations name="getActiveMappingHints" upperBound="-1" eType="#//mapping/extended/MappingHintType">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="Object[] hints = getMappingHints().stream().filter(h -> !(h instanceof DeactivatableElement) || !((&lt;%pamtram.DeactivatableElement%>) h).isDeactivated()).toArray();&#xD;&#xA;return new &lt;%org.eclipse.emf.common.util.BasicEList%>.UnmodifiableEList&lt;>(hints.length, hints);"/>
        </eAnnotations>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="hintGroup" lowerBound="1"
          eType="#//mapping/ExportedMappingHintGroup">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The existing (exported) MappingHintGroup that is imported by this HintGroupImporter."/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="container" eType="#//structure/target/TargetSectionClass"
          unsettable="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="An optional TargetSectionClass that (resp. instances of that) will be used as container for the instances created based on the TargetSection denoted by the imported MappingHintGroup."/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="mappingHints" upperBound="-1"
          eType="#//mapping/extended/MappingHintType" unsettable="true" containment="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="An optional list of MappingHints refining the imported MappingHintGroup. The specified MappingHints will be added to those already defined by the imported MappingHintGroup."/>
        </eAnnotations>
      </eStructuralFeatures>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ExportedMappingHintGroup" eSuperTypes="#//mapping/MappingHintGroupType">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="If an ExportedMappingHintGroup (resp. the containing Mapping) is executed, the specified TargetSection is not directly instantiated although values for specified MappingHints are collected.&#xD;&#xA;Instead ExportedMappingHintGroups may be imported by means of a MappingHintGroupImporter that is part of another Mapping.&#xD;&#xA;&lt;br />&#xD;&#xA;Importing thereby means that all values that have been collected for the MappingHints defined in the exported MappingHintGroup are reused during the instantiation of the MappingHintGroupImporter.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;Note: There is a difference between (1) 'extending' and (2) 'importing' MappingHintGroups:&#xD;&#xA;&lt;br />&#xD;&#xA;(1) Extending a HintGroup means that all MappingHints defined in the extended HintGroup are added to the Extending HintGroup (before execution of the transformation).&#xD;&#xA;(2) Importing a HintGroup means that the VALUES of all MappingHints defined in the exported HintGroup are used when instantiating the HintGroupImporter (during the execution of the transformation).&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;In most cases, 'extending' HintGroups will be the desired behavior. Importing HintGroups is only necessary for a few special use cases."/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="GlobalAttribute" eSuperTypes="#//NamedElement #//ModifiableElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="constraints" value="sourceAttributeHasUpperBoundOne"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="GlobalAttributes can be used to store the value of a SourceSectionAttribute in a reusable way.&#xD;&#xA;&lt;br />&#xD;&#xA;The value of a GlobalAttribute can thereby be reused in various calculations (e.g. in AttributeMappings) by means of a GlobalAttributeImporter. In contrast to the 'local' usage of an Attribute value in a calculation, GlobalAttributes can be reused as part of any Mapping - the Attribute does not need to be part of the SourceSection associated with the Mapping."/>
      </eAnnotations>
      <eOperations name="validateSourceAttributeHasUpperBoundOne" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#xD;&#xA;boolean result = this.getSource() == null || this.getSource().getAttribute() == null ? true : this.getSource().getAttribute().getUpperBound() == 1;&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;Global attributes may only be defined for attributes that have an upper bound of 1!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.mapping.util.MappingValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;MappingValidator.GLOBAL_ATTRIBUTE__VALIDATE_SOURCE_ATTRIBUTE_HAS_UPPER_BOUND_ONE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.mapping.MappingPackage%>.Literals.GLOBAL_ATTRIBUTE__SOURCE }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
        <eParameters name="context">
          <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
            <eTypeArguments/>
            <eTypeArguments/>
          </eGenericType>
        </eParameters>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="source" lowerBound="1"
          eType="#//structure/source/ActualSourceSectionAttribute">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The SourceSectionAttribute based on which the value of this GlobalAttribute is determined."/>
        </eAnnotations>
      </eStructuralFeatures>
    </eClassifiers>
    <eSubpackages name="modifier" nsURI="http://mfreund.de/pamtram/mapping/modifier"
        nsPrefix="modifier">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This package contains elements related to the modification of values (e.g. determined values for a TargetSection attribute). "/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EClass" name="ValueModifierSet" eSuperTypes="#//NamedElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A reusable set of ValueModifiers that can be attached to a ModifiableElement in order to modify its 'value'.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;For example, when attached this to an AttributeMapping, the value resulting from evaluating the AttributeMapping is modified by applying the specified ValueModifers before setting the value of the associated TargetSectionAttribute."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="modifiers" upperBound="-1"
            eType="#//mapping/modifier/ValueModifier" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The set of ValueModifiers that will be used to modify the 'value'."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ValueModifier" abstract="true" interface="true"
          eSuperTypes="#//NamedElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The common super-type of all elements that will modify a 'value'."/>
        </eAnnotations>
        <eOperations name="modifyValue" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
          <eParameters name="value" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="UniqueNumberAppender" eSuperTypes="#//mapping/modifier/ValueModifier">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This ValueModifier will add a unique number to the 'value'.&#xD;&#xA;&lt;br />&#xD;&#xA;It can be used to ensure unique values e.g. when setting values of a TargetSectionAttribute."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="NumericModifier" abstract="true"
          eSuperTypes="#//mapping/modifier/ValueModifier">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The common super-type of all elements that will modify a numeric 'value'."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ExpressionModifier" eSuperTypes="#//mapping/modifier/NumericModifier #//ExpressionElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This ValueModifier will modify the (numeric) 'value' by applying the given 'expression'.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;Note: The 'value' to be modfied can be referenced in the 'expression' via the variable 'x'. For example, a valid expression to duplicate the given value would be &quot;2*x&quot;."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="StringModifier" abstract="true"
          eSuperTypes="#//mapping/modifier/ValueModifier">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The common super-type of all elements that will modify a String-based 'value'."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="SubstringReplacer" eSuperTypes="#//mapping/modifier/StringModifier">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This ValueModifier will modify the (String-based) 'value' by replacing the sub-string identified by the given 'regex' by the given 'replacement'."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="regex" lowerBound="1"
            eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The regular expression identifying the string to be replaced."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="replacement" lowerBound="1"
            eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The replacement."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="StringAppender" eSuperTypes="#//mapping/modifier/StringModifier">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This ValueModifier will modify the (String-based) 'value' by appending the given 'string'."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="string" lowerBound="1"
            eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"
            defaultValueLiteral="">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The String to be appended."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="StringPrepender" eSuperTypes="#//mapping/modifier/StringModifier">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This ValueModifier will modify the (String-based) 'value' by prepending the given 'string'."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="string" lowerBound="1"
            eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"
            defaultValueLiteral="">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The String to be prepended."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ToLowerCaseConverter" eSuperTypes="#//mapping/modifier/StringModifier">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This ValueModifier will modify the (String-based) 'value' by converting the sub-string identified by the given 'regex' to lower case."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="regex" lowerBound="1"
            eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The regular expression identifying the string to be converted."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ToUpperCaseConverter" eSuperTypes="#//mapping/modifier/StringModifier">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This ValueModifier will modify the (String-based) 'value' by converting the sub-string identified by the given 'regex' to upper case."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="regex" lowerBound="1"
            eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The regular expression identifying the string to be converted."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
    </eSubpackages>
    <eSubpackages name="extended" nsURI="http://mfreund.de/pamtram/mapping/extended"
        nsPrefix="extended">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This package contains all elements related to the description of MappingHints (i.e. related to the description of 'extended' mappings)."/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EClass" name="MappingHintBaseType" abstract="true"
          eSuperTypes="#//NamedElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="An abstract super-type for all MappingHints."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="MappingHintType" abstract="true"
          eSuperTypes="#//mapping/extended/MappingHintBaseType">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="An abstract super-type for all MappingHints."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="MappingHint" abstract="true" eSuperTypes="#//mapping/extended/MappingHintType #//ConditionalElement #//DeactivatableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="An abstract super-type for all MappingHints that can be used in MappingHintGroups."/>
        </eAnnotations>
        <eOperations name="validateOverwritesValidMappingHint" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="if (this.overwrite == null) {&#xD;&#xA;&#x9;&#x9;&#x9;return true;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#x9;boolean ret = true;&#xD;&#xA;&#x9;&#x9;String message = &quot;&quot;;&#xD;&#xA;&#xD;&#x9;if (this.eClass() != this.overwrite.eClass()) {&#xD;&#xA;&#x9;&#x9;&#x9;ret = false;&#xD;&#xA;&#x9;&#x9;&#x9;message = &quot;MappingHints must only overwrite MappingHints of the same type!&quot;;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#x9;if (((&lt;%pamtram.mapping.MappingHintGroupType%>) this.eContainer()).getExtend().isEmpty()&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;|| ((&lt;%pamtram.mapping.MappingHintGroupType%>) this.eContainer()).getExtend().stream()&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.noneMatch(hg -> hg.getMappingHints().contains(this.overwrite))) {&#xD;&#xA;&#x9;&#x9;&#x9;ret = false;&#xD;&#xA;&#x9;&#x9;&#x9;message = &quot;The overwritten &lt;%pamtram.mapping.extended.MappingHint%> is not part of a MappingHintGroup that is extended by the HintGroup containing this MappingHint!&quot;;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#x9;if (this instanceof &lt;%pamtram.mapping.extended.AttributeMapping%>&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&amp;&amp; ((&lt;%pamtram.mapping.extended.AttributeMapping%>) this).getTarget() != ((&lt;%pamtram.mapping.extended.AttributeMapping%>) this.overwrite).getTarget()) {&#xD;&#xA;&#x9;&#x9;&#x9;ret = false;&#xD;&#xA;&#x9;&#x9;&#x9;message = &quot;An &lt;%pamtram.mapping.extended.AttributeMapping%> must only overwrite another &lt;%pamtram.mapping.extended.AttributeMapping%> pointing to the same TargetSectionAttribute!&quot;;&#xD;&#xA;&#x9;&#x9;} else if (this instanceof &lt;%pamtram.mapping.extended.CardinalityMapping%>&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&amp;&amp; ((&lt;%pamtram.mapping.extended.CardinalityMapping%>) this).getTarget() != ((&lt;%pamtram.mapping.extended.CardinalityMapping%>) this.overwrite).getTarget()) {&#xD;&#xA;&#x9;&#x9;&#x9;ret = false;&#xD;&#xA;&#x9;&#x9;&#x9;message = &quot;A &lt;%pamtram.mapping.extended.CardinalityMapping%> must only overwrite another &lt;%pamtram.mapping.extended.CardinalityMapping%> pointing to the same TargetSectionClass!&quot;;&#xD;&#xA;&#x9;&#x9;} else if (this instanceof &lt;%pamtram.mapping.extended.ReferenceTargetSelector%> &amp;&amp; ((&lt;%pamtram.mapping.extended.ReferenceTargetSelector%>) this)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;.getAffectedReference() != ((&lt;%pamtram.mapping.extended.ReferenceTargetSelector%>) this.overwrite).getAffectedReference()) {&#xD;&#xA;&#x9;&#x9;&#x9;ret = false;&#xD;&#xA;&#x9;&#x9;&#x9;message = &quot;A &lt;%pamtram.mapping.extended.ReferenceTargetSelector%> must only overwrite another &lt;%pamtram.mapping.extended.ReferenceTargetSelector%> pointing to the same TargetSectionReference!&quot;;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#x9;if (!ret &amp;&amp; diagnostics != null) {&#xD;&#xA;&#x9;&#x9;&#x9;diagnostics.add(new BasicDiagnostic(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR, &lt;%pamtram.mapping.extended.util.ExtendedValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;%pamtram.mapping.extended.util.ExtendedValidator%>.MAPPING_HINT__VALIDATE_OVERWRITES_VALID_MAPPING_HINT, message,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.mapping.extended.ExtendedPackage%>.Literals.MAPPING_HINT__OVERWRITE }));&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#x9;return ret;"/>
          </eAnnotations>
          <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
          <eParameters name="context">
            <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
              <eTypeArguments/>
              <eTypeArguments/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="validateConsiderOverwritingHint" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="if (!(this.eContainer instanceof &lt;%pamtram.mapping.MappingHintGroupType%>) || this.overwrite != null) {&#xD;&#xA;&#x9;&#x9;&#x9;return true;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#x9;List&lt;&lt;%pamtram.mapping.extended.MappingHint%>> hintsOfExtendedHintGroups = ((&lt;%pamtram.mapping.MappingHintGroupType%>) this.eContainer()).getExtend().stream()&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;.flatMap(hg -> hg.getMappingHints().stream()).collect(&lt;%java.util.stream.Collectors%>.toList());&#xD;&#xA;&#xD;&#x9;if (hintsOfExtendedHintGroups.isEmpty()) {&#xD;&#xA;&#x9;&#x9;&#x9;return true;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#x9;Optional&lt;&lt;%pamtram.mapping.extended.MappingHint%>> hintToConsider = &lt;%java.util.Optional%>.empty();&#xD;&#xA;&#xD;&#x9;if (this instanceof &lt;%pamtram.mapping.extended.AttributeMapping%> &amp;&amp; ((&lt;%pamtram.mapping.extended.AttributeMapping%>) this).getTarget() != null) {&#xD;&#xA;&#xD;&#x9;&#x9;hintToConsider = hintsOfExtendedHintGroups.stream().filter(h -> h instanceof &lt;%pamtram.mapping.extended.AttributeMapping%>)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.filter(h -> ((&lt;%pamtram.mapping.extended.AttributeMapping%>) this).getTarget().equals(((&lt;%pamtram.mapping.extended.AttributeMapping%>) h).getTarget()))&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.findAny();&#xD;&#xA;&#xD;&#x9;} else if (this instanceof &lt;%pamtram.mapping.extended.CardinalityMapping%> &amp;&amp; ((&lt;%pamtram.mapping.extended.CardinalityMapping%>) this).getTarget() != null) {&#xD;&#xA;&#xD;&#x9;&#x9;hintToConsider = hintsOfExtendedHintGroups.stream().filter(h -> h instanceof &lt;%pamtram.mapping.extended.CardinalityMapping%>)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.filter(h -> ((&lt;%pamtram.mapping.extended.CardinalityMapping%>) this).getTarget().equals(((&lt;%pamtram.mapping.extended.CardinalityMapping%>) h).getTarget()))&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.findAny();&#xD;&#xA;&#xD;&#x9;} else if (this instanceof &lt;%pamtram.mapping.extended.ReferenceTargetSelector%>&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&amp;&amp; ((&lt;%pamtram.mapping.extended.ReferenceTargetSelector%>) this).getAffectedReference() != null) {&#xD;&#xA;&#xD;&#x9;&#x9;hintToConsider = hintsOfExtendedHintGroups.stream().filter(h -> h instanceof &lt;%pamtram.mapping.extended.ReferenceTargetSelector%>)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.filter(h -> ((&lt;%pamtram.mapping.extended.ReferenceTargetSelector%>) this).getAffectedReference()&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.equals(((&lt;%pamtram.mapping.extended.ReferenceTargetSelector%>) h).getAffectedReference()))&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.findAny();&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#x9;if (!hintToConsider.isPresent()) {&#xD;&#xA;&#x9;&#x9;&#x9;return true;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#x9;String message = &quot;The hint '&quot; + hintToConsider.get().getName() + &quot;' of the extended MappingHintGroup &quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;+ (hintToConsider.get().eContainer() instanceof &lt;%pamtram.mapping.MappingHintGroupType%>&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;? &quot;'&quot; + ((&lt;%pamtram.mapping.MappingHintGroupType%>) hintToConsider.get().eContainer()).getName() + &quot;' &quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;: &quot;&quot;)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;+ &quot;affects the same target element. Consider overwriting this hint instead of providing additional hint values...&quot;;&#xD;&#xA;&#xD;&#x9;if (diagnostics != null) {&#xD;&#xA;&#x9;&#x9;&#x9;diagnostics.add(new BasicDiagnostic(&lt;%org.eclipse.emf.common.util.Diagnostic%>.WARNING, &lt;%pamtram.mapping.extended.util.ExtendedValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;%pamtram.mapping.extended.util.ExtendedValidator%>.MAPPING_HINT__VALIDATE_CONSIDER_OVERWRITING_HINT, message,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.mapping.extended.ExtendedPackage%>.Literals.MAPPING_HINT__OVERWRITE }));&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#x9;return false;"/>
          </eAnnotations>
          <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
          <eParameters name="context">
            <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
              <eTypeArguments/>
              <eTypeArguments/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="overwrite" eType="#//mapping/extended/MappingHint">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A MappingHint from an extended MappingHintGroup that shall not be added to this MappingHintGroup but be overwritten instead."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ExpandableHint" abstract="true"
          interface="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="An abstract super-type for all MappingHints that can be defined in ExportedMappingHintGroups and afterwards refined/expanded in MappingHintGroupImporters."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="HintImporterMappingHint" abstract="true"
          eSuperTypes="#//mapping/extended/MappingHintType">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="An abstract super-type for all MappingHints that can be used in MappingHintGroupImporters."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="MappingHintSourceInterface" abstract="true"
          interface="true" eSuperTypes="#//NamedElement #//ConditionalElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The common superclass of all types that can be used as 'sourceElement' to calculate the value of a MappingHint."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="GlobalAttributeImporter" eSuperTypes="#//NamedElement #//mapping/extended/AttributeMappingSourceInterface #//structure/InstanceSelectorSourceInterface #//structure/constraint/ValueConstraintSourceInterface">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This specifies a source element whose value is based on the value of a GlobalAttribute. GlobalAttributes can thereby be used to store the value of a SourceSectionAttribute in a reusable way.&#xD;&#xA;&lt;br />&#xD;&#xA;The value of a GlobalAttribute can thereby be reused in various calculations (e.g. in AttributeMappings). In contrast to the 'local' usage of an Attribute value in a calculation, GlobalAttributes can be reused as part of any Mapping - the Attribute does not need to be part of the SourceSection associated with the Mapping."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="globalAttribute" lowerBound="1"
            eType="#//mapping/GlobalAttribute">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The GlobalAttribute based on which the value of this element is determined."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="AttributeMapping" eSuperTypes="#//mapping/extended/MappingHint #//ExpressionElement #//ModifiableElement #//mapping/extended/ExpandableHint">
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="targetAttributeMatchesSection"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A MappingHint that tells the transformation algorithm how determine the value of a TargetSectionAttribute in the course of a transformation.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;The value is thereby determined based on the list of specified 'sourceElements' and an optional (mathematical) 'expression'.&#xD;&#xA;&lt;br />&#xD;&#xA;If the expression is not present, the values of all specified source elements are treated as Strings and simply concatenated.&#xD;&#xA;&lt;br />&#xD;&#xA;If an expression is present, this will be used to calculate the value. The expression may thereby reference the (numeric) values of the specified source elements via their name. For example, if a source element named 'x' is specified, a valid expression to double the value of this element would be &quot;2*x&quot;.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;Note: As SourceSectionAttributes may be matched multiple times in a single source model excerpt, an AttributeMapping based on such a source element may result in multiple determined values. If this is the case, the specified 'target' attribute (and if necessary the containing TargetSectionClass) will be instantiated multiple times."/>
        </eAnnotations>
        <eOperations name="getLocalSourceElements" unique="false" upperBound="-1"
            eType="#//mapping/extended/AttributeMappingSourceElement">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#x9;&#x9;EList&lt;AttributeMappingSourceElement> elements= new org.eclipse.emf.common.util.BasicEList&lt;AttributeMappingSourceElement>();&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;for(AttributeMappingSourceInterface i : this.getSourceElements()){&#xD;&#xA;&#x9;&#x9;&#x9;if(i instanceof AttributeMappingSourceElement){&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;elements.add((AttributeMappingSourceElement) i);&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;return elements;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="getExternalSourceElements" unique="false" upperBound="-1"
            eType="#//mapping/extended/AttributeMappingExternalSourceElement">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="EList&lt;AttributeMappingExternalSourceElement> elements= new org.eclipse.emf.common.util.BasicEList&lt;AttributeMappingExternalSourceElement>();&#xD;&#xA;&#xD;&#xA;for(AttributeMappingSourceInterface i : this.getSourceElements()){&#xD;&#xA;&#x9;if(i instanceof AttributeMappingExternalSourceElement){&#xD;&#xA;&#x9;&#x9;elements.add((AttributeMappingExternalSourceElement) i);&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return elements;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="validateTargetAttributeMatchesSection" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xD;&#xA;if(this.getTarget() == null || !(this.eContainer() instanceof &lt;%pamtram.mapping.MappingHintGroupType%>) || ((MappingHintGroupType) this.eContainer()).getTargetSection() == null) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;MappingHintGroupType containingHintGroup = ((MappingHintGroupType) this.eContainer());&#xD;&#xA;&#xD;&#xA;boolean result = this.getTarget().getContainingSection() == containingHintGroup.getTargetSection() || containingHintGroup.getTargetSection().getExtend().contains(this.getTarget().getContainingSection());&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;The target attribute '&quot; + this.getTarget().getName() + &quot;' is not part of the target section referenced by parent hint group &quot; + ((MappingHintGroupType) this.eContainer()).getName() + &quot;!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.mapping.extended.util.ExtendedValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ExtendedValidator.ATTRIBUTE_MAPPING__VALIDATE_TARGET_ATTRIBUTE_MATCHES_SECTION,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.mapping.extended.ExtendedPackage%>.Literals.ATTRIBUTE_MAPPING__TARGET }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
          </eAnnotations>
          <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
          <eParameters name="context">
            <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
              <eTypeArguments/>
              <eTypeArguments/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="target" lowerBound="1"
            eType="#//structure/target/TargetSectionAttribute">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The TargetSectionAttribute whose value is determined by this AttributeMapping."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="sourceElements" lowerBound="1"
            upperBound="-1" eType="#//mapping/extended/AttributeMappingSourceInterface"
            containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The list of 'sourceElements' based on which the value of the 'target' Attribute is determined."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="AttributeMappingSourceInterface"
          abstract="true" interface="true" eSuperTypes="#//mapping/extended/MappingHintSourceInterface">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The common superclass of all types that can be used as 'sourceElement' in an AttributeMapping."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="AttributeMappingSourceElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A concrete type of 'sourceElement' for an AttributeMapping.&#xD;&#xA;&lt;br />&#xD;&#xA;This type is based on the value of a 'local' SourceSectionAttribute.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;Note: See the documentation of 'LocalDynamicSourceElement' for a detailed explanation of the meaning of 'local' source elements."/>
        </eAnnotations>
        <eGenericSuperTypes eClassifier="#//structure/LocalDynamicSourceElement">
          <eTypeArguments eClassifier="#//structure/source/SourceSection"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionClass"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionReference"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionAttribute"/>
        </eGenericSuperTypes>
        <eGenericSuperTypes eClassifier="#//mapping/extended/AttributeMappingSourceInterface"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="AttributeMappingExternalSourceElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A concrete type of 'sourceElement' for an AttributeMapping.&#xD;&#xA;&lt;br />&#xD;&#xA;This type is based on the value of an 'external' SourceSectionAttribute.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;Note: See the documentation of 'ExternalDynamicSourceElement' for a detailed explanation of the meaning of 'external' source elements."/>
        </eAnnotations>
        <eGenericSuperTypes eClassifier="#//structure/ExternalDynamicSourceElement">
          <eTypeArguments eClassifier="#//structure/source/SourceSection"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionClass"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionReference"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionAttribute"/>
        </eGenericSuperTypes>
        <eGenericSuperTypes eClassifier="#//mapping/extended/AttributeMappingSourceInterface"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="AttributeMappingGlobalSourceElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A concrete type of 'sourceElement' for an AttributeMapping.&#xD;&#xA;&lt;br />&#xD;&#xA;This type is based on the value of a 'global' SourceSectionAttribute.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;Note: See the documentation of 'GlobalDynamicSourceElement' for a detailed explanation of the meaning of 'global' source elements."/>
        </eAnnotations>
        <eGenericSuperTypes eClassifier="#//structure/GlobalDynamicSourceElement">
          <eTypeArguments eClassifier="#//structure/source/SourceSection"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionClass"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionReference"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionAttribute"/>
          <eTypeArguments eClassifier="#//structure/SourceInstanceSelector"/>
        </eGenericSuperTypes>
        <eGenericSuperTypes eClassifier="#//mapping/extended/AttributeMappingSourceInterface"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="CardinalityMapping" eSuperTypes="#//mapping/extended/MappingHint #//ExpressionElement #//ModifiableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="sourceClassMatchesSection sourceClassIsVariableCardinality targetClassMatchesSection targetClassIsVariableCardinality noCardinalityMappingForSourceSectionRoot"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A MappingHint that tells the transformation algorithm how determine the cardinality of a TargetSectionClass (how often the Class shall be instantiated) in the course of a transformation.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;The value is thereby determined based on one of two possibilities:&#xD;&#xA;&lt;br />&#xD;&#xA;(1) Based on the list of specified 'sourceElements' and an optional (mathematical) 'expression'.&#xD;&#xA;&lt;br />&#xD;&#xA;If the expression is not present, the values of all specified source elements are treated as Strings and simply concatenated.&#xD;&#xA;&lt;br />&#xD;&#xA;If an expression is present, this will be used to calculate the value. The expression may thereby reference the (numeric) values of the specified source elements via their name. For example, if a source element named 'x' is specified, a valid expression to double the value of this element would be &quot;2*x&quot;.&#xD;&#xA;&lt;br />&#xD;&#xA;(1) Base on the cardinality of the specified 'source'.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;Note: Only one of 'sourceElements' or 'source' may be specified!"/>
        </eAnnotations>
        <eOperations name="validateSourceElementMatchesSection" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xD;&#xA;if(this.getSource() == null || !(this.eContainer().eContainer() instanceof &lt;%pamtram.mapping.Mapping%>) || ((Mapping) this.eContainer().eContainer()).getSourceSection() == null) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;boolean result = this.getSource().getContainingSection() == ((Mapping) this.eContainer().eContainer()).getSourceSection();&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;The source element '&quot; + this.getSource().getName() + &quot;' is not part of the source section referenced by parent mapping '&quot; + ((pamtram.mapping.Mapping) this.eContainer().eContainer()).getName() + &quot;'!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.mapping.extended.util.ExtendedValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ExtendedValidator.CARDINALITY_MAPPING__VALIDATE_SOURCE_ELEMENT_MATCHES_SECTION,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.mapping.extended.ExtendedPackage%>.Literals.CARDINALITY_MAPPING__SOURCE }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
          </eAnnotations>
          <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
          <eParameters name="context">
            <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
              <eTypeArguments/>
              <eTypeArguments/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="validateTargetClassMatchesSection" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xD;&#xA;if(this.getTarget() == null || !(this.eContainer() instanceof &lt;%pamtram.mapping.MappingHintGroupType%>) || ((MappingHintGroupType) this.eContainer()).getTargetSection() == null) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;boolean result = this.getTarget().getContainingSection() == ((MappingHintGroupType) this.eContainer()).getTargetSection();&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;The target class '&quot; + this.getTarget().getName() + &quot;' is not part of the target section referenced by parent hint group '&quot; + ((MappingHintGroupType) this.eContainer()).getName() + &quot;'!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.mapping.extended.util.ExtendedValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ExtendedValidator.CARDINALITY_MAPPING__VALIDATE_TARGET_CLASS_MATCHES_SECTION,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.mapping.extended.ExtendedPackage%>.Literals.CARDINALITY_MAPPING__TARGET }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
          </eAnnotations>
          <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
          <eParameters name="context">
            <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
              <eTypeArguments/>
              <eTypeArguments/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="validateSourceClassIsVariableCardinality" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xD;&#xA;boolean result = this.getSource() == null || !(this.getSource() instanceof SourceSectionClass) ? true : ((SourceSectionClass) this.getSource()).getCardinality() != CardinalityType.ONE;&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;Cardinality mappings may only be defined for source classes with a specified cardinality distinct from 'CardinalityType::ONE'!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.mapping.extended.util.ExtendedValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ExtendedValidator.CARDINALITY_MAPPING__VALIDATE_SOURCE_CLASS_IS_VARIABLE_CARDINALITY,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.mapping.extended.ExtendedPackage%>.Literals.CARDINALITY_MAPPING__SOURCE }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
          </eAnnotations>
          <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
          <eParameters name="context">
            <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
              <eTypeArguments/>
              <eTypeArguments/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="validateTargetClassIsVariableCardinality" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xD;&#xA;boolean result = this.getTarget() == null ? true : this.getTarget().getCardinality() != &lt;%pamtram.structure.generic.CardinalityType%>.ONE;&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;Cardinality mappings may only be defined for target classes with a specified cardinality distinct from 'CardinalityType::ONE'!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.mapping.extended.util.ExtendedValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ExtendedValidator.CARDINALITY_MAPPING__VALIDATE_TARGET_CLASS_IS_VARIABLE_CARDINALITY,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.mapping.extended.ExtendedPackage%>.Literals.CARDINALITY_MAPPING__TARGET }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
          </eAnnotations>
          <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
          <eParameters name="context">
            <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
              <eTypeArguments/>
              <eTypeArguments/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="validateNoCardinalityMappingForSourceSectionRoot" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xD;&#xA;boolean result = this.getSource() == null ? true : this.getSource() != this.getSource().getContainingSection();&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;Cardinality mappings must not be defined for SourceSection root classes!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.mapping.extended.util.ExtendedValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ExtendedValidator.CARDINALITY_MAPPING__VALIDATE_NO_CARDINALITY_MAPPING_FOR_SOURCE_SECTION_ROOT,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.mapping.extended.ExtendedPackage%>.Literals.CARDINALITY_MAPPING__SOURCE }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
          </eAnnotations>
          <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
          <eParameters name="context">
            <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
              <eTypeArguments/>
              <eTypeArguments/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="validateOnlySourceOrSourceElements" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xD;&#xA;boolean result = this.getSource() == null || this.getSourceElements() == null || this.getSourceElements().isEmpty();&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;A CardinalityMapping must not specify both a 'source' and a set of 'sourceElements'!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.mapping.extended.util.ExtendedValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ExtendedValidator.CARDINALITY_MAPPING__VALIDATE_ONLY_SOURCE_OR_SOURCE_ELEMENTS,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.mapping.extended.ExtendedPackage%>.Literals.CARDINALITY_MAPPING }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
          </eAnnotations>
          <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
          <eParameters name="context">
            <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
              <eTypeArguments/>
              <eTypeArguments/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="validateExpressionOnlyForSourceElements" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xD;&#xA;boolean result = !this.getSourceElements().isEmpty() || this.expression.isEmpty();&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;A CardinalityMapping must only specify an 'expression' if it also specifies a set of 'sourceElements'!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.mapping.extended.util.ExtendedValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ExtendedValidator.CARDINALITY_MAPPING__VALIDATE_EXPRESSION_ONLY_FOR_SOURCE_ELEMENTS,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.mapping.extended.ExtendedPackage%>.Literals.CARDINALITY_MAPPING }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
          </eAnnotations>
          <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
          <eParameters name="context">
            <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
              <eTypeArguments/>
              <eTypeArguments/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="validateModifiersOnlyForSourceElements" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xD;&#xA;boolean result = !this.getSourceElements().isEmpty() || this.getModifiers().isEmpty();&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;A CardinalityMapping must only specify 'modifiers' if it also specifies a set of 'sourceElements'!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.mapping.extended.util.ExtendedValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ExtendedValidator.CARDINALITY_MAPPING__VALIDATE_MODIFIERS_ONLY_FOR_SOURCE_ELEMENTS,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.mapping.extended.ExtendedPackage%>.Literals.CARDINALITY_MAPPING }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
          </eAnnotations>
          <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
          <eParameters name="context">
            <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
              <eTypeArguments/>
              <eTypeArguments/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="getLocalSourceElements" unique="false" upperBound="-1"
            eType="#//mapping/extended/CardinalityMappingSourceElement">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="return new &lt;%org.eclipse.emf.common.util.BasicEList%>&lt;>(this.getSourceElements().stream().filter(s -> s instanceof CardinalityMappingSourceElement).map(s -> (CardinalityMappingSourceElement) s).collect(&lt;%java.util.stream.Collectors%>.toList()));"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="getExternalSourceElements" unique="false" upperBound="-1"
            eType="#//mapping/extended/CardinalityMappingExternalSourceElement">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="return new &lt;%org.eclipse.emf.common.util.BasicEList%>&lt;>(this.getSourceElements().stream().filter(s -> s instanceof CardinalityMappingExternalSourceElement).map(s -> (CardinalityMappingExternalSourceElement) s).collect(&lt;%java.util.stream.Collectors%>.toList()));"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="source">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The (optional) 'source' element whose cardinality is used to determine the cardinality of the 'target' Class."/>
          </eAnnotations>
          <eGenericType eClassifier="#//structure/generic/MetaModelElement">
            <eTypeArguments eClassifier="#//structure/source/SourceSection"/>
            <eTypeArguments eClassifier="#//structure/source/SourceSectionClass"/>
            <eTypeArguments eClassifier="#//structure/source/SourceSectionReference"/>
            <eTypeArguments eClassifier="#//structure/source/SourceSectionAttribute"/>
          </eGenericType>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="target" lowerBound="1"
            eType="#//structure/target/TargetSectionClass">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The TargetSectionClass whose cardinality is determined by this CardinalityMapping."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="sourceElements" upperBound="-1"
            eType="#//mapping/extended/CardinalityMappingSourceInterface" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The (optional) list of 'sourceElements' based on which the cardinality of the 'target' Class is determined."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="CardinalityMappingSourceInterface"
          abstract="true" interface="true" eSuperTypes="#//mapping/extended/MappingHintSourceInterface">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The common superclass of all types that can be used as 'sourceElement' in a CardinalityMapping."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="CardinalityMappingSourceElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A concrete type of 'sourceElement' for a CardinalityMapping.&#xD;&#xA;&lt;br />&#xD;&#xA;This type is based on the value of a 'local' SourceSectionAttribute.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;Note: See the documentation of 'LocalDynamicSourceElement' for a detailed explanation of the meaning of 'local' source elements."/>
        </eAnnotations>
        <eGenericSuperTypes eClassifier="#//structure/LocalDynamicSourceElement">
          <eTypeArguments eClassifier="#//structure/source/SourceSection"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionClass"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionReference"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionAttribute"/>
        </eGenericSuperTypes>
        <eGenericSuperTypes eClassifier="#//mapping/extended/CardinalityMappingSourceInterface"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="CardinalityMappingExternalSourceElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A concrete type of 'sourceElement' for a CardinalityMapping.&#xD;&#xA;&lt;br />&#xD;&#xA;This type is based on the value of an 'external' SourceSectionAttribute.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;Note: See the documentation of 'ExternalDynamicSourceElement' for a detailed explanation of the meaning of 'external' source elements."/>
        </eAnnotations>
        <eGenericSuperTypes eClassifier="#//structure/ExternalDynamicSourceElement">
          <eTypeArguments eClassifier="#//structure/source/SourceSection"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionClass"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionReference"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionAttribute"/>
        </eGenericSuperTypes>
        <eGenericSuperTypes eClassifier="#//mapping/extended/CardinalityMappingSourceInterface"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="CardinalityMappingGlobalSourceElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A concrete type of 'sourceElement' for a CardinalityMapping.&#xD;&#xA;&lt;br />&#xD;&#xA;This type is based on the value of a 'global' SourceSectionAttribute.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;Note: See the documentation of 'GlobalDynamicSourceElement' for a detailed explanation of the meaning of 'global' source elements."/>
        </eAnnotations>
        <eGenericSuperTypes eClassifier="#//structure/GlobalDynamicSourceElement">
          <eTypeArguments eClassifier="#//structure/source/SourceSection"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionClass"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionReference"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionAttribute"/>
          <eTypeArguments eClassifier="#//structure/SourceInstanceSelector"/>
        </eGenericSuperTypes>
        <eGenericSuperTypes eClassifier="#//mapping/extended/CardinalityMappingSourceInterface"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ReferenceTargetSelector" eSuperTypes="#//mapping/extended/MappingHint #//structure/TargetInstanceSelector">
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="affectedReferenceIsNonContainment affectedReferenceMatchesSection"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A MappingHint that tells the transformation algorithm how determine the target value(s)/instance(s) of a TargetSectionCrossReference in the course of a transformation.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;The target instances are thereby determined based on the specified 'matcher'."/>
        </eAnnotations>
        <eOperations name="validateAffectedReferenceIsNonContainment" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xD;&#xA;boolean result = this.getAffectedReference() == null || this.getAffectedReference().getEReference() == null ? true : !this.getAffectedReference().getEReference().isContainment();&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;The affected reference '&quot; + this.getAffectedReference().getName() + &quot;' is no non-containment reference!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.mapping.extended.util.ExtendedValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ExtendedValidator.REFERENCE_TARGET_SELECTOR__VALIDATE_AFFECTED_REFERENCE_IS_NON_CONTAINMENT,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.mapping.extended.ExtendedPackage%>.Literals.REFERENCE_TARGET_SELECTOR__AFFECTED_REFERENCE }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
          </eAnnotations>
          <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
          <eParameters name="context">
            <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
              <eTypeArguments/>
              <eTypeArguments/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="validateAffectedReferenceMatchesSection" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xD;&#xA;if(this.getAffectedReference() == null) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&lt;%pamtram.structure.target.TargetSection%> targetSection = this.eContainer() instanceof &lt;%pamtram.mapping.MappingHintGroupType%> ? ((MappingHintGroupType) this.eContainer()).getTargetSection() : ((&lt;%pamtram.mapping.MappingHintGroupImporter%>) this.eContainer()).getHintGroup().getTargetSection();&#xD;&#xA;&#xD;&#xA;boolean result = targetSection == null ? true : this.getAffectedReference().getContainingSection() == targetSection || targetSection.getExtend().contains(this.getAffectedReference().getContainingSection());&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String hintGroupName = this.eContainer() instanceof MappingHintGroupType ? ((MappingHintGroupType) this.eContainer()).getName() : ((MappingHintGroupImporter) this.eContainer()).getHintGroup().getName();&#xD;&#xA;&#x9;String errorMessage = &quot;The affected reference '&quot; + this.getAffectedReference().getName() + &quot;' is not part of the target section referenced by parent hint group '&quot; + hintGroupName + &quot;'!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.mapping.extended.util.ExtendedValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ExtendedValidator.REFERENCE_TARGET_SELECTOR__VALIDATE_AFFECTED_REFERENCE_MATCHES_SECTION,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.mapping.extended.ExtendedPackage%>.Literals.REFERENCE_TARGET_SELECTOR__AFFECTED_REFERENCE }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
          </eAnnotations>
          <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
          <eParameters name="context">
            <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
              <eTypeArguments/>
              <eTypeArguments/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="validateReferenceAttributeIsValid" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="if (this.referenceAttribute == null || this.targetClass == null&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;|| this.targetClass.getContainingSection() == null) {&#xD;&#xA;&#x9;&#x9;&#x9;return true;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#x9;// If a 'targetClass' has already been set for this 'TargetInstanceSelector', allow only 'referenceAttributes'&#xD;&#xA;&#x9;&#x9;// that are part of the same &lt;%pamtram.structure.target.TargetSection%> as the specified 'targetClass' (or of one of the extended&#xD;&#xA;&#x9;&#x9;// sections).&#xD;&#xA;&#x9;&#x9;//&#xD;&#xA;&#xD;&#x9;&lt;%pamtram.structure.target.TargetSection%> section = this.targetClass.getContainingSection();&#xD;&#xA;&#xD;&#x9;List&lt;&lt;%pamtram.structure.target.TargetSection%>> allowedSections = new ArrayList&lt;>(&lt;%java.util.Arrays%>.asList(section));&#xD;&#xA;&#x9;&#x9;allowedSections.addAll(section.getAllExtend());&#xD;&#xA;&#xD;&#x9;boolean result = allowedSections.contains(this.referenceAttribute.getContainingSection());&#xD;&#xA;&#xD;&#x9;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#x9;&#x9;String errorMessage = &quot;The 'referenceAttribute' must be contained in the same &lt;%pamtram.structure.target.TargetSection%> (or an extended section) as the 'targetClass'!&quot;;&#xD;&#xA;&#xD;&#x9;&#x9;diagnostics.add(new BasicDiagnostic(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR, &lt;%pamtram.structure.util.StructureValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;%pamtram.structure.util.StructureValidator%>.TARGET_INSTANCE_SELECTOR__VALIDATE_REFERENCE_ATTRIBUTE_IS_VALID, errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.structure.StructurePackage%>.Literals.TARGET_INSTANCE_SELECTOR__REFERENCE_ATTRIBUTE }));&#xD;&#xA;&#xD;&#x9;}&#xD;&#xA;&#xD;&#x9;return result;"/>
          </eAnnotations>
          <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
          <eParameters name="context">
            <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
              <eTypeArguments/>
              <eTypeArguments/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="validateTargetClass" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="// If an 'affectedReference' has already been set for this 'TargetInstanceSelector', allow only&#xD;&#xA;&#x9;&#x9;// those choices&#xD;&#xA;&#x9;&#x9;// that are compatible with the selected reference.&#xD;&#xA;&#x9;&#x9;//&#xD;&#xA;&#x9;&#x9;if (this.getAffectedReference() == null || this.getAffectedReference().getEReference() == null&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;|| this.getTargetClass() == null || this.getTargetClass().getEClass() == null) {&#xD;&#xA;&#x9;&#x9;&#x9;return true;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#x9;boolean result = this.getAffectedReference().getEReference().getEReferenceType()&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;.isSuperTypeOf(this.targetClass.getEClass());&#xD;&#xA;&#xD;&#x9;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#x9;&#x9;String errorMessage = &quot;The specified 'targetClass' is not compatible with the specified 'affectedReference'!&quot;;&#xD;&#xA;&#xD;&#x9;&#x9;diagnostics.add(new BasicDiagnostic(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR, &lt;%pamtram.mapping.extended.util.ExtendedValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;%pamtram.mapping.extended.util.ExtendedValidator%>.REFERENCE_TARGET_SELECTOR__VALIDATE_TARGET_CLASS, errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.structure.StructurePackage%>.Literals.TARGET_INSTANCE_SELECTOR__TARGET_CLASS }));&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#x9;return result;"/>
          </eAnnotations>
          <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
          <eParameters name="context">
            <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
              <eTypeArguments/>
              <eTypeArguments/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="affectedReference"
            lowerBound="1" eType="#//structure/target/TargetSectionCrossReference">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The TargetSectionCrossReference whose target values are determined by this ReferenceTargetSelector."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ContainerSelector" eSuperTypes="#//mapping/extended/MappingHint #//structure/TargetInstanceSelector">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A MappingHint that tells the transformation algorithm how to determine the container element for the instances created based on the TargetSection associated with this HintGroup in the course of a transformation.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;Thereby, exactly one of the elements that have been created based on the specified 'targetAttributes' (resp. the containing TargetSectionClasses) is used as container element.&#xD;&#xA;&lt;br />&#xD;&#xA;The selection of the container element is based on the comparison of the value of a the 'targetAttributes' of the created instances with a reference value. The reference value is thereby calculated based on the list of specified 'sourceElements'."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="sourceMatchesPossibleContainerType"/>
        </eAnnotations>
        <eOperations name="validateTargetClassMatchesPossibleContainerType" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="if (!(this.eContainer() instanceof &lt;%pamtram.mapping.MappingHintGroupType%>) || this.getTargetClass() == null) {&#xD;&#xA;&#x9;&#x9;&#x9;return true;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#x9;&lt;%pamtram.structure.target.TargetSection%> targetSection = ((&lt;%pamtram.mapping.MappingHintGroupType%>) this.eContainer()).getTargetSection();&#xD;&#xA;&#xD;&#x9;boolean result = targetSection == null || targetSection.getEClass() == null ? true&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;: this.getTargetClass().getEClass().getEAllContainments().parallelStream()&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.anyMatch(r -> r.getEReferenceType().isSuperTypeOf(targetSection.getEClass()));&#xD;&#xA;&#xD;&#x9;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#x9;&#x9;String errorMessage = &quot;The type of the parent hint group's target section ('&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ targetSection.getEClass().getName()&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;') cannot be connected to (contained in) the specified target class ('&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ this.getTargetClass().getName() + &quot;')!&quot;;&#xD;&#xA;&#xD;&#x9;&#x9;diagnostics.add(new BasicDiagnostic(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR, &lt;%pamtram.mapping.extended.util.ExtendedValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;%pamtram.mapping.extended.util.ExtendedValidator%>.CONTAINER_SELECTOR__VALIDATE_TARGET_CLASS_MATCHES_POSSIBLE_CONTAINER_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.structure.StructurePackage%>.Literals.TARGET_INSTANCE_SELECTOR__TARGET_CLASS }));&#xD;&#xA;&#xD;&#x9;}&#xD;&#xA;&#xD;&#x9;return result;"/>
          </eAnnotations>
          <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
          <eParameters name="context">
            <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
              <eTypeArguments/>
              <eTypeArguments/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="validateReferenceAttribute" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="if (!(this.eContainer() instanceof &lt;%pamtram.mapping.MappingHintGroupType%>) || this.getTargetClass() == null) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&lt;%pamtram.structure.target.TargetSection%> targetSection = ((&lt;%pamtram.mapping.MappingHintGroupType%>) this.eContainer()).getTargetSection();&#xD;&#xA;boolean result = targetSection == null || targetSection.getEClass() == null ? true&#xD;&#xA;&#x9;&#x9;: this.getTargetClass().getEClass().getEAllContainments().parallelStream()&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;.anyMatch(r -> r.getEReferenceType().isSuperTypeOf(targetSection.getEClass()));&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#x9;String errorMessage = &quot;The type of the parent hint group's target section ('&quot;&#xD;&#xA;&#x9;&#x9;&#x9;+ targetSection.getEClass().getName()&#xD;&#xA;&#x9;&#x9;&#x9;+ &quot;') cannot be connected to (contained in) the specified target class ('&quot;&#xD;&#xA;&#x9;&#x9;&#x9;+ this.getTargetClass().getName() + &quot;')!&quot;;&#xD;&#xA;&#x9;diagnostics.add(new BasicDiagnostic(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR, &lt;%pamtram.mapping.extended.util.ExtendedValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.mapping.extended.util.ExtendedValidator%>.CONTAINER_SELECTOR__VALIDATE_TARGET_CLASS_MATCHES_POSSIBLE_CONTAINER_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.structure.StructurePackage%>.Literals.TARGET_INSTANCE_SELECTOR__TARGET_CLASS }));&#xD;&#xA;&#xD;}&#xD;&#xA;&#xD;&#xD;&#xA;return result;"/>
          </eAnnotations>
          <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
          <eParameters name="context">
            <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
              <eTypeArguments/>
              <eTypeArguments/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="validateReferenceAttributeIsValid" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="if (this.referenceAttribute == null || this.targetClass == null&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;|| this.targetClass.getContainingSection() == null) {&#xD;&#xA;&#x9;&#x9;&#x9;return true;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#x9;// If a 'targetClass' has already been set for this 'TargetInstanceSelector', allow only 'referenceAttributes'&#xD;&#xA;&#x9;&#x9;// that are part of the same &lt;%pamtram.structure.target.TargetSection%> as the specified 'targetClass' (or of one of the extended&#xD;&#xA;&#x9;&#x9;// sections).&#xD;&#xA;&#x9;&#x9;//&#xD;&#xA;&#xD;&#x9;&lt;%pamtram.structure.target.TargetSection%> section = this.targetClass.getContainingSection();&#xD;&#xA;&#xD;&#x9;List&lt;&lt;%pamtram.structure.target.TargetSection%>> allowedSections = new ArrayList&lt;>(&lt;%java.util.Arrays%>.asList(section));&#xD;&#xA;&#x9;&#x9;allowedSections.addAll(section.getAllExtend());&#xD;&#xA;&#xD;&#x9;boolean result = allowedSections.contains(this.referenceAttribute.getContainingSection());&#xD;&#xA;&#xD;&#x9;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#x9;&#x9;String errorMessage = &quot;The 'referenceAttribute' must be contained in the same &lt;%pamtram.structure.target.TargetSection%> (or an extended section) as the 'targetClass'!&quot;;&#xD;&#xA;&#xD;&#x9;&#x9;diagnostics.add(new BasicDiagnostic(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR, &lt;%pamtram.structure.util.StructureValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;%pamtram.structure.util.StructureValidator%>.TARGET_INSTANCE_SELECTOR__VALIDATE_REFERENCE_ATTRIBUTE_IS_VALID, errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.structure.StructurePackage%>.Literals.TARGET_INSTANCE_SELECTOR__REFERENCE_ATTRIBUTE }));&#xD;&#xA;&#xD;&#x9;}&#xD;&#xA;&#xD;&#x9;return result;"/>
          </eAnnotations>
          <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
          <eParameters name="context">
            <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
              <eTypeArguments/>
              <eTypeArguments/>
            </eGenericType>
          </eParameters>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="MappedAttributeValueExpander" abstract="true"
          eSuperTypes="#//mapping/extended/HintImporterMappingHint">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A common super-class for MappingHints that can be used inside MappingHintGroupImporters and will expand values determined for an imported MappingHint."/>
        </eAnnotations>
        <eOperations name="getSourceAttribute" eType="#//structure/source/SourceSectionAttribute">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="if(this instanceof LocalMappedAttributeValueExpander) {&#xD;&#xA;&#x9;return ((LocalMappedAttributeValueExpander) this).getSource();&#xD;&#xA;} else if(this instanceof ExternalMappedAttributeValueExpander) {&#xD;&#xA;&#x9;return ((ExternalMappedAttributeValueExpander) this).getSource();&#xD;&#xA;} else {&#xD;&#xA;&#x9;return null;&#xD;&#xA;}"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="hintsToExpand" lowerBound="1"
            upperBound="-1" eType="#//mapping/extended/ExpandableHint">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The MappingHint for which determined values are expanded by this Expander."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="LocalMappedAttributeValueExpander"
          abstract="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A MappedAttributeValueExpander that will expand values determined for an imported MappingHint by adding values of the specified local 'source' Attribute."/>
        </eAnnotations>
        <eGenericSuperTypes eClassifier="#//structure/LocalDynamicSourceElement">
          <eTypeArguments eClassifier="#//structure/source/SourceSection"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionClass"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionReference"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionAttribute"/>
        </eGenericSuperTypes>
        <eGenericSuperTypes eClassifier="#//mapping/extended/MappedAttributeValueExpander"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="MappedAttributeValuePrepender" eSuperTypes="#//mapping/extended/LocalMappedAttributeValueExpander">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A MappedAttributeValueExpander that will expand values determined for an imported MappingHint by adding values of the specified local 'source' Attribute.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;The local determined values will thereby be prepended to the imported values."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="MappedAttributeValueAppender" eSuperTypes="#//mapping/extended/LocalMappedAttributeValueExpander">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A MappedAttributeValueExpander that will expand values determined for an imported MappingHint by adding values of the specified local 'source' Attribute.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;The local determined values will thereby be appended to the imported values."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ExternalMappedAttributeValueExpander"
          abstract="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A MappedAttributeValueExpander that will expand values determined for an imported MappingHint by adding values of the specified external 'source' Attribute."/>
        </eAnnotations>
        <eGenericSuperTypes eClassifier="#//structure/ExternalDynamicSourceElement">
          <eTypeArguments eClassifier="#//structure/source/SourceSection"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionClass"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionReference"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionAttribute"/>
        </eGenericSuperTypes>
        <eGenericSuperTypes eClassifier="#//mapping/extended/MappedAttributeValueExpander"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ExternalMappedAttributeValuePrepender"
          eSuperTypes="#//mapping/extended/ExternalMappedAttributeValueExpander">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A MappedAttributeValueExpander that will expand values determined for an imported MappingHint by adding values of the specified external 'source' Attribute.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;The external determined values will thereby be appended to the imported values."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ExternalMappedAttributeValueAppender"
          eSuperTypes="#//mapping/extended/ExternalMappedAttributeValueExpander">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A MappedAttributeValueExpander that will expand values determined for an imported MappingHint by adding values of the specified external 'source' Attribute.&#xD;&#xA;&lt;br />&lt;br />&#xD;&#xA;The external determined values will thereby be appended to the imported values."/>
        </eAnnotations>
      </eClassifiers>
    </eSubpackages>
  </eSubpackages>
</ecore:EPackage>
