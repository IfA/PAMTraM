/**
 */
package pamtram.metamodel;

import java.util.Map;
import org.eclipse.emf.common.util.DiagnosticChain;
import org.eclipse.emf.common.util.EList;


/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Meta Model Section Reference</b></em>'.
 * <!-- end-user-doc -->
 *
 * <p>
 * The following features are supported:
 * </p>
 * <ul>
 *   <li>{@link pamtram.metamodel.MetaModelSectionReference#getValue <em>Value</em>}</li>
 * </ul>
 *
 * @see pamtram.metamodel.MetamodelPackage#getMetaModelSectionReference()
 * @model annotation="http://www.eclipse.org/emf/2002/Ecore constraints='valuesMatchReferenceType'"
 * @generated
 */
public interface MetaModelSectionReference extends SourceSectionReference {

	/**
	 * Returns the value of the '<em><b>Value</b></em>' reference list.
	 * The list contents are of type {@link pamtram.metamodel.SourceSectionClass}.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Value</em>' reference list isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Value</em>' reference list.
	 * @see pamtram.metamodel.MetamodelPackage#getMetaModelSectionReference_Value()
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel get='throw new UnsupportedOperationException();  // FIXME Unimplemented http://mfreund.de/pamtram/metamodel!MetaModelSectionReference!value'"
	 * @generated
	 */
	EList<SourceSectionClass> getValue();

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='/**\n * \n * inv valuesMatchReferenceType:\n *   let severity : Integer[1] = 4\n *   in\n *     let\n *       status : OclAny[?] = if self.eReference.oclType() = OclVoid\n *       then true\n *       else\n *         self.value->forAll(c |\n *           self.eReference.eReferenceType.isSuperTypeOf(c.eClass))\n *       endif\n *     in\n *       let\n *         message : String[?] = if status <> true\n *         then\n *           self.value->select(c |\n *             not self.eReference.eReferenceType.isSuperTypeOf(c.eClass))\n *           ->size()\n *           .toString() + \' of the selected target Classes (Value) are not allowed by the selected eReference \\\'\' + self.eReference.name + \'\\\'!\'\n *         else null\n *         endif\n *       in\n *         \'MetaModelSectionReference::valuesMatchReferenceType\'.logDiagnostic(self, null, diagnostics, context, message, severity, status, 0)\n \052/\nfinal /*@NonNull\052/ /*@NonInvalid\052/ <%org.eclipse.ocl.pivot.evaluation.Evaluator%> evaluator = <%org.eclipse.ocl.pivot.internal.utilities.PivotUtilInternal%>.getEvaluator(this);\nfinal /*@NonNull\052/ /*@NonInvalid\052/ <%org.eclipse.ocl.pivot.ids.IdResolver%> idResolver = evaluator.getIdResolver();\n/*@Nullable\052/ /*@Caught\052/ <%java.lang.Object%> CAUGHT_status;\ntry {\n    final /*@NonNull\052/ /*@NonInvalid\052/ <%org.eclipse.ocl.pivot.Class%> TYP_OclVoid_0 = idResolver.getClass(<%org.eclipse.ocl.pivot.ids.TypeId%>.OCL_VOID, null);\n    final /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.emf.ecore.EReference%> eReference = this.getEReference();\n    final /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.pivot.Class%> oclType = <%org.eclipse.ocl.pivot.utilities.ClassUtil%>.nonNullState((<%org.eclipse.ocl.pivot.Class%>)<%org.eclipse.ocl.pivot.library.oclany.OclAnyOclTypeOperation%>.INSTANCE.evaluate(evaluator, eReference));\n    final /*@Thrown\052/ boolean eq = oclType.getTypeId() == TYP_OclVoid_0.getTypeId();\n    /*@Nullable\052/ /*@Thrown\052/ <%java.lang.Boolean%> status;\n    if (eq) {\n        status = <%org.eclipse.ocl.pivot.utilities.ValueUtil%>.TRUE_VALUE;\n    }\n    else {\n        final /*@NonNull\052/ /*@Thrown\052/ <%java.util.List%><<%pamtram.metamodel.SourceSectionClass%>> value = this.getValue();\n        final /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.pivot.values.OrderedSetValue%> BOXED_value = idResolver.createOrderedSetOfAll(<%pamtram.metamodel.MetamodelTables%>.ORD_CLSSid_SourceSectionClass, value);\n        /*@Nullable\052/ /*@Thrown\052/ <%java.lang.Object%> accumulator = <%org.eclipse.ocl.pivot.utilities.ValueUtil%>.TRUE_VALUE;\n        /*@Nullable\052/ <%java.util.Iterator%><?> ITERATOR_c = BOXED_value.iterator();\n        /*@Nullable\052/ /*@Thrown\052/ <%java.lang.Boolean%> forAll;\n        while (true) {\n            if (!ITERATOR_c.hasNext()) {\n                if (accumulator == <%org.eclipse.ocl.pivot.utilities.ValueUtil%>.TRUE_VALUE) {\n                    forAll = <%org.eclipse.ocl.pivot.utilities.ValueUtil%>.TRUE_VALUE;\n                }\n                else {\n                    throw (<%org.eclipse.ocl.pivot.values.InvalidValueException%>)accumulator;\n                }\n                break;\n            }\n            /*@Nullable\052/ /*@NonInvalid\052/ <%pamtram.metamodel.SourceSectionClass%> c = (<%pamtram.metamodel.SourceSectionClass%>)ITERATOR_c.next();\n            /**\n             * self.eReference.eReferenceType.isSuperTypeOf(c.eClass)\n             \052/\n            /*@NonNull\052/ /*@Caught\052/ <%java.lang.Object%> CAUGHT_isSuperTypeOf;\n            try {\n                @SuppressWarnings(\"null\")\n                final /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.emf.ecore.EClass%> eReferenceType = eReference.getEReferenceType();\n                if (c == null) {\n                    throw new <%org.eclipse.ocl.pivot.values.InvalidValueException%>(\"Null source for \\\'\\\'http://mfreund.de/pamtram/metamodel\\\'::Class::eClass\\\'\");\n                }\n                final /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.emf.ecore.EClass%> eClass = c.getEClass();\n                final /*@Thrown\052/ boolean isSuperTypeOf = eReferenceType.isSuperTypeOf(eClass);\n                CAUGHT_isSuperTypeOf = isSuperTypeOf;\n            }\n            catch (<%java.lang.Exception%> e) {\n                CAUGHT_isSuperTypeOf = <%org.eclipse.ocl.pivot.utilities.ValueUtil%>.createInvalidValue(e);\n            }\n            //\n            if (CAUGHT_isSuperTypeOf == <%org.eclipse.ocl.pivot.utilities.ValueUtil%>.FALSE_VALUE) {\t\t\t\t\t// Normal unsuccessful body evaluation result\n                forAll = <%org.eclipse.ocl.pivot.utilities.ValueUtil%>.FALSE_VALUE;\n                break;\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Stop immediately \n            }\n            else if (CAUGHT_isSuperTypeOf == <%org.eclipse.ocl.pivot.utilities.ValueUtil%>.TRUE_VALUE) {\t\t\t\t// Normal successful body evaluation result\n                ;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Carry on\n            }\n            else if (CAUGHT_isSuperTypeOf instanceof <%org.eclipse.ocl.pivot.values.InvalidValueException%>) {\t\t// Abnormal exception evaluation result\n                accumulator = CAUGHT_isSuperTypeOf;\t\t\t\t\t\t\t\t\t// Cache an exception failure\n            }\n            else {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Impossible badly typed result\n                accumulator = new <%org.eclipse.ocl.pivot.values.InvalidValueException%>(<%org.eclipse.ocl.pivot.messages.PivotMessages%>.NonBooleanBody, \"forAll\");\n            }\n        }\n        status = forAll;\n    }\n    CAUGHT_status = status;\n}\ncatch (<%java.lang.Exception%> e) {\n    CAUGHT_status = <%org.eclipse.ocl.pivot.utilities.ValueUtil%>.createInvalidValue(e);\n}\n/*@Nullable\052/ /*@Caught\052/ <%java.lang.Object%> CAUGHT_message_0;\ntry {\n    if (CAUGHT_status instanceof <%org.eclipse.ocl.pivot.values.InvalidValueException%>) {\n        throw (<%org.eclipse.ocl.pivot.values.InvalidValueException%>)CAUGHT_status;\n    }\n    final /*@Thrown\052/ boolean ne = CAUGHT_status == Boolean.FALSE;\n    /*@Nullable\052/ /*@Thrown\052/ <%java.lang.String%> message_0;\n    if (ne) {\n        final /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.emf.ecore.EReference%> eReference_2 = this.getEReference();\n        final /*@NonNull\052/ /*@Thrown\052/ <%java.util.List%><<%pamtram.metamodel.SourceSectionClass%>> value_0 = this.getValue();\n        final /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.pivot.values.OrderedSetValue%> BOXED_value_0 = idResolver.createOrderedSetOfAll(<%pamtram.metamodel.MetamodelTables%>.ORD_CLSSid_SourceSectionClass, value_0);\n        /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.pivot.values.OrderedSetValue%>.Accumulator accumulator_0 = <%org.eclipse.ocl.pivot.utilities.ValueUtil%>.createOrderedSetAccumulatorValue(<%pamtram.metamodel.MetamodelTables%>.ORD_CLSSid_SourceSectionClass);\n        /*@Nullable\052/ <%java.util.Iterator%><?> ITERATOR_c_0 = BOXED_value_0.iterator();\n        /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.pivot.values.OrderedSetValue%> select;\n        while (true) {\n            if (!ITERATOR_c_0.hasNext()) {\n                select = accumulator_0;\n                break;\n            }\n            /*@Nullable\052/ /*@NonInvalid\052/ <%pamtram.metamodel.SourceSectionClass%> c_0 = (<%pamtram.metamodel.SourceSectionClass%>)ITERATOR_c_0.next();\n            /**\n             * not self.eReference.eReferenceType.isSuperTypeOf(c.eClass)\n             \052/\n            @SuppressWarnings(\"null\")\n            final /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.emf.ecore.EClass%> eReferenceType_0 = eReference_2.getEReferenceType();\n            if (c_0 == null) {\n                throw new <%org.eclipse.ocl.pivot.values.InvalidValueException%>(\"Null source for \\\'\\\'http://mfreund.de/pamtram/metamodel\\\'::Class::eClass\\\'\");\n            }\n            final /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.emf.ecore.EClass%> eClass_0 = c_0.getEClass();\n            final /*@Thrown\052/ boolean isSuperTypeOf_0 = eReferenceType_0.isSuperTypeOf(eClass_0);\n            final /*@Nullable\052/ /*@Thrown\052/ <%java.lang.Boolean%> not = <%org.eclipse.ocl.pivot.library.logical.BooleanNotOperation%>.INSTANCE.evaluate(isSuperTypeOf_0);\n            if (not == null) {\n                throw new <%org.eclipse.ocl.pivot.values.InvalidValueException%>(\"Null body for \\\'OrderedSet(T).select(OrderedSet.T[?] | Lambda T() : Boolean[1]) : OrderedSet(T)\\\'\");\n            }\n            //\n            if (not == <%org.eclipse.ocl.pivot.utilities.ValueUtil%>.TRUE_VALUE) {\n                accumulator_0.add(c_0);\n            }\n        }\n        final /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.pivot.values.IntegerValue%> size = <%org.eclipse.ocl.pivot.utilities.ClassUtil%>.nonNullState(<%org.eclipse.ocl.pivot.library.collection.CollectionSizeOperation%>.INSTANCE.evaluate(select));\n        final /*@NonNull\052/ /*@Thrown\052/ <%java.lang.String%> toString = <%org.eclipse.ocl.pivot.utilities.ClassUtil%>.nonNullState(<%org.eclipse.ocl.pivot.library.oclany.OclAnyToStringOperation%>.INSTANCE.evaluate(size));\n        final /*@NonNull\052/ /*@Thrown\052/ <%java.lang.String%> sum = <%org.eclipse.ocl.pivot.utilities.ClassUtil%>.nonNullState(<%org.eclipse.ocl.pivot.library.string.StringConcatOperation%>.INSTANCE.evaluate(toString, <%pamtram.metamodel.MetamodelTables%>.STR__32_of_32_the_32_selected_32_target_32_Classes_32_o_Value_e_32_are_32_not_32_allowed_32_by_32_the_32_s));\n        final /*@Nullable\052/ /*@Thrown\052/ <%java.lang.String%> name = eReference_2.getName();\n        final /*@NonNull\052/ /*@Thrown\052/ <%java.lang.String%> sum_0 = <%org.eclipse.ocl.pivot.utilities.ClassUtil%>.nonNullState(<%org.eclipse.ocl.pivot.library.string.StringConcatOperation%>.INSTANCE.evaluate(sum, name));\n        final /*@NonNull\052/ /*@Thrown\052/ <%java.lang.String%> sum_1 = <%org.eclipse.ocl.pivot.utilities.ClassUtil%>.nonNullState(<%org.eclipse.ocl.pivot.library.string.StringConcatOperation%>.INSTANCE.evaluate(sum_0, <%pamtram.metamodel.MetamodelTables%>.STR__39_33));\n        message_0 = sum_1;\n    }\n    else {\n        message_0 = null;\n    }\n    CAUGHT_message_0 = message_0;\n}\ncatch (<%java.lang.Exception%> e) {\n    CAUGHT_message_0 = <%org.eclipse.ocl.pivot.utilities.ValueUtil%>.createInvalidValue(e);\n}\nfinal /*@NonInvalid\052/ boolean logDiagnostic = <%org.eclipse.ocl.pivot.utilities.ClassUtil%>.nonNullState(<%org.eclipse.ocl.pivot.library.string.CGStringLogDiagnosticOperation%>.INSTANCE.evaluate(evaluator, <%org.eclipse.ocl.pivot.ids.TypeId%>.BOOLEAN, <%pamtram.metamodel.MetamodelTables%>.STR_MetaModelSectionReference_c_c_valuesMatchReferenceType, this, null, diagnostics, context, CAUGHT_message_0, <%pamtram.metamodel.MetamodelTables%>.INT_4, CAUGHT_status, <%pamtram.metamodel.MetamodelTables%>.INT_0).booleanValue());\nreturn Boolean.TRUE == logDiagnostic;'"
	 * @generated
	 */
	boolean valuesMatchReferenceType(DiagnosticChain diagnostics, Map<Object, Object> context);

} // MetaModelSectionReference
