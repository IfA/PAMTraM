<?xml version="1.0" encoding="UTF-8"?>
<ecore:EPackage xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" name="pamtram" nsURI="http://mfreund.de/pamtram" nsPrefix="pamtram">
  <eAnnotations source="http://www.eclipse.org/OCL/Import">
    <details key="ecore" value="http://www.eclipse.org/emf/2002/Ecore"/>
    <details key="genlib" value="http://www.et.tu-dresden.de/ifa/agtele/genlib"/>
  </eAnnotations>
  <eClassifiers xsi:type="ecore:EClass" name="NamedElement" abstract="true">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="DeactivatableElement" abstract="true">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="deactivated" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean" defaultValueLiteral="false"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="PAMTraM">
    <eOperations name="mergeExtends">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="//TODO handle hierarchical extensions (an extended section extends other sections&#xD;&#xA;//TODO implement a more sophisticated merging strategy that takes into account overwriting of hints?&#xD;&#xA;&#xD;&#xA;/*&#xD;&#xA; * First, we collect each abstract source and target section as well as the concrete sections that&#xD;&#xA; * reference them&#xD;&#xA; */&#xD;&#xA;HashMap&lt;Section, LinkedList&lt;Section>> abstractToConcreteSectionMap = new HashMap&lt;>();&#xD;&#xA;Map&lt;EObject, Collection&lt;Setting>> sourceSettings = EcoreUtil.CrossReferencer.find(getSourceSections());&#xD;&#xA;for (Section section : getSourceSections()) {&#xD;&#xA;&#x9;if(section.isAbstract() &amp;&amp; sourceSettings.containsKey(section)) {&#xD;&#xA;&#x9;&#x9;LinkedList&lt;Section> concreteSections = new LinkedList&lt;>();&#xD;&#xA;&#x9;&#x9;for (Setting setting : sourceSettings.get(section)) {&#xD;&#xA;&#x9;&#x9;&#x9;if(setting.getEStructuralFeature().equals(&lt;%pamtram.structure.generic.impl.GenericPackageImpl%>.eINSTANCE.getSection_Extend())) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;concreteSections.add((Section) setting.getEObject());&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;abstractToConcreteSectionMap.put(section, concreteSections);&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;Map&lt;EObject, Collection&lt;Setting>> targetSettings = EcoreUtil.CrossReferencer.find(getTargetSections());&#xD;&#xA;for (Section section : getTargetSections()) {&#xD;&#xA;&#x9;if(section.isAbstract() &amp;&amp; targetSettings.containsKey(section)) {&#xD;&#xA;&#x9;&#x9;LinkedList&lt;Section> concreteSections = new LinkedList&lt;>();&#xD;&#xA;&#x9;&#x9;for (Setting setting : targetSettings.get(section)) {&#xD;&#xA;&#x9;&#x9;&#x9;if(setting.getEStructuralFeature().equals(GenericPackageImpl.eINSTANCE.getSection_Extend())) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;concreteSections.add((Section) setting.getEObject());&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;abstractToConcreteSectionMap.put(section, concreteSections);&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;ArrayList&lt;Mapping> concreteMappings = new ArrayList&lt;>();&#xD;&#xA;for (Mapping mapping : getActiveMappings()) {&#xD;&#xA;&#x9;if(!mapping.isAbstract()) {&#xD;&#xA;&#x9;&#x9;concreteMappings.add(mapping);&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;/*&#xD;&#xA; * Now, we copy all elements from the abstract sections to the concrete sections&#xD;&#xA; * that extend them. In this process, we store the associations between the elements from&#xD;&#xA; * the abstract sections and the copied elements in a map.&#xD;&#xA; */&#xD;&#xA;HashMap&lt;EObject, LinkedList&lt;EObject>> abstractToConcreteElementMap = new HashMap&lt;>();&#xD;&#xA;for (Section abstractSection : abstractToConcreteSectionMap.keySet()) {&#xD;&#xA;&#x9;for (Section concreteSection : abstractToConcreteSectionMap.get(abstractSection)) {&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;Section copiedSection = EcoreUtil.copy(abstractSection);&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;TreeIterator&lt;EObject> originalIterator = EcoreUtil.getAllContents(Collections.singleton(abstractSection));&#xD;&#xA;&#x9;&#x9;TreeIterator&lt;EObject> copyIterator = EcoreUtil.getAllContents(Collections.singleton(copiedSection));&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;// these lists will store the elements that we will add to the concrete section&#xD;&#xA;&#x9;&#x9;ArrayList&lt;Attribute> attributesToAdd = new ArrayList&lt;>();&#xD;&#xA;&#x9;&#x9;ArrayList&lt;Reference> referencesToAdd = new ArrayList&lt;>();&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;while(originalIterator.hasNext()) {&#xD;&#xA;&#x9;&#x9;&#x9;assert copyIterator.hasNext();&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;EObject originalNext = originalIterator.next();&#xD;&#xA;&#x9;&#x9;&#x9;EObject copyNext = copyIterator.next();&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;// if the element is the section itself, we skip it&#xD;&#xA;&#x9;&#x9;&#x9;if(originalNext instanceof Section) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;continue;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;// if the element is a top-level element below the section, we add it to the concrete section&#xD;&#xA;&#x9;&#x9;&#x9;if(originalNext.eContainer().equals(abstractSection)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if(copyNext instanceof Attribute) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;attributesToAdd.add((Attribute) copyNext);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} else if(copyNext instanceof Reference) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;referencesToAdd.add((Reference) copyNext);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;throw new RuntimeException(&quot;Unsupported element type '&quot; + copyNext.eClass().getName() + &quot;' encountered when merging extends!&quot;);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;// in any case, we fill the abstractToConcreteElementMap&#xD;&#xA;&#x9;&#x9;&#x9;LinkedList&lt;EObject> vals = abstractToConcreteElementMap.get(originalNext);&#xD;&#xA;&#x9;&#x9;&#x9;if(vals == null) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;vals = new LinkedList&lt;>();&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;vals.add(copyNext);&#xD;&#xA;&#x9;&#x9;&#x9;abstractToConcreteElementMap.put(originalNext, vals);&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;//TODO do we need to redirect references to these elements???&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;/*&#xD;&#xA;&#x9;&#x9; * now, we add the collected elements to the concrete section; we have to do this&#xD;&#xA;&#x9;&#x9; * after the process of iterating over the contents - otherwise, the TreeIterator will throw&#xD;&#xA;&#x9;&#x9; * IndexOutOfBoundsExceptions&#xD;&#xA;&#x9;&#x9; */&#xD;&#xA;&#x9;&#x9;concreteSection.getAttributes().addAll(attributesToAdd);&#xD;&#xA;&#x9;&#x9;concreteSection.getReferences().addAll(referencesToAdd);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;/*&#xD;&#xA;&#x9;&#x9; * Now, we redirect references from MappingHints to elements from the abstract section to the elements from the concrete sections. &#xD;&#xA;&#x9;&#x9; * Here, we only handle references from concrete mappings as the references from abstract mappings (and thus from extended hint&#xD;&#xA;&#x9;&#x9; * groups) are handled afterwards when these hint groups are copied.&#xD;&#xA;&#x9;&#x9; */&#xD;&#xA;&#x9;&#x9;Map&lt;EObject, Collection&lt;Setting>> refsToAbstractSection = EcoreUtil.UsageCrossReferencer.findAll(abstractToConcreteElementMap.keySet(), concreteMappings);&#xD;&#xA;&#x9;&#x9;for (EObject referencedObject : refsToAbstractSection.keySet()) {&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;for (Setting setting : refsToAbstractSection.get(referencedObject)) {&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;// this is the element referencing the abstract section (it should be an element of a mapping hint)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;EObject hintElement = setting.getEObject().eContainer();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;MappingHintGroupType hintGroup = null;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if(hintElement instanceof MappingHintGroupType) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hintGroup = (MappingHintGroupType) hintElement;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} else if(hintElement.eContainer() instanceof MappingHintGroupType) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hintGroup = (MappingHintGroupType) hintElement.eContainer();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hintGroup = (MappingHintGroupType) hintElement.eContainer().eContainer();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;// We do not need to handle deactivated Mappings/MappingHintGroups&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;//&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if(hintGroup instanceof DeactivatableElement &amp;&amp; ((DeactivatableElement) hintGroup).isDeactivated() ||&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;hintGroup.eContainer() instanceof DeactivatableElement &amp;&amp; ((DeactivatableElement) hintGroup.eContainer()).isDeactivated()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;continue;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;/* &#xD;&#xA;&#x9;&#x9;&#x9;&#x9; * check if the hint group or its parent mapping equals the section that we just added the concrete elements to&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; */&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if(concreteSection.equals(hintGroup.getTargetSection()) || &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;concreteSection.isContainerFor(hintGroup.getTargetSection()) ||&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;concreteSection.equals(((Mapping) hintGroup.eContainer()).getSourceSection()) || &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;concreteSection.isContainerFor(((Mapping) hintGroup.eContainer()).getSourceSection())) {&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(setting.getEStructuralFeature().equals(&lt;%pamtram.structure.impl.StructurePackageImpl%>.eINSTANCE.getDynamicSourceElement_Source()) &amp;&amp; &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;setting.getEObject() instanceof ContainerSelectorTargetAttribute) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// do nothing as ContainerSelectors are handled below separately&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// redirect the reference (we can always use the 'last' of the concrete objects as we just added it above&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;setting.set(abstractToConcreteElementMap.get(referencedObject).getLast());&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;/*&#xD;&#xA; * Now, we handle the ContainerSelectors that we skipped above. We can do this now as we now know all concrete TargetSections that&#xD;&#xA; * are a possible match for each ContainerSelector that points to an abstract TargetSection.&#xD;&#xA; */&#xD;&#xA;for (Section abstractSection : abstractToConcreteSectionMap.keySet()) {&#xD;&#xA;&#x9;for (Section concreteSection : abstractToConcreteSectionMap.get(abstractSection)) {&#xD;&#xA;&#x9;&#x9;/*&#xD;&#xA;&#x9;&#x9; * as ContainerSelectors will get treated differently (see below), we store the ContainerSelectorTargetAttributes&#xD;&#xA;&#x9;&#x9; * holding the referneces to the Attributes in the abstract section and will delete these later&#xD;&#xA;&#x9;&#x9; */&#xD;&#xA;&#x9;&#x9;ArrayList&lt;ContainerSelectorTargetAttribute> mchTargetAttributesToDelete = new ArrayList&lt;>();&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;Map&lt;EObject, Collection&lt;Setting>> refsToAbstractSection = EcoreUtil.UsageCrossReferencer.findAll(abstractToConcreteElementMap.keySet(), concreteMappings);&#xD;&#xA;&#x9;&#x9;for (EObject referencedObject : refsToAbstractSection.keySet()) {&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;for (Setting setting : refsToAbstractSection.get(referencedObject)) {&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;// this is the element referencing the abstract section (it should be an element of a mapping hint)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;EObject hintElement = setting.getEObject().eContainer();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;MappingHintGroupType hintGroup = null;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if(hintElement instanceof MappingHintGroupType) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hintGroup = (MappingHintGroupType) hintElement;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} else if(hintElement.eContainer() instanceof MappingHintGroupType) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hintGroup = (MappingHintGroupType) hintElement.eContainer();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hintGroup = (MappingHintGroupType) hintElement.eContainer().eContainer();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;// We do not need to handle deactivated Mappings/MappingHintGroups&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;//&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if(hintGroup instanceof DeactivatableElement &amp;&amp; ((DeactivatableElement) hintGroup).isDeactivated() ||&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;hintGroup.eContainer() instanceof DeactivatableElement &amp;&amp; ((DeactivatableElement) hintGroup.eContainer()).isDeactivated()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;continue;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;/* &#xD;&#xA;&#x9;&#x9;&#x9;&#x9; * check if the hint group or its parent mapping equals the section that we just added the concrete elements to or&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; * if we are dealing with a model ContainerSelectorTargetAttribute&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; */&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if(setting.getEStructuralFeature().equals(StructurePackageImpl.eINSTANCE.getDynamicSourceElement_Source()) &amp;&amp; &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;setting.getEObject() instanceof ContainerSelectorTargetAttribute) {&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;// in this case, we must not simply redirect but we create a new ContainerSelectorTargetAttribute&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ContainerSelectorTargetAttribute original = (ContainerSelectorTargetAttribute) setting.getEObject();&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for (EObject concreteTargetSectionAttribute : abstractToConcreteElementMap.get(referencedObject)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ContainerSelectorTargetAttribute copy = &lt;%pamtram.mapping.impl.MappingFactoryImpl%>.eINSTANCE.createContainerSelectorTargetAttribute();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;copy.setName(original.getName());&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;copy.getModifiers().addAll(original.getModifiers());&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;copy.setSource((TargetSectionAttribute) concreteTargetSectionAttribute);&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;((ContainerSelector) (setting.getEObject().eContainer())).getTargetAttributes().add(copy);&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;mchTargetAttributesToDelete.add((ContainerSelectorTargetAttribute) setting.getEObject());&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;for (ContainerSelectorTargetAttribute mchTargetAttribute : mchTargetAttributesToDelete) {&#xD;&#xA;&#x9;&#x9;&#x9;EcoreUtil.delete(mchTargetAttribute);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;/*&#xD;&#xA; * Finally, we can copy the abstract hint groups&#xD;&#xA; */&#xD;&#xA;&#xD;&#xA;// collect each abstract hint group as well as the concrete hint groups that reference them&#xD;&#xA;HashMap&lt;MappingHintGroupType, LinkedList&lt;MappingHintGroupType>> abstractToConcreteHintGroupMap = new HashMap&lt;>();&#xD;&#xA;Map&lt;EObject, Collection&lt;Setting>> mappingSettings = EcoreUtil.CrossReferencer.find(getActiveMappings());&#xD;&#xA;for (EObject element : mappingSettings.keySet()) {&#xD;&#xA;&#x9;if(element instanceof MappingHintGroupType &amp;&amp; ((Mapping)(element.eContainer())).isAbstract()) {&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;// We do not need to handle deactivated MappingHintGroups&#xD;&#xA;&#x9;&#x9;//&#xD;&#xA;&#x9;&#x9;if(element instanceof DeactivatableElement &amp;&amp; ((DeactivatableElement) element).isDeactivated() ||&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;element.eContainer() instanceof DeactivatableElement &amp;&amp; ((DeactivatableElement) element.eContainer()).isDeactivated()) {&#xD;&#xA;&#x9;&#x9;&#x9;continue;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;LinkedList&lt;MappingHintGroupType> concreteHintGroups = new LinkedList&lt;>();&#xD;&#xA;&#x9;&#x9;for (Setting setting : mappingSettings.get(element)) {&#xD;&#xA;&#x9;&#x9;&#x9;if(setting.getEStructuralFeature().equals(&lt;%pamtram.mapping.impl.MappingPackageImpl%>.eINSTANCE.getMappingHintGroupType_Extend())) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;// only copy hints to activated hint groups&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if((setting.getEObject() instanceof DeactivatableElement &amp;&amp; ((DeactivatableElement) setting.getEObject()).isDeactivated()) ||&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(setting.getEObject().eContainer() instanceof DeactivatableElement &amp;&amp; ((DeactivatableElement) setting.getEObject().eContainer()).isDeactivated())) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;continue;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} else {&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;concreteHintGroups.add((MappingHintGroupType) setting.getEObject());&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;abstractToConcreteHintGroupMap.put((MappingHintGroupType) element, concreteHintGroups);&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// copy the hints to the concrete hint groups&#xD;&#xA;for (MappingHintGroupType abstractHintGroup : abstractToConcreteHintGroupMap.keySet()) {&#xD;&#xA;&#x9;for (MappingHintGroupType concreteHintGroup : abstractToConcreteHintGroupMap.get(abstractHintGroup)) {&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;Collection&lt;MappingHintBaseType> hintsToCopy = new BasicEList&lt;>();&#xD;&#xA;&#x9;&#x9;/*&#xD;&#xA;&#x9;&#x9; * Collect all hints that will get copied. Those are all mapping hints (including ContainerSelectors) that are not&#xD;&#xA;&#x9;&#x9; * 'overwritten' by hints of the concrete HintGroup.&#xD;&#xA;&#x9;&#x9; */&#xD;&#xA;&#x9;&#x9;for (MappingHint abstractHint : abstractHintGroup.getMappingHints()) {&#xD;&#xA;&#x9;&#x9;&#x9;EObject hintTarget = null;&#xD;&#xA;&#x9;&#x9;&#x9;if(abstractHint instanceof AttributeMapping) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;hintTarget = ((AttributeMapping) abstractHint).getTarget();&#xD;&#xA;&#x9;&#x9;&#x9;} else if(abstractHint instanceof ReferenceTargetSelector) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;hintTarget = ((ReferenceTargetSelector) abstractHint).getAffectedReference();&#xD;&#xA;&#x9;&#x9;&#x9;} else if(abstractHint instanceof CardinalityMapping) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;hintTarget = ((CardinalityMapping) abstractHint).getTarget();&#xD;&#xA;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;throw new RuntimeException(&quot;Unsupported hint type '&quot; + abstractHint.eClass().getName() + &quot;' in HintGroup '&quot; + &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;abstractHintGroup.getName() + &quot;': These kind of hints are not supported yet in abstract HintGroups!&quot;);&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;if(abstractToConcreteElementMap.get(hintTarget) == null || abstractToConcreteElementMap.get(hintTarget).isEmpty() || concreteHintGroup.getMappingHints().isEmpty() || &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EcoreUtil.UsageCrossReferencer.findAll(abstractToConcreteElementMap.get(hintTarget), concreteHintGroup.getMappingHints()).isEmpty()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;hintsToCopy.add(abstractHint);&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;// model connection hints need to be handled separately&#xD;&#xA;&#x9;&#x9;if(abstractHintGroup instanceof MappingHintGroup &amp;&amp; concreteHintGroup instanceof MappingHintGroup &amp;&amp; &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;((MappingHintGroup) concreteHintGroup).getContainerSelector() == null) {&#xD;&#xA;&#x9;&#x9;&#x9;hintsToCopy.add(((MappingHintGroup) abstractHintGroup).getContainerSelector());&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;Collection&lt;MappingHintBaseType> copiedHints = EcoreUtil.copyAll(hintsToCopy);&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;/* &#xD;&#xA;&#x9;&#x9; * make sure that all references to elements from the abstract sections are redirected to the concrete sections&#xD;&#xA;&#x9;&#x9; * that we created earlier&#xD;&#xA;&#x9;&#x9; */&#xD;&#xA;&#x9;&#x9;for (MappingHintBaseType copiedHint : copiedHints) {&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;/* &#xD;&#xA;&#x9;&#x9;&#x9; * these are the references from the copied hint (that will get added to the concrete hint group) to elements from&#xD;&#xA;&#x9;&#x9;&#x9; * abstract sections&#xD;&#xA;&#x9;&#x9;&#x9; */&#xD;&#xA;&#x9;&#x9;&#x9;Map&lt;EObject, Collection&lt;Setting>> refsToAbstractSection = EcoreUtil.UsageCrossReferencer.findAll(abstractToConcreteElementMap.keySet(), copiedHint);&#xD;&#xA;&#x9;&#x9;&#x9;for (EObject referencedObject : refsToAbstractSection.keySet()) {&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;/*&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; * based on the type of hint element that we are handling (local or external), source and target &#xD;&#xA;&#x9;&#x9;&#x9;&#x9; * sections or their containers are checked&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; */&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;boolean local = true;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if(refsToAbstractSection.get(referencedObject).size() > 1) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;throw new RuntimeException(&quot;Internal Error! The hint '&quot; + copiedHint.getName() + &quot;' in the hint group '&quot; + abstractHintGroup.getName() + &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;' holds multiple references to the same object of an abstract section ('&quot; + referencedObject + &quot;'.&quot;);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if(refsToAbstractSection.get(referencedObject).iterator().next().getEObject() instanceof &lt;%pamtram.structure.ExternalDynamicSourceElement%>) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;local = false;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ArrayList&lt;Section> sourceAndTargetSections = new ArrayList&lt;>();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;SourceSection sourceSection = ((Mapping) concreteHintGroup.eContainer()).getSourceSection();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if(local) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;sourceAndTargetSections.add(sourceSection);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;while (sourceSection.getContainer() != null) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sourceSection = sourceSection.getContainer().getContainingSection();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sourceAndTargetSections.add(sourceSection);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;TargetSection targetSection = concreteHintGroup.getTargetSection();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if(local) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;sourceAndTargetSections.add(targetSection);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;while (targetSection.getContainer() != null) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;targetSection = targetSection.getContainer().getContainingSection();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sourceAndTargetSections.add(targetSection);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;/* &#xD;&#xA;&#x9;&#x9;&#x9;&#x9; * these are possible targets for the redirection of references to the referenced object&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; */&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;LinkedList&lt;EObject> possibleTargets = abstractToConcreteElementMap.get(referencedObject);&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;boolean found = false;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;EObject target = null; // this will contain the new value for the reference&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;for (EObject possibleTarget : possibleTargets) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Section containingSection = ((MetaModelElement) possibleTarget).getContainingSection();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(sourceAndTargetSections.contains(containingSection)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(found == false ) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;found = true;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;target = possibleTarget;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// this should not happen, should it?&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;throw new RuntimeException(&quot;Internal error! Multiple targets found for redirection of element '&quot; + referencedObject + &quot;' in.&quot;);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if(found == false) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;throw new RuntimeException(&quot;Internal error! No target found for redirection of element '&quot; + referencedObject + &quot;'.&quot;);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;for (Setting setting : refsToAbstractSection.get(referencedObject)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;setting.set(target);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;// Finally, we add the copied hints to the concrete hint group&#xD;&#xA;&#x9;&#x9;for (MappingHintBaseType copiedHint : copiedHints) {&#xD;&#xA;&#x9;&#x9;&#x9;if(copiedHint instanceof ContainerSelector) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;((MappingHintGroup) concreteHintGroup).setContainerSelector((ContainerSelector) copiedHint);&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;concreteHintGroup.getMappingHints().add((MappingHint) copiedHint);&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;/*&#xD;&#xA; * At the end, we clear the values of the 'extend' references of the concrete elements as these&#xD;&#xA; * are no longer needed.&#xD;&#xA; */&#xD;&#xA;for (Entry&lt;Section, LinkedList&lt;Section>> entry : abstractToConcreteSectionMap.entrySet()) {&#xD;&#xA;&#x9;for (Section concreteSection : entry.getValue()) {&#xD;&#xA;&#x9;&#x9;concreteSection.getExtend().remove(entry.getKey());&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;for (Entry&lt;MappingHintGroupType, LinkedList&lt;MappingHintGroupType>> entry : abstractToConcreteHintGroupMap.entrySet()) {&#xD;&#xA;&#x9;for (MappingHintGroupType concreteHintGroup : entry.getValue()) {&#xD;&#xA;&#x9;&#x9;concreteHintGroup.getExtend().remove(entry.getKey());&#xD;&#xA;&#x9;}&#xD;&#xA;}"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="sourceSectionModels" upperBound="-1"
        eType="#//SourceSectionModel" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="sharedSourceSectionModels"
        upperBound="-1" eType="#//SourceSectionModel"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="targetSectionModels" upperBound="-1"
        eType="#//TargetSectionModel" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="sharedTargetSectionModels"
        upperBound="-1" eType="#//TargetSectionModel"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="mappingModels" upperBound="-1"
        eType="#//MappingModel" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="sharedMappingModels" upperBound="-1"
        eType="#//MappingModel"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="sourceSections" upperBound="-1"
        eType="#//structure/source/SourceSection" changeable="false" volatile="true"
        transient="true" derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="get" value="List&lt;SourceSection> sourceSections = Stream&#xD;&#xA;&#x9;&#x9;.concat(this.getSourceSectionModels().parallelStream(),&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;this.getSharedSourceSectionModels().parallelStream())&#xD;&#xA;&#x9;&#x9;.flatMap(s -> s.getSections().parallelStream()).collect(Collectors.toList());&#xD;&#xA;return new EcoreEList.UnmodifiableEList&lt;>(this, PamtramPackage.Literals.PAM_TRA_M__SOURCE_SECTIONS,&#xD;&#xA;&#x9;&#x9;sourceSections.size(), sourceSections.toArray());"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="targetSections" upperBound="-1"
        eType="#//structure/target/TargetSection" changeable="false" volatile="true"
        transient="true" derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="get" value="List&lt;TargetSection> targetSections = Stream&#xD;&#xA;&#x9;&#x9;.concat(this.getTargetSectionModels().parallelStream(),&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;this.getSharedTargetSectionModels().parallelStream())&#xD;&#xA;&#x9;&#x9;.flatMap(s -> s.getSections().parallelStream()).collect(Collectors.toList());&#xD;&#xA;return new EcoreEList.UnmodifiableEList&lt;>(this, PamtramPackage.Literals.PAM_TRA_M__TARGET_SECTIONS,&#xD;&#xA;&#x9;&#x9;targetSections.size(), targetSections.toArray());"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="mappings" upperBound="-1"
        eType="#//mapping/Mapping" changeable="false" volatile="true" transient="true"
        derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="get" value="&lt;%java.util.List%>&lt;&lt;%pamtram.mapping.Mapping%>> mappings = &lt;%java.util.stream.Stream%>.concat(this.getMappingModels().parallelStream(), this.getSharedMappingModels().parallelStream())&#xD;&#xA;&#x9;&#x9;.flatMap(s -> s.getMappings().parallelStream()).collect(Collectors.toList());&#xD;&#xA;return new &lt;%org.eclipse.emf.ecore.util.EcoreEList%>.UnmodifiableEList&lt;>(this, &lt;%pamtram.PamtramPackage%>.Literals.PAM_TRA_M__MAPPINGS,&#xD;&#xA;&#x9;&#x9;mappings.size(), mappings.toArray());"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="activeMappings" upperBound="-1"
        eType="#//mapping/Mapping" changeable="false" volatile="true" transient="true"
        derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="get" value="List&lt;Mapping> mappings = &lt;%java.util.stream.Stream%>.concat(this.getMappingModels().parallelStream(), this.getSharedMappingModels().parallelStream()).filter(m -> !m.isDeactivated())&#xD;&#xA;&#x9;&#x9;.flatMap(s -> s.getActiveMappings().parallelStream()).collect(Collectors.toList());&#xD;&#xA;return new EcoreEList.UnmodifiableEList&lt;>(this, PamtramPackage.Literals.PAM_TRA_M__ACTIVE_MAPPINGS,&#xD;&#xA;&#x9;&#x9;mappings.size(), mappings.toArray());"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="globalValues" upperBound="-1"
        eType="#//FixedValue" changeable="false" volatile="true" transient="true"
        derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="get" value="&lt;%java.util.List%>&lt;FixedValue> globalValues = &lt;%java.util.stream.Stream%>.concat(this.getMappingModels().parallelStream(), this.getSharedMappingModels().parallelStream())&#xD;&#xA;&#x9;&#x9;.flatMap(s -> s.getGlobalValues().parallelStream()).collect(&lt;%java.util.stream.Collectors%>.toList());&#xD;&#xA;return new &lt;%org.eclipse.emf.ecore.util.EcoreEList%>.UnmodifiableEList&lt;>(this, &lt;%pamtram.PamtramPackage%>.Literals.PAM_TRA_M__GLOBAL_VALUES,&#xD;&#xA;&#x9;&#x9;globalValues.size(), globalValues.toArray());"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="modifierSets" upperBound="-1"
        eType="#//mapping/modifier/ValueModifierSet" changeable="false" volatile="true"
        transient="true" derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="get" value="&lt;%java.util.List%>&lt;&lt;%pamtram.mapping.modifier.ValueModifierSet%>> modifierSets = &lt;%java.util.stream.Stream%>.concat(this.getMappingModels().parallelStream(), this.getSharedMappingModels().parallelStream())&#xD;&#xA;&#x9;&#x9;.flatMap(s -> s.getModifierSets().parallelStream()).collect(&lt;%java.util.stream.Collectors%>.toList());&#xD;&#xA;return new &lt;%org.eclipse.emf.ecore.util.EcoreEList%>.UnmodifiableEList&lt;>(this, &lt;%pamtram.PamtramPackage%>.Literals.PAM_TRA_M__MODIFIER_SETS,&#xD;&#xA;&#x9;&#x9;modifierSets.size(), modifierSets.toArray());"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="conditionModels" upperBound="-1"
        eType="#//ConditionModel" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="sharedConditionModels"
        upperBound="-1" eType="#//ConditionModel"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="SectionModel" abstract="true" eSuperTypes="#//NamedElement">
    <eTypeParameters name="S">
      <eBounds eClassifier="#//structure/generic/Section">
        <eTypeArguments eTypeParameter="#//SectionModel/S"/>
        <eTypeArguments eTypeParameter="#//SectionModel/C"/>
        <eTypeArguments eTypeParameter="#//SectionModel/R"/>
        <eTypeArguments eTypeParameter="#//SectionModel/A"/>
      </eBounds>
    </eTypeParameters>
    <eTypeParameters name="C">
      <eBounds eClassifier="#//structure/generic/Class">
        <eTypeArguments eTypeParameter="#//SectionModel/S"/>
        <eTypeArguments eTypeParameter="#//SectionModel/C"/>
        <eTypeArguments eTypeParameter="#//SectionModel/R"/>
        <eTypeArguments eTypeParameter="#//SectionModel/A"/>
      </eBounds>
    </eTypeParameters>
    <eTypeParameters name="R">
      <eBounds eClassifier="#//structure/generic/Reference">
        <eTypeArguments eTypeParameter="#//SectionModel/S"/>
        <eTypeArguments eTypeParameter="#//SectionModel/C"/>
        <eTypeArguments eTypeParameter="#//SectionModel/R"/>
        <eTypeArguments eTypeParameter="#//SectionModel/A"/>
      </eBounds>
    </eTypeParameters>
    <eTypeParameters name="A">
      <eBounds eClassifier="#//structure/generic/Attribute">
        <eTypeArguments eTypeParameter="#//SectionModel/S"/>
        <eTypeArguments eTypeParameter="#//SectionModel/C"/>
        <eTypeArguments eTypeParameter="#//SectionModel/R"/>
        <eTypeArguments eTypeParameter="#//SectionModel/A"/>
      </eBounds>
    </eTypeParameters>
    <eStructuralFeatures xsi:type="ecore:EReference" name="metaModelPackage" lowerBound="1"
        eType="ecore:EClass http://www.eclipse.org/emf/2002/Ecore#//EPackage"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="sections" upperBound="-1"
        containment="true">
      <eGenericType eTypeParameter="#//SectionModel/S"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="SourceSectionModel">
    <eGenericSuperTypes eClassifier="#//SectionModel">
      <eTypeArguments eClassifier="#//structure/source/SourceSection"/>
      <eTypeArguments eClassifier="#//structure/source/SourceSectionClass"/>
      <eTypeArguments eClassifier="#//structure/source/SourceSectionReference"/>
      <eTypeArguments eClassifier="#//structure/source/SourceSectionAttribute"/>
    </eGenericSuperTypes>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="TargetSectionModel">
    <eStructuralFeatures xsi:type="ecore:EReference" name="libraryElements" upperBound="-1"
        eType="#//structure/library/LibraryEntry" containment="true"/>
    <eGenericSuperTypes eClassifier="#//SectionModel">
      <eTypeArguments eClassifier="#//structure/target/TargetSection"/>
      <eTypeArguments eClassifier="#//structure/target/TargetSectionClass"/>
      <eTypeArguments eClassifier="#//structure/target/TargetSectionReference"/>
      <eTypeArguments eClassifier="#//structure/target/TargetSectionAttribute"/>
    </eGenericSuperTypes>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="MappingModel" eSuperTypes="#//NamedElement #//DeactivatableElement #//ConditionalElement">
    <eStructuralFeatures xsi:type="ecore:EReference" name="mappings" lowerBound="1"
        upperBound="-1" eType="#//mapping/Mapping" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="modifierSets" upperBound="-1"
        eType="#//mapping/modifier/ValueModifierSet" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="globalValues" upperBound="-1"
        eType="#//FixedValue" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="activeMappings" upperBound="-1"
        eType="#//mapping/Mapping" changeable="false" volatile="true" transient="true"
        derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="get" value="&lt;%java.util.List%>&lt;Mapping> mappings = this.getMappings().parallelStream().filter(m -> !m.isDeactivated() &amp;&amp; !m.isAbstract()).collect(&lt;%java.util.stream.Collectors%>.toList());&#xD;&#xA;return new &lt;%org.eclipse.emf.ecore.util.EcoreEList%>.UnmodifiableEList&lt;>(this, &lt;%pamtram.PamtramPackage%>.Literals.MAPPING_MODEL__ACTIVE_MAPPINGS,&#xD;&#xA;&#x9;&#x9;mappings.size(), mappings.toArray());"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ConditionalElement" abstract="true">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="eitherModelOrReferCondition referenceOnlyConditionsFromConditionModel"/>
    </eAnnotations>
    <eOperations name="validateEitherModelOrReferCondition" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="&#xD;&#xA;boolean result = !(this.getLocalCondition() != null &amp;&amp; this.getSharedCondition() != null);&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;Please specify at most one (local or shared) condition!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;PamtramValidator.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;%pamtram.util.PamtramValidator%>.CONDITIONAL_ELEMENT__VALIDATE_EITHER_MODEL_OR_REFER_CONDITION,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, PamtramPackage.Literals.CONDITIONAL_ELEMENT }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      <eParameters name="context">
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments/>
          <eTypeArguments/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="validateReferenceOnlyConditionsFromConditionModel" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="&#xD;&#xA;boolean result = this.getSharedCondition() == null || this.getSharedCondition().eContainer() instanceof &lt;%pamtram.ConditionModel%>;&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;It is only allowed to reference shared conditions that are model inside the ConditionModel!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;PamtramValidator.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;%pamtram.util.PamtramValidator%>.CONDITIONAL_ELEMENT__VALIDATE_REFERENCE_ONLY_CONDITIONS_FROM_CONDITION_MODEL,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, PamtramPackage.Literals.CONDITIONAL_ELEMENT__SHARED_CONDITION }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      <eParameters name="context">
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments/>
          <eTypeArguments/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="localCondition" eType="#//condition/ComplexCondition"
        containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="sharedCondition" eType="#//condition/ComplexCondition"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ConditionModel" eSuperTypes="#//NamedElement">
    <eStructuralFeatures xsi:type="ecore:EReference" name="conditions" upperBound="-1"
        eType="#//condition/ComplexCondition" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ExpressionElement" abstract="true">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="expression" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString" defaultValueLiteral=""/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ModifiableElement" abstract="true">
    <eStructuralFeatures xsi:type="ecore:EReference" name="modifiers" upperBound="-1"
        eType="#//mapping/modifier/ValueModifierSet"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="FixedValue" eSuperTypes="#//NamedElement #//mapping/AttributeMappingSourceInterface #//structure/InstanceSelectorSourceInterface #//structure/constraint/ValueConstraintSourceInterface #//mapping/CardinalityMappingSourceInterface">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
  </eClassifiers>
  <eSubpackages name="structure" nsURI="http://mfreund.de/pamtram/structure" nsPrefix="structure">
    <eAnnotations source="http://www.eclipse.org/OCL/Import">
      <details key="ecore" value="http://www.eclipse.org/emf/2002/Ecore"/>
      <details key="genlib" value="http://www.et.tu-dresden.de/ifa/agtele/genlib"/>
    </eAnnotations>
    <eClassifiers xsi:type="ecore:EClass" name="InstanceSelector" abstract="true"
        eSuperTypes="#//ExpressionElement #//ModifiableElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="constraints" value="noModifiedAttributeElementTypesInConditionModelConditions"/>
      </eAnnotations>
      <eOperations name="validateNoModifiedAttributeElementTypesInConditionModelConditions"
          eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#xD;&#xA;boolean result = this.eContainer() instanceof &lt;%pamtram.condition.ComplexCondition%> &amp;&amp; ((ComplexCondition) this.eContainer()).isConditionModelCondition() ? this.getSourceElements().parallelStream().noneMatch(s -> s instanceof pamtram.structure.DynamicSourceElement) : true;&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;ModifiedAttributeElementTypes are not allowed as part of ConditionModelConditions!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.structure.util.StructureValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;StructureValidator.INSTANCE_SELECTOR__VALIDATE_NO_MODIFIED_ATTRIBUTE_ELEMENT_TYPES_IN_CONDITION_MODEL_CONDITIONS,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.structure.StructurePackage%>.Literals.INSTANCE_SELECTOR__SOURCE_ELEMENTS }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
        <eParameters name="context">
          <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
            <eTypeArguments/>
            <eTypeArguments/>
          </eGenericType>
        </eParameters>
      </eOperations>
      <eOperations name="getLocalSourceElements" unique="false" upperBound="-1" eType="#//structure/InstanceSelectorSourceElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="return new &lt;%org.eclipse.emf.common.util.BasicEList%>&lt;>(&#xD;&#xA;&#x9;&#x9;this.getSourceElements().stream().filter(i -> i instanceof InstanceSelectorSourceElement)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;.map(i -> (InstanceSelectorSourceElement) i).collect(&lt;%java.util.stream.Collectors%>.toList()));"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="getExternalSourceElements" unique="false" upperBound="-1"
          eType="#//structure/InstanceSelectorExternalSourceElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="return new &lt;%org.eclipse.emf.common.util.BasicEList%>&lt;>(&#xD;&#xA;&#x9;&#x9;this.getSourceElements().stream().filter(i -> i instanceof InstanceSelectorExternalSourceElement)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;.map(i -> (InstanceSelectorExternalSourceElement) i).collect(&lt;%java.util.stream.Collectors%>.toList()));"/>
        </eAnnotations>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="sourceElements" upperBound="-1"
          eType="#//structure/InstanceSelectorSourceInterface" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="SourceInstanceSelector" eSuperTypes="#//structure/InstanceSelector">
      <eStructuralFeatures xsi:type="ecore:EReference" name="target" lowerBound="1"
          eType="#//structure/source/SourceSectionAttribute"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="InstanceSelectorSourceInterface" abstract="true"
        interface="true" eSuperTypes="#//mapping/MappingHintSourceInterface"/>
    <eClassifiers xsi:type="ecore:EClass" name="InstanceSelectorSourceElement">
      <eGenericSuperTypes eClassifier="#//structure/LocalDynamicSourceElement">
        <eTypeArguments eClassifier="#//structure/source/SourceSection"/>
        <eTypeArguments eClassifier="#//structure/source/SourceSectionClass"/>
        <eTypeArguments eClassifier="#//structure/source/SourceSectionReference"/>
        <eTypeArguments eClassifier="#//structure/source/SourceSectionAttribute"/>
      </eGenericSuperTypes>
      <eGenericSuperTypes eClassifier="#//structure/InstanceSelectorSourceInterface"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="InstanceSelectorExternalSourceElement">
      <eGenericSuperTypes eClassifier="#//structure/ExternalDynamicSourceElement">
        <eTypeArguments eClassifier="#//structure/source/SourceSection"/>
        <eTypeArguments eClassifier="#//structure/source/SourceSectionClass"/>
        <eTypeArguments eClassifier="#//structure/source/SourceSectionReference"/>
        <eTypeArguments eClassifier="#//structure/source/SourceSectionAttribute"/>
      </eGenericSuperTypes>
      <eGenericSuperTypes eClassifier="#//structure/InstanceSelectorSourceInterface"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="InstanceSelectorGlobalSourceElement">
      <eGenericSuperTypes eClassifier="#//structure/GlobalDynamicSourceElement">
        <eTypeArguments eClassifier="#//structure/source/SourceSection"/>
        <eTypeArguments eClassifier="#//structure/source/SourceSectionClass"/>
        <eTypeArguments eClassifier="#//structure/source/SourceSectionReference"/>
        <eTypeArguments eClassifier="#//structure/source/SourceSectionAttribute"/>
      </eGenericSuperTypes>
      <eGenericSuperTypes eClassifier="#//structure/InstanceSelectorSourceInterface"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="DynamicSourceElement" abstract="true"
        eSuperTypes="#//NamedElement #//ModifiableElement">
      <eTypeParameters name="S">
        <eBounds eClassifier="#//structure/generic/Section">
          <eTypeArguments eTypeParameter="#//structure/DynamicSourceElement/S"/>
          <eTypeArguments eTypeParameter="#//structure/DynamicSourceElement/C"/>
          <eTypeArguments eTypeParameter="#//structure/DynamicSourceElement/R"/>
          <eTypeArguments eTypeParameter="#//structure/DynamicSourceElement/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="C">
        <eBounds eClassifier="#//structure/generic/Class">
          <eTypeArguments eTypeParameter="#//structure/DynamicSourceElement/S"/>
          <eTypeArguments eTypeParameter="#//structure/DynamicSourceElement/C"/>
          <eTypeArguments eTypeParameter="#//structure/DynamicSourceElement/R"/>
          <eTypeArguments eTypeParameter="#//structure/DynamicSourceElement/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="R">
        <eBounds eClassifier="#//structure/generic/Reference">
          <eTypeArguments eTypeParameter="#//structure/DynamicSourceElement/S"/>
          <eTypeArguments eTypeParameter="#//structure/DynamicSourceElement/C"/>
          <eTypeArguments eTypeParameter="#//structure/DynamicSourceElement/R"/>
          <eTypeArguments eTypeParameter="#//structure/DynamicSourceElement/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="A">
        <eBounds eClassifier="#//structure/generic/Attribute">
          <eTypeArguments eTypeParameter="#//structure/DynamicSourceElement/S"/>
          <eTypeArguments eTypeParameter="#//structure/DynamicSourceElement/C"/>
          <eTypeArguments eTypeParameter="#//structure/DynamicSourceElement/R"/>
          <eTypeArguments eTypeParameter="#//structure/DynamicSourceElement/A"/>
        </eBounds>
      </eTypeParameters>
      <eOperations name="getMappingHintGroup" unique="false" lowerBound="1" eType="#//NamedElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="EObject ret = this.eContainer;&#xD;&#xA;while(!(ret instanceof MappingHintGroupType || ret instanceof InstantiableMappingHintGroup)) {&#xD;&#xA;&#x9;ret = ret.eContainer();&#xD;&#xA;&#x9;if(ret instanceof PAMTraM) {&#xD;&#xA;&#x9;&#x9;// something went wrong&#xD;&#xA;&#x9;&#x9;return null;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return (NamedElement) ret;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="getMapping" unique="false" lowerBound="1" eType="#//mapping/Mapping">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="EObject ret = this.eContainer;&#xD;&#xA;while(!(ret instanceof Mapping)) {&#xD;&#xA;&#x9;ret = ret.eContainer();&#xD;&#xA;&#x9;if(ret instanceof PAMTraM) {&#xD;&#xA;&#x9;&#x9;// something went wrong&#xD;&#xA;&#x9;&#x9;return null;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return (Mapping) ret;"/>
        </eAnnotations>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="source" lowerBound="1">
        <eGenericType eTypeParameter="#//structure/DynamicSourceElement/A"/>
      </eStructuralFeatures>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="LocalDynamicSourceElement" abstract="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="constraints" value="sourceAttributeMatchesSectionOrContainedSection"/>
      </eAnnotations>
      <eTypeParameters name="S">
        <eBounds eClassifier="#//structure/generic/Section">
          <eTypeArguments eTypeParameter="#//structure/LocalDynamicSourceElement/S"/>
          <eTypeArguments eTypeParameter="#//structure/LocalDynamicSourceElement/C"/>
          <eTypeArguments eTypeParameter="#//structure/LocalDynamicSourceElement/R"/>
          <eTypeArguments eTypeParameter="#//structure/LocalDynamicSourceElement/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="C">
        <eBounds eClassifier="#//structure/generic/Class">
          <eTypeArguments eTypeParameter="#//structure/LocalDynamicSourceElement/S"/>
          <eTypeArguments eTypeParameter="#//structure/LocalDynamicSourceElement/C"/>
          <eTypeArguments eTypeParameter="#//structure/LocalDynamicSourceElement/R"/>
          <eTypeArguments eTypeParameter="#//structure/LocalDynamicSourceElement/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="R">
        <eBounds eClassifier="#//structure/generic/Reference">
          <eTypeArguments eTypeParameter="#//structure/LocalDynamicSourceElement/S"/>
          <eTypeArguments eTypeParameter="#//structure/LocalDynamicSourceElement/C"/>
          <eTypeArguments eTypeParameter="#//structure/LocalDynamicSourceElement/R"/>
          <eTypeArguments eTypeParameter="#//structure/LocalDynamicSourceElement/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="A">
        <eBounds eClassifier="#//structure/generic/Attribute">
          <eTypeArguments eTypeParameter="#//structure/LocalDynamicSourceElement/S"/>
          <eTypeArguments eTypeParameter="#//structure/LocalDynamicSourceElement/C"/>
          <eTypeArguments eTypeParameter="#//structure/LocalDynamicSourceElement/R"/>
          <eTypeArguments eTypeParameter="#//structure/LocalDynamicSourceElement/A"/>
        </eBounds>
      </eTypeParameters>
      <eOperations name="validateSourceAttributeMatchesSectionOrContainedSection"
          eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="if(this.getMapping() == null || this.source == null || this.getMapping().getSourceSection() == null&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;|| !(this.source.getContainingSection() instanceof &lt;%pamtram.structure.source.SourceSection%>)) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;SourceSection sourceSection = this.getMapping().getSourceSection();&#xD;&#xA;SourceSection containingSourceSection = (SourceSection) this.source.getContainingSection();&#xD;&#xA;&#xD;&#xA;boolean result = sourceSection == containingSourceSection &#xD;&#xA;&#x9;&#x9;|| containingSourceSection.isReferencedBy(sourceSection, null)&#xD;&#xA;&#x9;&#x9;|| sourceSection.getExtend().parallelStream().filter(e -> e.equals(containingSourceSection)).findAny().isPresent()&#xD;&#xA;&#x9;&#x9;|| sourceSection.getExtend().parallelStream().filter(e -> containingSourceSection.isReferencedBy(e, null)).findAny().isPresent();&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;String errorMessage = &quot;The source attribute '&quot; +&#xD;&#xA;&#x9;&#x9;&#x9; this.source.getName() + &quot;' is not referenced by the source section of the parent mapping '&quot; +&#xD;&#xA;&#x9;&#x9;&#x9; sourceSection.getName() + &quot;' or in one of its extended sections/sub-sections!'&quot;;&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;diagnostics.add&#xD;&#xA;&#x9;&#x9;(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9; &lt;%pamtram.structure.util.StructureValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9; StructureValidator.LOCAL_DYNAMIC_SOURCE_ELEMENT__VALIDATE_SOURCE_ATTRIBUTE_MATCHES_SECTION_OR_CONTAINED_SECTION,&#xD;&#xA;&#x9;&#x9;&#x9; errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9; new Object [] { this, &lt;%pamtram.structure.StructurePackage%>.Literals.DYNAMIC_SOURCE_ELEMENT__SOURCE }));&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
        <eParameters name="context">
          <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
            <eTypeArguments/>
            <eTypeArguments/>
          </eGenericType>
        </eParameters>
      </eOperations>
      <eGenericSuperTypes eClassifier="#//structure/DynamicSourceElement">
        <eTypeArguments eTypeParameter="#//structure/LocalDynamicSourceElement/S"/>
        <eTypeArguments eTypeParameter="#//structure/LocalDynamicSourceElement/C"/>
        <eTypeArguments eTypeParameter="#//structure/LocalDynamicSourceElement/R"/>
        <eTypeArguments eTypeParameter="#//structure/LocalDynamicSourceElement/A"/>
      </eGenericSuperTypes>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ExternalDynamicSourceElement" abstract="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="constraints" value="sourceAttributeMatchesContainerSection"/>
      </eAnnotations>
      <eTypeParameters name="S">
        <eBounds eClassifier="#//structure/generic/Section">
          <eTypeArguments eTypeParameter="#//structure/ExternalDynamicSourceElement/S"/>
          <eTypeArguments eTypeParameter="#//structure/ExternalDynamicSourceElement/C"/>
          <eTypeArguments eTypeParameter="#//structure/ExternalDynamicSourceElement/R"/>
          <eTypeArguments eTypeParameter="#//structure/ExternalDynamicSourceElement/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="C">
        <eBounds eClassifier="#//structure/generic/Class">
          <eTypeArguments eTypeParameter="#//structure/ExternalDynamicSourceElement/S"/>
          <eTypeArguments eTypeParameter="#//structure/ExternalDynamicSourceElement/C"/>
          <eTypeArguments eTypeParameter="#//structure/ExternalDynamicSourceElement/R"/>
          <eTypeArguments eTypeParameter="#//structure/ExternalDynamicSourceElement/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="R">
        <eBounds eClassifier="#//structure/generic/Reference">
          <eTypeArguments eTypeParameter="#//structure/ExternalDynamicSourceElement/S"/>
          <eTypeArguments eTypeParameter="#//structure/ExternalDynamicSourceElement/C"/>
          <eTypeArguments eTypeParameter="#//structure/ExternalDynamicSourceElement/R"/>
          <eTypeArguments eTypeParameter="#//structure/ExternalDynamicSourceElement/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="A">
        <eBounds eClassifier="#//structure/generic/Attribute">
          <eTypeArguments eTypeParameter="#//structure/ExternalDynamicSourceElement/S"/>
          <eTypeArguments eTypeParameter="#//structure/ExternalDynamicSourceElement/C"/>
          <eTypeArguments eTypeParameter="#//structure/ExternalDynamicSourceElement/R"/>
          <eTypeArguments eTypeParameter="#//structure/ExternalDynamicSourceElement/A"/>
        </eBounds>
      </eTypeParameters>
      <eOperations name="validateSourceAttributeMatchesContainerSection" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="if(this.getMapping() == null || this.getSource() == null) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&lt;%pamtram.structure.source.SourceSection%> sourceSection = this.getMapping().getSourceSection();&#xD;&#xA;&#xD;&#xA;boolean result = sourceSection == null || !(this.getSource().getContainingSection() instanceof SourceSection) ? true : ((SourceSection) this.getSource().getContainingSection()).isContainerFor(sourceSection);&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;The source attribute '&quot; + this.getSource().getName() + &quot;' is not part of a container section of the source section of the parent mapping '&quot; + this.getMapping().getSourceSection().getName() + &quot;'!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.structure.util.StructureValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;StructureValidator.EXTERNAL_DYNAMIC_SOURCE_ELEMENT__VALIDATE_SOURCE_ATTRIBUTE_MATCHES_CONTAINER_SECTION,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.structure.StructurePackage%>.Literals.DYNAMIC_SOURCE_ELEMENT__SOURCE }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
        <eParameters name="context">
          <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
            <eTypeArguments/>
            <eTypeArguments/>
          </eGenericType>
        </eParameters>
      </eOperations>
      <eGenericSuperTypes eClassifier="#//structure/DynamicSourceElement">
        <eTypeArguments eTypeParameter="#//structure/ExternalDynamicSourceElement/S"/>
        <eTypeArguments eTypeParameter="#//structure/ExternalDynamicSourceElement/C"/>
        <eTypeArguments eTypeParameter="#//structure/ExternalDynamicSourceElement/R"/>
        <eTypeArguments eTypeParameter="#//structure/ExternalDynamicSourceElement/A"/>
      </eGenericSuperTypes>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="GlobalDynamicSourceElement" abstract="true">
      <eTypeParameters name="S">
        <eBounds eClassifier="#//structure/generic/Section">
          <eTypeArguments eTypeParameter="#//structure/GlobalDynamicSourceElement/S"/>
          <eTypeArguments eTypeParameter="#//structure/GlobalDynamicSourceElement/C"/>
          <eTypeArguments eTypeParameter="#//structure/GlobalDynamicSourceElement/R"/>
          <eTypeArguments eTypeParameter="#//structure/GlobalDynamicSourceElement/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="C">
        <eBounds eClassifier="#//structure/generic/Class">
          <eTypeArguments eTypeParameter="#//structure/GlobalDynamicSourceElement/S"/>
          <eTypeArguments eTypeParameter="#//structure/GlobalDynamicSourceElement/C"/>
          <eTypeArguments eTypeParameter="#//structure/GlobalDynamicSourceElement/R"/>
          <eTypeArguments eTypeParameter="#//structure/GlobalDynamicSourceElement/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="R">
        <eBounds eClassifier="#//structure/generic/Reference">
          <eTypeArguments eTypeParameter="#//structure/GlobalDynamicSourceElement/S"/>
          <eTypeArguments eTypeParameter="#//structure/GlobalDynamicSourceElement/C"/>
          <eTypeArguments eTypeParameter="#//structure/GlobalDynamicSourceElement/R"/>
          <eTypeArguments eTypeParameter="#//structure/GlobalDynamicSourceElement/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="A">
        <eBounds eClassifier="#//structure/generic/Attribute">
          <eTypeArguments eTypeParameter="#//structure/GlobalDynamicSourceElement/S"/>
          <eTypeArguments eTypeParameter="#//structure/GlobalDynamicSourceElement/C"/>
          <eTypeArguments eTypeParameter="#//structure/GlobalDynamicSourceElement/R"/>
          <eTypeArguments eTypeParameter="#//structure/GlobalDynamicSourceElement/A"/>
        </eBounds>
      </eTypeParameters>
      <eStructuralFeatures xsi:type="ecore:EReference" name="instanceSelectors" upperBound="-1"
          eType="#//structure/SourceInstanceSelector" containment="true"/>
      <eGenericSuperTypes eClassifier="#//structure/DynamicSourceElement">
        <eTypeArguments eTypeParameter="#//structure/GlobalDynamicSourceElement/S"/>
        <eTypeArguments eTypeParameter="#//structure/GlobalDynamicSourceElement/C"/>
        <eTypeArguments eTypeParameter="#//structure/GlobalDynamicSourceElement/R"/>
        <eTypeArguments eTypeParameter="#//structure/GlobalDynamicSourceElement/A"/>
      </eGenericSuperTypes>
    </eClassifiers>
    <eSubpackages name="generic" nsURI="http://mfreund.de/pamtram/structure/generic"
        nsPrefix="generic">
      <eClassifiers xsi:type="ecore:EClass" name="MetaModelElement" abstract="true"
          eSuperTypes="#//NamedElement">
        <eTypeParameters name="S">
          <eBounds eClassifier="#//structure/generic/Section">
            <eTypeArguments eTypeParameter="#//structure/generic/MetaModelElement/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/MetaModelElement/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/MetaModelElement/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/MetaModelElement/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="C">
          <eBounds eClassifier="#//structure/generic/Class">
            <eTypeArguments eTypeParameter="#//structure/generic/MetaModelElement/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/MetaModelElement/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/MetaModelElement/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/MetaModelElement/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="R">
          <eBounds eClassifier="#//structure/generic/Reference">
            <eTypeArguments eTypeParameter="#//structure/generic/MetaModelElement/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/MetaModelElement/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/MetaModelElement/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/MetaModelElement/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="A">
          <eBounds eClassifier="#//structure/generic/Attribute">
            <eTypeArguments eTypeParameter="#//structure/generic/MetaModelElement/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/MetaModelElement/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/MetaModelElement/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/MetaModelElement/A"/>
          </eBounds>
        </eTypeParameters>
        <eOperations name="getContainingSection" lowerBound="1">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="MetaModelElement&lt;S,C,R,A> element = this;&#xD;&#xA;&#xD;&#xA;// move upwards in the hierarchy&#xD;&#xA;while(element.eContainer() instanceof MetaModelElement) {&#xD;&#xA;&#x9;element = (MetaModelElement&lt;S,C,R,A>) element.eContainer();&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;if(element instanceof Section || element.eContainer() instanceof ContainerParameter) {&#xD;&#xA;&#x9;// we have found the section&#xD;&#xA;&#x9;return (S) element;&#xD;&#xA;} else if((element instanceof TargetSectionAttribute &amp;&amp; (element.eContainer() instanceof AttributeParameter || element.eContainer() instanceof ResourceParameter)) || &#xD;&#xA;&#x9;&#x9;(element instanceof TargetSectionCrossReference) &amp;&amp; element.eContainer() instanceof ExternalReferenceParameter) {&#xD;&#xA;&#x9;LibraryEntry libEntry = (LibraryEntry) element.eContainer().eContainer();&#xD;&#xA;&#x9;for (LibraryParameter&lt;?> param : libEntry.getParameters()) {&#xD;&#xA;&#x9;&#x9;//TODO if multiple container parameters exist, there might need to be additional logic&#xD;&#xA;&#x9;&#x9;if(param instanceof ContainerParameter) {&#xD;&#xA;&#x9;&#x9;&#x9;return (S) ((ContainerParameter) param).getClass_();&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;return null;&#xD;&#xA;} else  if(element instanceof VirtualTargetSectionAttribute &amp;&amp; element.eContainer() instanceof LibraryEntry) {&#xD;&#xA;&#x9;LibraryEntry libEntry = (LibraryEntry) element.eContainer();&#xD;&#xA;&#x9;for (LibraryParameter&lt;?> param : libEntry.getParameters()) {&#xD;&#xA;&#x9;&#x9;//TODO if multiple container parameters exist, there might need to be additional logic&#xD;&#xA;&#x9;&#x9;if(param instanceof ContainerParameter) {&#xD;&#xA;&#x9;&#x9;&#x9;return (S) ((ContainerParameter) param).getClass_();&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;return null;&#xD;&#xA;} else {&#xD;&#xA;&#x9;// something went wrong&#xD;&#xA;&#x9;return null;&#xD;&#xA;}"/>
          </eAnnotations>
          <eGenericType eTypeParameter="#//structure/generic/MetaModelElement/S"/>
        </eOperations>
        <eOperations name="getContainingSectionModel" lowerBound="1">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="S section = this.getContainingSection();&#xD;&#xA;&#xD;&#xA;EObject container = section.eContainer();&#xD;&#xA;while(!(container instanceof SectionModel)) {&#xD;&#xA;&#x9;// we have reached the root element&#xD;&#xA;&#x9;if(container == null) {&#xD;&#xA;&#x9;&#x9;return null;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;container = container.eContainer();&#xD;&#xA;}&#xD;&#xA;return (SectionModel&lt;S, C, R, A>) container;"/>
          </eAnnotations>
          <eGenericType eClassifier="#//SectionModel">
            <eTypeArguments eTypeParameter="#//structure/generic/MetaModelElement/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/MetaModelElement/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/MetaModelElement/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/MetaModelElement/A"/>
          </eGenericType>
        </eOperations>
        <eOperations name="isLibraryEntry" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="return (this.getContainingSection().eContainer() instanceof ContainerParameter);"/>
          </eAnnotations>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Class" abstract="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="eClassMatchesParentEReference variableCardinalityIsValid containerIsValid"/>
        </eAnnotations>
        <eTypeParameters name="S">
          <eBounds eClassifier="#//structure/generic/Section">
            <eTypeArguments eTypeParameter="#//structure/generic/Class/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Class/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Class/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Class/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="C">
          <eBounds eClassifier="#//structure/generic/Class">
            <eTypeArguments eTypeParameter="#//structure/generic/Class/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Class/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Class/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Class/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="R">
          <eBounds eClassifier="#//structure/generic/Reference">
            <eTypeArguments eTypeParameter="#//structure/generic/Class/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Class/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Class/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Class/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="A">
          <eBounds eClassifier="#//structure/generic/Attribute">
            <eTypeArguments eTypeParameter="#//structure/generic/Class/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Class/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Class/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Class/A"/>
          </eBounds>
        </eTypeParameters>
        <eOperations name="isContainerFor" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="C container = containedClass.getContainer();&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;// this means that we have reached the top level container for the 'containedClass'&#xD;&#xA;if(container == null) {&#xD;&#xA;&#x9;return false;&#xD;&#xA;// this is the container&#xD;&#xA;} else if(this.equals(container)) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;// one of the extended sections is the container&#xD;&#xA;} else if(container instanceof Section &amp;&amp; ((Section) container).getExtend().contains(this)) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;// this was not the container, so iterate up in the containment hierarchy&#xD;&#xA;} else {&#xD;&#xA;&#x9;return isContainerFor(container);&#xD;&#xA;}"/>
          </eAnnotations>
          <eParameters name="containedClass" lowerBound="1">
            <eGenericType eTypeParameter="#//structure/generic/Class/C"/>
          </eParameters>
        </eOperations>
        <eOperations name="isContainedIn" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="EList&lt;C> containedClasses = new BasicEList&lt;>();&#xD;&#xA;&#xD;&#xA;// collect all classes that are referenced by containment references&#xD;&#xA;BasicEList&lt;R> refs = new BasicEList&lt;>(containerClass.getReferences());&#xD;&#xA;if(containerClass instanceof Section) {&#xD;&#xA;&#x9;EList&lt;Section> sections = ((Section) containerClass).getExtend(); &#xD;&#xA;&#x9;for (Section s : sections) {&#xD;&#xA;&#x9;&#x9;refs.addAll(s.getReferences());&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;for (R ref : containerClass.getReferences()) {&#xD;&#xA;&#x9;if(!(ref.getEReference().isContainment())) {&#xD;&#xA;&#x9;&#x9;continue;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;if(ref instanceof CompositeReference&lt;?,?,?,?>){&#xD;&#xA;&#x9;&#x9;containedClasses.addAll(((CompositeReference&lt;S,C,R,A>) ref).getValue());&#xD;&#xA;&#x9;} else if(ref instanceof CrossReference) {&#xD;&#xA;&#x9;&#x9;containedClasses.addAll((Collection&lt;? extends C>) ((CrossReference) ref).getValue());&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#x9;&#xD;&#xA;// recursively iterate over all contained classes&#xD;&#xA;boolean found = false;&#xD;&#xA;for (C containedClass : containedClasses) {&#xD;&#xA;&#x9;if(containedClass.equals(this) || isContainedIn(containedClass)) {&#xD;&#xA;&#x9;&#x9;found = true;&#xD;&#xA;&#x9;&#x9;break;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return found;"/>
          </eAnnotations>
          <eParameters name="containerClass" lowerBound="1">
            <eGenericType eTypeParameter="#//structure/generic/Class/C"/>
          </eParameters>
        </eOperations>
        <eOperations name="getOwningContainmentReference">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="if(this.eContainer() instanceof CompositeReference&lt;?,?,?,?>) {&#xD;&#xA;&#x9;return (CompositeReference&lt;S,C,R,A>) this.eContainer();&#xD;&#xA;} else {&#xD;&#xA;&#x9;return null;&#xD;&#xA;}"/>
          </eAnnotations>
          <eGenericType eClassifier="#//structure/generic/CompositeReference">
            <eTypeArguments eTypeParameter="#//structure/generic/Class/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Class/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Class/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Class/A"/>
          </eGenericType>
        </eOperations>
        <eOperations name="isReferencedBy" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="if(referencedClasses == null) {&#xD;&#xA;&#x9;referencedClasses = new BasicEList&lt;>();&#xD;&#xA;}&#xD;&#xA;BasicEList&lt;C> classes = new BasicEList&lt;>();&#xD;&#xA;&#xD;&#xA;// collect all classes that are referenced&#xD;&#xA;for (R ref : referencingClass.getReferences()) {&#xD;&#xA;&#xD;&#xA;&#x9;if(ref instanceof ContainmentReference&lt;?,?,?,?>){&#xD;&#xA;&#x9;&#x9;classes.addAll(((ContainmentReference&lt;S,C,R,A>) ref).getValue());&#xD;&#xA;&#x9;} else if(ref instanceof MetaModelSectionReference) {&#xD;&#xA;&#x9;&#x9;classes.addAll((Collection&lt;? extends C>) ((MetaModelSectionReference) ref).getValue());&#xD;&#xA;&#x9;} else if(ref instanceof NonContainmentReference){&#xD;&#xA;&#x9;&#x9;classes.addAll(((NonContainmentReference&lt;S,C,R,A>) ref).getValue());&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// recursively iterate over all referenced classes&#xD;&#xA;for (C clazz : classes) {&#xD;&#xA;&#x9;if(clazz.equals(this) || isReferencedBy(clazz, referencedClasses)) {&#xD;&#xA;&#x9;&#x9;return true;&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;if(!referencedClasses.contains(clazz)) {&#xD;&#xA;&#x9;&#x9;&#x9;referencedClasses.add(clazz);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return false;"/>
          </eAnnotations>
          <eParameters name="referencingClass" lowerBound="1">
            <eGenericType eTypeParameter="#//structure/generic/Class/C"/>
          </eParameters>
          <eParameters name="referencedClasses" upperBound="-1">
            <eGenericType eTypeParameter="#//structure/generic/Class/C"/>
          </eParameters>
        </eOperations>
        <eOperations name="validateEClassMatchesParentEReference" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xD;&#xA;if(this == this.getContainingSection() || this.getEClass() == null || !(this.eContainer() instanceof Reference&lt;?, ?, ?, ?>)) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&lt;%pamtram.structure.generic.Reference%>&lt;?, ?, ?, ?> parentReference = (Reference&lt;?, ?, ?, ?>) this.eContainer();&#xD;&#xA;&#xD;&#xA;if(parentReference.getEReference() == null) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;boolean result = parentReference.getEReference().getEReferenceType().isSuperTypeOf(this.getEClass());&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;The eClass '&quot; + this.eClass().getName() + &quot;' is not allowed by the containing reference!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.structure.generic.util.GenericValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;GenericValidator.CLASS__VALIDATE_ECLASS_MATCHES_PARENT_EREFERENCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.structure.generic.GenericPackage%>.Literals.CLASS__ECLASS }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
          </eAnnotations>
          <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
          <eParameters name="context">
            <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
              <eTypeArguments/>
              <eTypeArguments/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="validateCardinalityIsValid" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xD;&#xA;if(this == this.getContainingSection() || this.getEClass() == null || !(this.eContainer() instanceof Reference&lt;?, ?, ?, ?>)) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&lt;%pamtram.structure.generic.Reference%>&lt;?, ?, ?, ?> parentReference = (Reference&lt;?, ?, ?, ?>) this.eContainer();&#xD;&#xA;&#xD;&#xA;if(parentReference.getEReference() == null) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;boolean result = !(this.cardinality != &lt;%pamtram.structure.generic.CardinalityType%>.ONE &amp;&amp; parentReference.getEReference().getUpperBound() == 1);&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;The cardinality of a Class must be specified as 'CardinalityType::ONE' when the upper bound of the containing Reference is '1'!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.structure.generic.util.GenericValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;GenericValidator.CLASS__VALIDATE_CARDINALITY_IS_VALID,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.structure.generic.GenericPackage%>.Literals.CLASS__CARDINALITY }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
          </eAnnotations>
          <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
          <eParameters name="context">
            <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
              <eTypeArguments/>
              <eTypeArguments/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="validateContainerIsValid" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xD;&#xA;boolean result = this instanceof &lt;%pamtram.structure.generic.Section%>&lt;?, ?, ?, ?> || this.getContainer() == null ? true : this.getContainer().equals(this.eContainer().eContainer());&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;The 'container' refrence must point to the containing Class!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.structure.generic.util.GenericValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;GenericValidator.CLASS__VALIDATE_CONTAINER_IS_VALID,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.structure.generic.GenericPackage%>.Literals.CLASS__CONTAINER }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
          </eAnnotations>
          <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
          <eParameters name="context">
            <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
              <eTypeArguments/>
              <eTypeArguments/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="eClass" lowerBound="1"
            eType="ecore:EClass http://www.eclipse.org/emf/2002/Ecore#//EClass"/>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="cardinality" lowerBound="1"
            eType="#//structure/generic/CardinalityType" defaultValueLiteral="ONE"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="references" upperBound="-1"
            containment="true" eOpposite="#//structure/generic/Reference/owningClass">
          <eGenericType eTypeParameter="#//structure/generic/Class/R"/>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="container">
          <eGenericType eTypeParameter="#//structure/generic/Class/C"/>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="attributes" upperBound="-1"
            containment="true" eOpposite="#//structure/generic/Attribute/owningClass">
          <eGenericType eTypeParameter="#//structure/generic/Class/A"/>
        </eStructuralFeatures>
        <eGenericSuperTypes eClassifier="#//structure/generic/MetaModelElement">
          <eTypeArguments eTypeParameter="#//structure/generic/Class/S"/>
          <eTypeArguments eTypeParameter="#//structure/generic/Class/C"/>
          <eTypeArguments eTypeParameter="#//structure/generic/Class/R"/>
          <eTypeArguments eTypeParameter="#//structure/generic/Class/A"/>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Section" abstract="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="extendsValidSections containerMatchesExtendContainer"/>
        </eAnnotations>
        <eTypeParameters name="S">
          <eBounds eClassifier="#//structure/generic/Section">
            <eTypeArguments eTypeParameter="#//structure/generic/Section/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Section/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Section/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Section/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="C">
          <eBounds eClassifier="#//structure/generic/Class">
            <eTypeArguments eTypeParameter="#//structure/generic/Section/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Section/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Section/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Section/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="R">
          <eBounds eClassifier="#//structure/generic/Reference">
            <eTypeArguments eTypeParameter="#//structure/generic/Section/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Section/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Section/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Section/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="A">
          <eBounds eClassifier="#//structure/generic/Attribute">
            <eTypeArguments eTypeParameter="#//structure/generic/Section/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Section/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Section/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Section/A"/>
          </eBounds>
        </eTypeParameters>
        <eOperations name="validateContainerMatchesExtendContainer" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="if(this.getContainer() == null) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;boolean result = this.getExtend().parallelStream().allMatch(&#xD;&#xA;&#x9;&#x9;e -> e.getContainer() == null || e.getContainer() == this.getContainer());&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;String errorMessage = &quot;The section extends a section that specifies a different container!&quot;;&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;diagnostics.add&#xD;&#xA;&#x9;&#x9;(new BasicDiagnostic&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9; &lt;%pamtram.structure.generic.util.GenericValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;GenericValidator.SECTION__VALIDATE_CONTAINER_MATCHES_EXTEND_CONTAINER,&#xD;&#xA;&#x9;&#x9;&#x9; errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9; new Object [] { this, &lt;%pamtram.structure.generic.GenericPackage%>.Literals.SECTION__EXTEND }));&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;return result;"/>
          </eAnnotations>
          <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
          <eParameters name="context">
            <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
              <eTypeArguments/>
              <eTypeArguments/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="validateExtendsValidSections" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xD;&#xA;if(this.getEClass() == null) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;boolean result = this.getExtend().parallelStream().noneMatch(e -> !e.isAbstract() || e.getEClass() != null&#xD;&#xA;&#x9;&#x9;&amp;&amp; this.getEClass() != e.getEClass() &amp;&amp; !this.getEClass().getEAllSuperTypes().contains(e.getEClass()));&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;The section extends a section that is either not abstract or that references an EClass of a different (super-)type!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.structure.generic.util.GenericValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;GenericValidator.SECTION__VALIDATE_EXTENDS_VALID_SECTIONS,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.structure.generic.GenericPackage%>.Literals.SECTION__EXTEND }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
          </eAnnotations>
          <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
          <eParameters name="context">
            <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
              <eTypeArguments/>
              <eTypeArguments/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="abstract" lowerBound="1"
            eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
            defaultValueLiteral="false"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="extend" upperBound="-1">
          <eGenericType eTypeParameter="#//structure/generic/Section/S"/>
        </eStructuralFeatures>
        <eGenericSuperTypes eClassifier="#//structure/generic/Class">
          <eTypeArguments eTypeParameter="#//structure/generic/Section/S"/>
          <eTypeArguments eTypeParameter="#//structure/generic/Section/C"/>
          <eTypeArguments eTypeParameter="#//structure/generic/Section/R"/>
          <eTypeArguments eTypeParameter="#//structure/generic/Section/A"/>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Reference" abstract="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="eReferenceMatchesParentEClass"/>
        </eAnnotations>
        <eTypeParameters name="S">
          <eBounds eClassifier="#//structure/generic/Section">
            <eTypeArguments eTypeParameter="#//structure/generic/Reference/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Reference/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Reference/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Reference/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="C">
          <eBounds eClassifier="#//structure/generic/Class">
            <eTypeArguments eTypeParameter="#//structure/generic/Reference/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Reference/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Reference/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Reference/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="R">
          <eBounds eClassifier="#//structure/generic/Reference">
            <eTypeArguments eTypeParameter="#//structure/generic/Reference/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Reference/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Reference/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Reference/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="A">
          <eBounds eClassifier="#//structure/generic/Attribute">
            <eTypeArguments eTypeParameter="#//structure/generic/Reference/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Reference/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Reference/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Reference/A"/>
          </eBounds>
        </eTypeParameters>
        <eOperations name="validateEReferenceMatchesParentEClass" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xD;&#xA;if(this.isLibraryEntry() || this.getEReference() == null || !(this.eContainer() instanceof &lt;%pamtram.structure.generic.Class%>)) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&lt;%org.eclipse.emf.ecore.EClass%> parentEClass = ((Class&lt;?, ?, ?, ?>) this.eContainer()).getEClass();&#xD;&#xA;&#xD;&#xA;boolean result = parentEClass == null ? true : parentEClass.getEAllReferences().contains(this.getEReference());&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;The eReference '&quot; + this.getEReference().getName() + &quot;' is not allowed by the containing Class!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.structure.generic.util.GenericValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;GenericValidator.REFERENCE__VALIDATE_EREFERENCE_MATCHES_PARENT_ECLASS,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.structure.generic.GenericPackage%>.Literals.REFERENCE__EREFERENCE }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
          </eAnnotations>
          <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
          <eParameters name="context">
            <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
              <eTypeArguments/>
              <eTypeArguments/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="getValuesGeneric" upperBound="-1">
          <eGenericType eTypeParameter="#//structure/generic/Reference/C"/>
        </eOperations>
        <eOperations name="addValuesGeneric">
          <eParameters name="values" upperBound="-1">
            <eGenericType eTypeParameter="#//structure/generic/Reference/C"/>
          </eParameters>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="eReference" lowerBound="1"
            eType="ecore:EClass http://www.eclipse.org/emf/2002/Ecore#//EReference"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="owningClass" changeable="false"
            eOpposite="#//structure/generic/Class/references">
          <eGenericType eTypeParameter="#//structure/generic/Reference/C"/>
        </eStructuralFeatures>
        <eGenericSuperTypes eClassifier="#//structure/generic/MetaModelElement">
          <eTypeArguments eTypeParameter="#//structure/generic/Reference/S"/>
          <eTypeArguments eTypeParameter="#//structure/generic/Reference/C"/>
          <eTypeArguments eTypeParameter="#//structure/generic/Reference/R"/>
          <eTypeArguments eTypeParameter="#//structure/generic/Reference/A"/>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="CompositeReference" abstract="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="eReferenceIsContainment"/>
        </eAnnotations>
        <eTypeParameters name="S">
          <eBounds eClassifier="#//structure/generic/Section">
            <eTypeArguments eTypeParameter="#//structure/generic/CompositeReference/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/CompositeReference/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/CompositeReference/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/CompositeReference/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="C">
          <eBounds eClassifier="#//structure/generic/Class">
            <eTypeArguments eTypeParameter="#//structure/generic/CompositeReference/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/CompositeReference/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/CompositeReference/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/CompositeReference/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="R">
          <eBounds eClassifier="#//structure/generic/Reference">
            <eTypeArguments eTypeParameter="#//structure/generic/CompositeReference/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/CompositeReference/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/CompositeReference/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/CompositeReference/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="A">
          <eBounds eClassifier="#//structure/generic/Attribute">
            <eTypeArguments eTypeParameter="#//structure/generic/CompositeReference/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/CompositeReference/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/CompositeReference/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/CompositeReference/A"/>
          </eBounds>
        </eTypeParameters>
        <eOperations name="validateEReferenceIsContainment" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xD;&#xA;boolean result = this.getEReference() == null ? true : this.getEReference().isContainment();&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;The eReference '&quot; + this.getEReference().getName() + &quot;' is no containment reference!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.structure.generic.util.GenericValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;GenericValidator.COMPOSITE_REFERENCE__VALIDATE_EREFERENCE_IS_CONTAINMENT,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.structure.generic.GenericPackage%>.Literals.REFERENCE__EREFERENCE }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
          </eAnnotations>
          <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
          <eParameters name="context">
            <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
              <eTypeArguments/>
              <eTypeArguments/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="value" upperBound="-1"
            containment="true">
          <eGenericType eTypeParameter="#//structure/generic/CompositeReference/C"/>
        </eStructuralFeatures>
        <eGenericSuperTypes eClassifier="#//structure/generic/Reference">
          <eTypeArguments eTypeParameter="#//structure/generic/CompositeReference/S"/>
          <eTypeArguments eTypeParameter="#//structure/generic/CompositeReference/C"/>
          <eTypeArguments eTypeParameter="#//structure/generic/CompositeReference/R"/>
          <eTypeArguments eTypeParameter="#//structure/generic/CompositeReference/A"/>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="CrossReference" abstract="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="eReferenceIsNonContainment"/>
        </eAnnotations>
        <eTypeParameters name="S">
          <eBounds eClassifier="#//structure/generic/Section">
            <eTypeArguments eTypeParameter="#//structure/generic/CrossReference/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/CrossReference/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/CrossReference/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/CrossReference/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="C">
          <eBounds eClassifier="#//structure/generic/Class">
            <eTypeArguments eTypeParameter="#//structure/generic/CrossReference/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/CrossReference/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/CrossReference/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/CrossReference/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="R">
          <eBounds eClassifier="#//structure/generic/Reference">
            <eTypeArguments eTypeParameter="#//structure/generic/CrossReference/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/CrossReference/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/CrossReference/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/CrossReference/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="A">
          <eBounds eClassifier="#//structure/generic/Attribute">
            <eTypeArguments eTypeParameter="#//structure/generic/CrossReference/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/CrossReference/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/CrossReference/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/CrossReference/A"/>
          </eBounds>
        </eTypeParameters>
        <eOperations name="validateValuesMatchReferenceType" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xD;&#xA;boolean result = this.getEReference() == null ? true : this.getValue().parallelStream().allMatch(c -> this.getEReference().getEReferenceType().isSuperTypeOf(c.getEClass()));&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = this.getValue().parallelStream()&#xD;&#xA;&#x9;&#x9;.filter(c -> !this.getEReference().getEReferenceType().isSuperTypeOf(c.getEClass())).count()&#xD;&#xA;&#x9;&#x9;+ &quot; of the selected target Classes (Value) are not allowed by the selected eReference '&quot;&#xD;&#xA;&#x9;&#x9;+ this.getEReference().getName() + &quot;'!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.structure.generic.util.GenericValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;GenericValidator.CROSS_REFERENCE__VALIDATE_VALUES_MATCH_REFERENCE_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.structure.generic.GenericPackage%>.Literals.CROSS_REFERENCE__VALUE }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
          </eAnnotations>
          <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
          <eParameters name="context">
            <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
              <eTypeArguments/>
              <eTypeArguments/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="value" upperBound="-1">
          <eGenericType eTypeParameter="#//structure/generic/CrossReference/C"/>
        </eStructuralFeatures>
        <eGenericSuperTypes eClassifier="#//structure/generic/Reference">
          <eTypeArguments eTypeParameter="#//structure/generic/CrossReference/S"/>
          <eTypeArguments eTypeParameter="#//structure/generic/CrossReference/C"/>
          <eTypeArguments eTypeParameter="#//structure/generic/CrossReference/R"/>
          <eTypeArguments eTypeParameter="#//structure/generic/CrossReference/A"/>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Attribute" abstract="true">
        <eTypeParameters name="S">
          <eBounds eClassifier="#//structure/generic/Section">
            <eTypeArguments eTypeParameter="#//structure/generic/Attribute/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Attribute/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Attribute/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Attribute/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="C">
          <eBounds eClassifier="#//structure/generic/Class">
            <eTypeArguments eTypeParameter="#//structure/generic/Attribute/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Attribute/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Attribute/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Attribute/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="R">
          <eBounds eClassifier="#//structure/generic/Reference">
            <eTypeArguments eTypeParameter="#//structure/generic/Attribute/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Attribute/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Attribute/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Attribute/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="A">
          <eBounds eClassifier="#//structure/generic/Attribute">
            <eTypeArguments eTypeParameter="#//structure/generic/Attribute/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Attribute/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Attribute/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/Attribute/A"/>
          </eBounds>
        </eTypeParameters>
        <eStructuralFeatures xsi:type="ecore:EReference" name="owningClass" changeable="false"
            eOpposite="#//structure/generic/Class/attributes">
          <eGenericType eTypeParameter="#//structure/generic/Attribute/C"/>
        </eStructuralFeatures>
        <eGenericSuperTypes eClassifier="#//structure/generic/MetaModelElement">
          <eTypeArguments eTypeParameter="#//structure/generic/Attribute/S"/>
          <eTypeArguments eTypeParameter="#//structure/generic/Attribute/C"/>
          <eTypeArguments eTypeParameter="#//structure/generic/Attribute/R"/>
          <eTypeArguments eTypeParameter="#//structure/generic/Attribute/A"/>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ActualAttribute" abstract="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="attributeMatchesParentEClass"/>
        </eAnnotations>
        <eTypeParameters name="S">
          <eBounds eClassifier="#//structure/generic/Section">
            <eTypeArguments eTypeParameter="#//structure/generic/ActualAttribute/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/ActualAttribute/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/ActualAttribute/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/ActualAttribute/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="C">
          <eBounds eClassifier="#//structure/generic/Class">
            <eTypeArguments eTypeParameter="#//structure/generic/ActualAttribute/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/ActualAttribute/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/ActualAttribute/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/ActualAttribute/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="R">
          <eBounds eClassifier="#//structure/generic/Reference">
            <eTypeArguments eTypeParameter="#//structure/generic/ActualAttribute/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/ActualAttribute/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/ActualAttribute/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/ActualAttribute/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="A">
          <eBounds eClassifier="#//structure/generic/Attribute">
            <eTypeArguments eTypeParameter="#//structure/generic/ActualAttribute/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/ActualAttribute/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/ActualAttribute/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/ActualAttribute/A"/>
          </eBounds>
        </eTypeParameters>
        <eOperations name="validateAttributeMatchesParentEClass" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xD;&#xA;if(this.isLibraryEntry() || this.getAttribute() == null || !(this.eContainer() instanceof &lt;%pamtram.structure.generic.Class%>&lt;?, ?, ?, ?>)) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;EClass parentEClass = ((&lt;%pamtram.structure.generic.Class%>&lt;?, ?, ?, ?>) this.eContainer()).getEClass();&#xD;&#xA;&#xD;&#xA;boolean result = parentEClass == null ? true : parentEClass.getEAllAttributes().contains(this.getAttribute());&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;The eAttribute '&quot; + this.getAttribute().getName() + &quot;' is not allowed by the containing Class!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.structure.generic.util.GenericValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;GenericValidator.ACTUAL_ATTRIBUTE__VALIDATE_ATTRIBUTE_MATCHES_PARENT_ECLASS,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.structure.generic.GenericPackage%>.Literals.ACTUAL_ATTRIBUTE__ATTRIBUTE }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
          </eAnnotations>
          <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
          <eParameters name="context">
            <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
              <eTypeArguments/>
              <eTypeArguments/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="attribute" lowerBound="1"
            eType="ecore:EClass http://www.eclipse.org/emf/2002/Ecore#//EAttribute"/>
        <eGenericSuperTypes eClassifier="#//structure/generic/Attribute">
          <eTypeArguments eTypeParameter="#//structure/generic/ActualAttribute/S"/>
          <eTypeArguments eTypeParameter="#//structure/generic/ActualAttribute/C"/>
          <eTypeArguments eTypeParameter="#//structure/generic/ActualAttribute/R"/>
          <eTypeArguments eTypeParameter="#//structure/generic/ActualAttribute/A"/>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="VirtualAttribute" abstract="true">
        <eTypeParameters name="S">
          <eBounds eClassifier="#//structure/generic/Section">
            <eTypeArguments eTypeParameter="#//structure/generic/VirtualAttribute/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/VirtualAttribute/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/VirtualAttribute/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/VirtualAttribute/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="C">
          <eBounds eClassifier="#//structure/generic/Class">
            <eTypeArguments eTypeParameter="#//structure/generic/VirtualAttribute/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/VirtualAttribute/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/VirtualAttribute/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/VirtualAttribute/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="R">
          <eBounds eClassifier="#//structure/generic/Reference">
            <eTypeArguments eTypeParameter="#//structure/generic/VirtualAttribute/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/VirtualAttribute/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/VirtualAttribute/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/VirtualAttribute/A"/>
          </eBounds>
        </eTypeParameters>
        <eTypeParameters name="A">
          <eBounds eClassifier="#//structure/generic/Attribute">
            <eTypeArguments eTypeParameter="#//structure/generic/VirtualAttribute/S"/>
            <eTypeArguments eTypeParameter="#//structure/generic/VirtualAttribute/C"/>
            <eTypeArguments eTypeParameter="#//structure/generic/VirtualAttribute/R"/>
            <eTypeArguments eTypeParameter="#//structure/generic/VirtualAttribute/A"/>
          </eBounds>
        </eTypeParameters>
        <eGenericSuperTypes eClassifier="#//structure/generic/Attribute">
          <eTypeArguments eTypeParameter="#//structure/generic/VirtualAttribute/S"/>
          <eTypeArguments eTypeParameter="#//structure/generic/VirtualAttribute/C"/>
          <eTypeArguments eTypeParameter="#//structure/generic/VirtualAttribute/R"/>
          <eTypeArguments eTypeParameter="#//structure/generic/VirtualAttribute/A"/>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EEnum" name="CardinalityType">
        <eLiterals name="ONE"/>
        <eLiterals name="ONE__INFINITY" value="1"/>
        <eLiterals name="ZERO__INFINITY" value="2"/>
      </eClassifiers>
    </eSubpackages>
    <eSubpackages name="constraint" nsURI="http://mfreund.de/pamtram/structure/constraint"
        nsPrefix="constraint">
      <eClassifiers xsi:type="ecore:EClass" name="ValueConstraint" abstract="true"
          interface="true" eSuperTypes="#//NamedElement">
        <eOperations name="isLocalConstraint" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="if (this instanceof &lt;%pamtram.structure.constraint.ChoiceConstraint%>) {&#xD;&#xA;&#x9;return ((ChoiceConstraint) this).getChoices().stream().allMatch(&lt;%pamtram.structure.constraint.ValueConstraint%>::isLocalConstraint);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;if (&lt;%de.tud.et.ifa.agtele.emf.AgteleEcoreUtil%>.hasAncestorOfKind(this, &lt;%pamtram.structure.source.SourcePackage%>.Literals.ACTUAL_SOURCE_SECTION_ATTRIBUTE)) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;if (!(this instanceof &lt;%pamtram.structure.constraint.SingleReferenceValueConstraint%>)&#xD;&#xA;&#x9;&#x9;|| !AgteleEcoreUtil.hasAncestorOfKind(this, &lt;%pamtram.condition.ConditionPackage%>.Literals.ATTRIBUTE_CONDITION)) {&#xD;&#xA;&#x9;throw new UnsupportedOperationException();&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&lt;%org.eclipse.emf.ecore.EObject%> container = this;&#xD;&#xA;&#xD;&#xA;while (!(container instanceof &lt;%pamtram.mapping.Mapping%>)) {&#xD;&#xA;&#x9;if (container == null) {&#xD;&#xA;&#x9;&#x9;return false;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;container = container.eContainer();&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// The SourceSection of the Mapping that contains the constraint&#xD;&#xA;//&#xD;&#xA;SourceSection localSection = ((Mapping) container).getSourceSection();&#xD;&#xA;&#xD;&#xA;if (((SingleReferenceValueConstraint) this).getSourceElements().parallelStream()&#xD;&#xA;&#x9;&#x9;.allMatch(s -> s instanceof &lt;%pamtram.FixedValue%> || s instanceof &lt;%pamtram.mapping.GlobalAttributeImporter%>&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;|| s instanceof &lt;%pamtram.structure.constraint.ValueConstraintSourceElement%> &amp;&amp; ((ValueConstraintSourceElement) s).getSource()&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.getContainingSection().equals(localSection)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;|| s instanceof &lt;%pamtram.structure.constraint.ValueConstraintExternalSourceElement%>&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&amp;&amp; ((ValueConstraintExternalSourceElement) s).getSource().getContainingSection()&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.isContainerFor(localSection))) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// A constraint is also 'local' if an InstancePointer with local or external SourceAttributes exist&#xD;&#xA;//&#xD;&#xA;return ((SingleReferenceValueConstraint) this).getInstanceSelectors()&#xD;&#xA;&#x9;&#x9;.parallelStream()&#xD;&#xA;&#x9;&#x9;.flatMap(instanceSelector -> instanceSelector.getSourceElements().parallelStream()&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;.filter(s -> s instanceof &lt;%pamtram.structure.InstanceSelectorSourceElement%>&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;|| s instanceof &lt;%pamtram.structure.InstanceSelectorExternalSourceElement%>))&#xD;&#xA;&#x9;&#x9;.findAny().isPresent();"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="type" lowerBound="1"
            eType="#//structure/constraint/ValueConstraintType" defaultValueLiteral="REQUIRED"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EEnum" name="ValueConstraintType">
        <eLiterals name="REQUIRED"/>
        <eLiterals name="FORBIDDEN" value="1"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="SingleReferenceValueConstraint"
          abstract="true" eSuperTypes="#//structure/constraint/ValueConstraint #//ExpressionElement #//ModifiableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="onlyFixedValuesInSourceSections onlyFixedValuesOrGlobalAttributesInConditionModel"/>
        </eAnnotations>
        <eOperations name="checkConstraint" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eParameters name="attrValue" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
          <eParameters name="refValue" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
        </eOperations>
        <eOperations name="validateOnlyFixedValuesInSourceSections" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="if(this.getSourceElements().isEmpty() || &#xD;&#xA;&#x9;&#x9;!&lt;%de.tud.et.ifa.agtele.emf.AgteleEcoreUtil%>.hasAncestorOfKind(this, &lt;%pamtram.structure.source.SourcePackage%>.eINSTANCE.getActualSourceSectionAttribute())) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;boolean result = this.getSourceElements().parallelStream().allMatch(s -> s instanceof &lt;%pamtram.FixedValue%>);&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;String errorMessage = &quot;This ValueConstraint must only&quot;&#xD;&#xA;&#x9;&#x9;&#x9;+ &quot; contain FixedValues as source elements as it is modeled as part of a SourceSection!'&quot;;&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;diagnostics.add&#xD;&#xA;&#x9;&#x9;(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9; &lt;%pamtram.structure.constraint.util.ConstraintValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;ConstraintValidator.SINGLE_REFERENCE_VALUE_CONSTRAINT__VALIDATE_ONLY_FIXED_VALUES_IN_SOURCE_SECTIONS,&#xD;&#xA;&#x9;&#x9;&#x9; errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9; new Object [] { this,  &lt;%pamtram.structure.constraint.ConstraintPackage%>.Literals.SINGLE_REFERENCE_VALUE_CONSTRAINT__SOURCE_ELEMENTS }));&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;return result;"/>
          </eAnnotations>
          <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
          <eParameters name="context">
            <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
              <eTypeArguments/>
              <eTypeArguments/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="validateOnlyFixedValuesOrGlobalAttributesInConditionModel"
            eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="if(this.getSourceElements().isEmpty() || &#xD;&#xA;&#x9;&#x9;!&lt;%de.tud.et.ifa.agtele.emf.AgteleEcoreUtil%>.hasAncestorOfKind(this, &lt;%pamtram.condition.ConditionPackage%>.eINSTANCE.getComplexCondition())) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&lt;%pamtram.condition.ComplexCondition%> condition = (ComplexCondition) AgteleEcoreUtil.getAncestorOfKind(this, &lt;%pamtram.condition.ConditionPackage%>.eINSTANCE.getComplexCondition());&#xD;&#xA;&#xD;&#xA;if(!condition.isConditionModelCondition()) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;boolean result = this.getSourceElements().parallelStream().allMatch(s -> s instanceof &lt;%pamtram.FixedValue%> || s instanceof &lt;%pamtram.mapping.GlobalAttributeImporter%>);&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;String errorMessage = &quot;This ValueConstraint must only&quot;&#xD;&#xA;&#x9;&#x9;&#x9;+ &quot; contain FixedValues or GlobalAttributeImporters as source elements as it is modeled as part of a condition inside a ConditionModel!'&quot;;&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;diagnostics.add&#xD;&#xA;&#x9;&#x9;(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9; &lt;%pamtram.structure.constraint.util.ConstraintValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9; ConstraintValidator.SINGLE_REFERENCE_VALUE_CONSTRAINT__VALIDATE_ONLY_FIXED_VALUES_OR_GLOBAL_ATTRIBUTES_IN_CONDITION_MODEL,&#xD;&#xA;&#x9;&#x9;&#x9; errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9; new Object [] { this,  &lt;%pamtram.structure.constraint.ConstraintPackage%>.Literals.SINGLE_REFERENCE_VALUE_CONSTRAINT__SOURCE_ELEMENTS }));&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;return result;"/>
          </eAnnotations>
          <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
          <eParameters name="context">
            <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
              <eTypeArguments/>
              <eTypeArguments/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="validateNoResultModifierInSourceSections" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="boolean result = this.getModifiers().isEmpty() ||&#xD;&#xA;&#x9;&#x9;!&lt;%de.tud.et.ifa.agtele.emf.AgteleEcoreUtil%>.hasAncestorOfKind(this, &lt;%pamtram.structure.source.SourcePackage%>.eINSTANCE.getActualSourceSectionAttribute());&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;ValueConstraints that are part of a SourceSection must not&quot;&#xD;&#xA;&#x9;&#x9;&#x9;+ &quot; specify a Modifier!'&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new BasicDiagnostic(Diagnostic.ERROR, &lt;%pamtram.structure.constraint.util.ConstraintValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;ConstraintValidator.SINGLE_REFERENCE_VALUE_CONSTRAINT__VALIDATE_NO_RESULT_MODIFIER_IN_SOURCE_SECTIONS,&#xD;&#xA;&#x9;&#x9;&#x9;errorMessage, new Object[] { this,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;%pamtram.PamtramPackage%>.Literals.MODIFIABLE_ELEMENT__MODIFIERS }));&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
          </eAnnotations>
          <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
          <eParameters name="context">
            <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
              <eTypeArguments/>
              <eTypeArguments/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="sourceElements" upperBound="-1"
            eType="#//structure/constraint/ValueConstraintSourceInterface" containment="true"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="instanceSelectors"
            upperBound="-1" eType="#//structure/SourceInstanceSelector" containment="true"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="EqualityConstraint" eSuperTypes="#//structure/constraint/SingleReferenceValueConstraint"/>
      <eClassifiers xsi:type="ecore:EClass" name="ChoiceConstraint" eSuperTypes="#//structure/constraint/ValueConstraint">
        <eOperations name="checkConstraint" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eParameters name="attrValue" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
          <eParameters name="refValue" lowerBound="1" upperBound="-1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="choices" lowerBound="2"
            upperBound="-1" eType="#//structure/constraint/EqualityConstraint" containment="true"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="NumericConstraint" eSuperTypes="#//structure/constraint/SingleReferenceValueConstraint">
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="operatorType" lowerBound="1"
            eType="#//structure/constraint/NumericConstraintOperatorType"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EEnum" name="NumericConstraintOperatorType">
        <eLiterals name="EQUAL" literal="EQUAL"/>
        <eLiterals name="GREATER" value="1" literal="GREATER"/>
        <eLiterals name="GREATER_OR_EQUAL" value="2" literal="GREATER_OR_EQUAL"/>
        <eLiterals name="LESS" value="3" literal="LESS"/>
        <eLiterals name="LESS_OR_EQUAL" value="4" literal="LESS_OR_EQUAL"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="StringConstraint" eSuperTypes="#//structure/constraint/SingleReferenceValueConstraint">
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="operatorType" lowerBound="1"
            eType="#//structure/constraint/StringConstraintOperatorType"/>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="caseSensitive" lowerBound="1"
            eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
            defaultValueLiteral="true"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EEnum" name="StringConstraintOperatorType">
        <eLiterals name="MATCH_EQUAL"/>
        <eLiterals name="MATCH_BEGINNING" value="1"/>
        <eLiterals name="MATCH_ENDING" value="2"/>
        <eLiterals name="MATCH_SUBSTRING" value="3"/>
        <eLiterals name="MATCH_REGEX" value="4"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ValueConstraintSourceInterface"
          abstract="true" interface="true" eSuperTypes="#//mapping/MappingHintSourceInterface"/>
      <eClassifiers xsi:type="ecore:EClass" name="ValueConstraintSourceElement">
        <eGenericSuperTypes eClassifier="#//structure/LocalDynamicSourceElement">
          <eTypeArguments eClassifier="#//structure/source/SourceSection"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionClass"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionReference"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionAttribute"/>
        </eGenericSuperTypes>
        <eGenericSuperTypes eClassifier="#//structure/constraint/ValueConstraintSourceInterface"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ValueConstraintExternalSourceElement">
        <eGenericSuperTypes eClassifier="#//structure/ExternalDynamicSourceElement">
          <eTypeArguments eClassifier="#//structure/source/SourceSection"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionClass"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionReference"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionAttribute"/>
        </eGenericSuperTypes>
        <eGenericSuperTypes eClassifier="#//structure/constraint/ValueConstraintSourceInterface"/>
      </eClassifiers>
    </eSubpackages>
    <eSubpackages name="source" nsURI="http://mfreund.de/pamtram/structure/source"
        nsPrefix="source">
      <eClassifiers xsi:type="ecore:EClass" name="SourceSection">
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="isReferencedByMapping"/>
        </eAnnotations>
        <eOperations name="validateIsReferencedByMapping" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xD;&#xA;boolean result = !this.getReferencingMappings().isEmpty();&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;The section is not referenced by any mapping!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.WARNING,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.structure.source.util.SourceValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;SourceValidator.SOURCE_SECTION__VALIDATE_IS_REFERENCED_BY_MAPPING,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.structure.source.SourcePackage%>.Literals.SOURCE_SECTION }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
          </eAnnotations>
          <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
          <eParameters name="context">
            <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
              <eTypeArguments/>
              <eTypeArguments/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="referencingMappings"
            upperBound="-1" eType="#//mapping/MappingType" changeable="false" volatile="true"
            transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="get" value="&#xD;&#xA;List&lt;&lt;%pamtram.mapping.Mapping%>> mappings = new &lt;%java.util.ArrayList%>&lt;>();&#xD;&#xA;&#xD;&#xA;if (this.eResource() != null) {&#xD;&#xA;&#xD;&#xA;&#x9;mappings = this.eResource().getResourceSet().getResources().stream()&#xD;&#xA;&#x9;&#x9;&#x9;.filter(r -> r.getContents().get(0) instanceof pamtram.PAMTraM)&#xD;&#xA;&#x9;&#x9;&#x9;.flatMap(r -> ((pamtram.PAMTraM) r.getContents().get(0)).getMappings().parallelStream())&#xD;&#xA;&#x9;&#x9;&#x9;.collect(&lt;%java.util.stream.Collectors%>.toList());&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;List&lt;Mapping> referencingMappings = mappings.parallelStream().filter(m -> this.equals(m.getSourceSection())).collect(Collectors.toList());&#xD;&#xA;&#xD;&#xA;return new &lt;%org.eclipse.emf.ecore.util.EcoreEList.UnmodifiableEList%>&lt;>(this, &lt;%pamtram.structure.source.SourcePackage%>.Literals.SOURCE_SECTION__REFERENCING_MAPPINGS,&#xD;&#xA;&#x9;&#x9;referencingMappings.size(), referencingMappings.toArray());"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eGenericSuperTypes eClassifier="#//structure/source/SourceSectionClass"/>
        <eGenericSuperTypes eClassifier="#//structure/generic/Section">
          <eTypeArguments eClassifier="#//structure/source/SourceSection"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionClass"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionReference"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionAttribute"/>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="SourceSectionClass">
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="includeSubTypes" lowerBound="1"
            eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
            defaultValueLiteral="true"/>
        <eGenericSuperTypes eClassifier="#//structure/generic/Class">
          <eTypeArguments eClassifier="#//structure/source/SourceSection"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionClass"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionReference"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionAttribute"/>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="SourceSectionReference" abstract="true">
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="ignoreUnmatchedElements"
            lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
            defaultValueLiteral="false"/>
        <eGenericSuperTypes eClassifier="#//structure/generic/Reference">
          <eTypeArguments eClassifier="#//structure/source/SourceSection"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionClass"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionReference"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionAttribute"/>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="SourceSectionCompositeReference">
        <eGenericSuperTypes eClassifier="#//structure/generic/CompositeReference">
          <eTypeArguments eClassifier="#//structure/source/SourceSection"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionClass"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionReference"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionAttribute"/>
        </eGenericSuperTypes>
        <eGenericSuperTypes eClassifier="#//structure/source/SourceSectionReference"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="SourceSectionCrossReference">
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="valuesMatchReferenceType"/>
        </eAnnotations>
        <eGenericSuperTypes eClassifier="#//structure/generic/CrossReference">
          <eTypeArguments eClassifier="#//structure/source/SourceSection"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionClass"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionReference"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionAttribute"/>
        </eGenericSuperTypes>
        <eGenericSuperTypes eClassifier="#//structure/source/SourceSectionReference"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="SourceSectionAttribute" abstract="true">
        <eStructuralFeatures xsi:type="ecore:EReference" name="valueConstraints" upperBound="-1"
            eType="#//structure/constraint/ValueConstraint" containment="true"/>
        <eGenericSuperTypes eClassifier="#//structure/generic/Attribute">
          <eTypeArguments eClassifier="#//structure/source/SourceSection"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionClass"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionReference"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionAttribute"/>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ActualSourceSectionAttribute">
        <eGenericSuperTypes eClassifier="#//structure/source/SourceSectionAttribute"/>
        <eGenericSuperTypes eClassifier="#//structure/generic/ActualAttribute">
          <eTypeArguments eClassifier="#//structure/source/SourceSection"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionClass"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionReference"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionAttribute"/>
        </eGenericSuperTypes>
      </eClassifiers>
    </eSubpackages>
    <eSubpackages name="target" nsURI="http://mfreund.de/pamtram/structure/target"
        nsPrefix="target">
      <eClassifiers xsi:type="ecore:EClass" name="TargetSection">
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="isReferencedByMappingHintGroup"/>
        </eAnnotations>
        <eOperations name="validateIsReferencedByMappingHintGroup" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xD;&#xA;boolean result = !this.getReferencingMappingHintGroups().isEmpty();&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;The section is not referenced by any hint group and will not be instantiated!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.WARNING,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.structure.target.util.TargetValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;TargetValidator.TARGET_SECTION__VALIDATE_IS_REFERENCED_BY_MAPPING_HINT_GROUP,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.structure.target.TargetPackage%>.Literals.TARGET_SECTION }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
          </eAnnotations>
          <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
          <eParameters name="context">
            <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
              <eTypeArguments/>
              <eTypeArguments/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eOperations name="validateCardinality" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="boolean result = this.getCardinality() != &lt;%pamtram.structure.generic.CardinalityType%>.ONE;&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;The cardinality of this section is currently set to 'ONE'. Consider changing the cardinality if you want to allow that multiple instances of this section are created based on a mapping!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.WARNING,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.structure.target.util.TargetValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;TargetValidator.TARGET_SECTION__VALIDATE_CARDINALITY,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.structure.target.TargetPackage%>.Literals.TARGET_SECTION }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
          </eAnnotations>
          <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
          <eParameters name="context">
            <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
              <eTypeArguments/>
              <eTypeArguments/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="referencingMappingHintGroups"
            upperBound="-1" eType="#//mapping/MappingHintGroupType" changeable="false"
            volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="get" value="&#xD;&#xA;List&lt;&lt;%pamtram.mapping.Mapping%>> mappings = new &lt;%java.util.ArrayList%>&lt;>();&#xD;&#xA;&#xD;&#xA;if (this.eResource() != null) {&#xD;&#xA;&#xD;&#xA;&#x9;mappings = this.eResource().getResourceSet().getResources().stream()&#xD;&#xA;&#x9;&#x9;&#x9;.filter(r -> r.getContents().get(0) instanceof pamtram.PAMTraM)&#xD;&#xA;&#x9;&#x9;&#x9;.flatMap(r -> ((pamtram.PAMTraM) r.getContents().get(0)).getMappings().parallelStream())&#xD;&#xA;&#x9;&#x9;&#x9;.collect(&lt;%java.util.stream.Collectors%>.toList());&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;List&lt;MappingHintGroupType> referencingHintGroups = mappings.parallelStream().flatMap(m -> m.getMappingHintGroups().parallelStream()).filter(m -> this.equals(m.getTargetSection())).collect(Collectors.toList());&#xD;&#xA;&#xD;&#xA;return new &lt;%org.eclipse.emf.ecore.util.EcoreEList.UnmodifiableEList%>&lt;>(this, &lt;%pamtram.structure.target.TargetPackage%>.Literals.TARGET_SECTION__REFERENCING_MAPPING_HINT_GROUPS,&#xD;&#xA;&#x9;&#x9;referencingHintGroups.size(), referencingHintGroups.toArray());"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="file" eType="#//structure/target/FileAttribute"/>
        <eGenericSuperTypes eClassifier="#//structure/target/TargetSectionClass"/>
        <eGenericSuperTypes eClassifier="#//structure/generic/Section">
          <eTypeArguments eClassifier="#//structure/target/TargetSection"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionClass"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionReference"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionAttribute"/>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="FileAttribute" eSuperTypes="#//structure/target/VirtualTargetSectionAttribute">
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="fileType" lowerBound="1"
            eType="#//structure/target/FileType"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EEnum" name="FileType">
        <eLiterals name="XMI"/>
        <eLiterals name="XML" value="1"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="TargetSectionClass">
        <eGenericSuperTypes eClassifier="#//structure/generic/Class">
          <eTypeArguments eClassifier="#//structure/target/TargetSection"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionClass"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionReference"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionAttribute"/>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="TargetSectionReference" abstract="true">
        <eGenericSuperTypes eClassifier="#//structure/generic/Reference">
          <eTypeArguments eClassifier="#//structure/target/TargetSection"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionClass"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionReference"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionAttribute"/>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="TargetSectionCompositeReference">
        <eGenericSuperTypes eClassifier="#//structure/generic/CompositeReference">
          <eTypeArguments eClassifier="#//structure/target/TargetSection"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionClass"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionReference"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionAttribute"/>
        </eGenericSuperTypes>
        <eGenericSuperTypes eClassifier="#//structure/target/TargetSectionReference"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="TargetSectionCrossReference">
        <eOperations name="validateEReferenceIsNonContainment" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="&#xD;&#xA;boolean result = this.getEReference() == null ? true : !this.getEReference().isContainment();&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;The eReference '&quot; + this.getEReference().getName() + &quot;' is no non-containment reference! CrossReferences based on ContainmentReferences are not yet supported...&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.structure.target.util.TargetValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;TargetValidator.TARGET_SECTION_CROSS_REFERENCE__VALIDATE_EREFERENCE_IS_NON_CONTAINMENT,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.structure.generic.GenericPackage%>.Literals.REFERENCE__EREFERENCE }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
          </eAnnotations>
          <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
          <eParameters name="context">
            <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
              <eTypeArguments/>
              <eTypeArguments/>
            </eGenericType>
          </eParameters>
        </eOperations>
        <eGenericSuperTypes eClassifier="#//structure/generic/CrossReference">
          <eTypeArguments eClassifier="#//structure/target/TargetSection"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionClass"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionReference"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionAttribute"/>
        </eGenericSuperTypes>
        <eGenericSuperTypes eClassifier="#//structure/target/TargetSectionReference"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="TargetSectionAttribute" abstract="true">
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="unique" lowerBound="1"
            eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
            defaultValueLiteral="false"/>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
        <eGenericSuperTypes eClassifier="#//structure/generic/Attribute">
          <eTypeArguments eClassifier="#//structure/target/TargetSection"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionClass"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionReference"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionAttribute"/>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ActualTargetSectionAttribute">
        <eGenericSuperTypes eClassifier="#//structure/target/TargetSectionAttribute"/>
        <eGenericSuperTypes eClassifier="#//structure/generic/ActualAttribute">
          <eTypeArguments eClassifier="#//structure/target/TargetSection"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionClass"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionReference"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionAttribute"/>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="VirtualTargetSectionAttribute">
        <eGenericSuperTypes eClassifier="#//structure/target/TargetSectionAttribute"/>
        <eGenericSuperTypes eClassifier="#//structure/generic/VirtualAttribute">
          <eTypeArguments eClassifier="#//structure/target/TargetSection"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionClass"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionReference"/>
          <eTypeArguments eClassifier="#//structure/target/TargetSectionAttribute"/>
        </eGenericSuperTypes>
      </eClassifiers>
    </eSubpackages>
    <eSubpackages name="library" nsURI="http://mfreund.de/pamtram/structure/library"
        nsPrefix="library">
      <eClassifiers xsi:type="ecore:EClass" name="LibraryParameter" abstract="true"
          eSuperTypes="#//NamedElement">
        <eTypeParameters name="ParameterType"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="source" lowerBound="1"
            eType="ecore:EClass http://www.eclipse.org/emf/2002/Ecore#//EObject"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="originalParameter"
            lowerBound="1">
          <eGenericType eTypeParameter="#//structure/library/LibraryParameter/ParameterType"/>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="AttributeParameter">
        <eStructuralFeatures xsi:type="ecore:EReference" name="attribute" lowerBound="1"
            eType="#//structure/target/ActualTargetSectionAttribute" containment="true"/>
        <eGenericSuperTypes eClassifier="#//structure/library/LibraryParameter">
          <eTypeArguments eClassifier="ecore:EClass ../../de.tud.et.ifa.agtele.genlibrary/model/genlibrary.ecore#//AbstractAttributeParameter">
            <eTypeArguments/>
          </eTypeArguments>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ContainerParameter">
        <eStructuralFeatures xsi:type="ecore:EReference" name="class" lowerBound="1"
            eType="#//structure/target/TargetSection" containment="true"/>
        <eGenericSuperTypes eClassifier="#//structure/library/LibraryParameter">
          <eTypeArguments eClassifier="ecore:EClass ../../de.tud.et.ifa.agtele.genlibrary/model/genlibrary.ecore#//AbstractContainerParameter">
            <eTypeArguments/>
            <eTypeArguments/>
          </eTypeArguments>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ExternalReferenceParameter">
        <eStructuralFeatures xsi:type="ecore:EReference" name="reference" lowerBound="1"
            eType="#//structure/target/TargetSectionCrossReference" containment="true"/>
        <eGenericSuperTypes eClassifier="#//structure/library/LibraryParameter">
          <eTypeArguments eClassifier="ecore:EClass ../../de.tud.et.ifa.agtele.genlibrary/model/genlibrary.ecore#//AbstractExternalReferenceParameter">
            <eTypeArguments/>
            <eTypeArguments/>
          </eTypeArguments>
        </eGenericSuperTypes>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ResourceParameter" eSuperTypes="#//NamedElement">
        <eStructuralFeatures xsi:type="ecore:EReference" name="attribute" lowerBound="1"
            eType="#//structure/target/VirtualTargetSectionAttribute" containment="true"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="originalParameter"
            lowerBound="1" eType="ecore:EClass ../../de.tud.et.ifa.agtele.genlibrary/model/genlibrary.ecore#//ResourceParameter"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="LibraryEntry">
        <eStructuralFeatures xsi:type="ecore:EReference" name="parameters" lowerBound="1"
            upperBound="-1" containment="true">
          <eGenericType eClassifier="#//structure/library/LibraryParameter">
            <eTypeArguments/>
          </eGenericType>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="libraryFile" lowerBound="1"
            eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="originalLibraryEntry"
            lowerBound="1" eType="ecore:EClass ../../de.tud.et.ifa.agtele.genlibrary/model/genlibrary.ecore#//LibraryEntry"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="classpath" lowerBound="1"
            eType="#//structure/target/VirtualTargetSectionAttribute" containment="true"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="id" lowerBound="1"
            eType="#//structure/target/VirtualTargetSectionAttribute" containment="true"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="resourceParameters"
            upperBound="-1" eType="#//structure/library/ResourceParameter" containment="true"/>
      </eClassifiers>
    </eSubpackages>
  </eSubpackages>
  <eSubpackages name="condition" nsURI="http://mfreund.de/pamtram/condition" nsPrefix="condition">
    <eAnnotations source="http://www.eclipse.org/OCL/Import">
      <details key="ecore" value="http://www.eclipse.org/emf/2002/Ecore"/>
      <details key="genlib" value="http://www.et.tu-dresden.de/ifa/agtele/genlib"/>
    </eAnnotations>
    <eClassifiers xsi:type="ecore:EClass" name="ComplexCondition" abstract="true"
        eSuperTypes="#//NamedElement">
      <eOperations name="isLocalCondition" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eOperations name="isMappingCondition" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="return getRootCondition().eContainer() instanceof Mapping;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="isConditionModelCondition" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="return getRootCondition().eContainer() instanceof ConditionModel;"/>
        </eAnnotations>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="VariadicCondition" abstract="true"
        eSuperTypes="#//condition/ComplexCondition">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="constraints" value="minimalNumberOfArgs"/>
      </eAnnotations>
      <eOperations name="referencesOnlyValidConditions" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="if(this.sharedCondParts == null || this.sharedCondParts.size() == 0) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;EList&lt;ComplexCondition> conditionRefs = new BasicEList&lt;ComplexCondition>();&#xD;&#xA;conditionRefs.add((ComplexCondition) this.sharedCondParts);&#xD;&#xA;for(ComplexCondition condition : conditionRefs){&#xD;&#xA;&#x9;if(!(condition instanceof ConditionModel)){&#xD;&#xA;&#x9;&#x9;return false;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return true;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="validateMinimalNumberOfArgs" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#xD;&#xA;boolean result = this.getLocalCondParts().size() + this.getSharedCondParts().size() > 1;&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;At least two (local or shared) condition parts need to be specified!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.condition.util.ConditionValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ConditionValidator.VARIADIC_CONDITION__VALIDATE_MINIMAL_NUMBER_OF_ARGS,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.condition.ConditionPackage%>.Literals.VARIADIC_CONDITION }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
        <eParameters name="context">
          <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
            <eTypeArguments/>
            <eTypeArguments/>
          </eGenericType>
        </eParameters>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="localCondParts" upperBound="-1"
          eType="#//condition/ComplexCondition" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="sharedCondParts" upperBound="-1"
          eType="#//condition/ComplexCondition"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="And" eSuperTypes="#//condition/VariadicCondition"/>
    <eClassifiers xsi:type="ecore:EClass" name="Or" eSuperTypes="#//condition/VariadicCondition"/>
    <eClassifiers xsi:type="ecore:EClass" name="UnaryCondition" abstract="true" eSuperTypes="#//condition/ComplexCondition">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="constraints" value="exactlyOneArg"/>
      </eAnnotations>
      <eOperations name="validateExactlyOneArg" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#xD;&#xA;boolean result = this.getLocalCondPart() != null ^ this.getSharedCondPart() != null;&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;Please specify exactly one (local or shared) condition part!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.condition.util.ConditionValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ConditionValidator.UNARY_CONDITION__VALIDATE_EXACTLY_ONE_ARG,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.condition.ConditionPackage%>.Literals.UNARY_CONDITION }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
        <eParameters name="context">
          <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
            <eTypeArguments/>
            <eTypeArguments/>
          </eGenericType>
        </eParameters>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="localCondPart" eType="#//condition/ComplexCondition"
          containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="sharedCondPart" eType="#//condition/ComplexCondition"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Not" eSuperTypes="#//condition/UnaryCondition">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="constraints" value="referenceOnlyConditionsFromConditionModelOrFromConditionalElements"/>
      </eAnnotations>
      <eOperations name="validateReferenceOnlyConditionsFromConditionModelOrFromConditionalElements"
          eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#xD;&#xA;if(this.sharedCondPart == null) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&lt;%org.eclipse.emf.ecore.EObject%> sharedCondPartContainer = this.sharedCondPart.eContainer();&#xD;&#xA;&#xD;&#xA;boolean result = sharedCondPartContainer instanceof &lt;%pamtram.ConditionModel%> || sharedCondPartContainer instanceof ConditionalElement;&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;Reference only Conditions that are placed inside ConditionModel or where the Container is a ConditionalElement!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.condition.util.ConditionValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ConditionValidator.NOT__VALIDATE_REFERENCE_ONLY_CONDITIONS_FROM_CONDITION_MODEL_OR_FROM_CONDITIONAL_ELEMENTS,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.condition.ConditionPackage%>.Literals.UNARY_CONDITION__SHARED_COND_PART }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
        <eParameters name="context">
          <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
            <eTypeArguments/>
            <eTypeArguments/>
          </eGenericType>
        </eParameters>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Condition" abstract="true" eSuperTypes="#//condition/ComplexCondition">
      <eTypeParameters name="TargetType"/>
      <eOperations name="checkCondition" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eParameters name="condition" eType="#//condition/ComplexCondition"/>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"
          defaultValueLiteral="1"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="comparator" eType="#//condition/ComparatorEnum"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="target" lowerBound="1">
        <eGenericType eTypeParameter="#//condition/Condition/TargetType"/>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="instanceSelectors" upperBound="-1"
          eType="#//structure/SourceInstanceSelector" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EEnum" name="ComparatorEnum">
      <eLiterals name="EQ" literal="EQ"/>
      <eLiterals name="GT" value="1" literal="GT"/>
      <eLiterals name="LT" value="2" literal="LT"/>
      <eLiterals name="GE" value="3" literal="GE"/>
      <eLiterals name="LE" value="4" literal="LE"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="AttributeCondition">
      <eStructuralFeatures xsi:type="ecore:EReference" name="valueConstraints" lowerBound="1"
          upperBound="-1" eType="#//structure/constraint/ValueConstraint" containment="true"/>
      <eGenericSuperTypes eClassifier="#//condition/Condition">
        <eTypeArguments eClassifier="#//structure/source/ActualSourceSectionAttribute"/>
      </eGenericSuperTypes>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="CardinalityCondition">
      <eGenericSuperTypes eClassifier="#//condition/Condition">
        <eTypeArguments eClassifier="#//structure/source/SourceSectionClass"/>
      </eGenericSuperTypes>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ApplicationDependency">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A condition that allows to check whether another 'ConditionalElement' was applied/executed (at least once; exactly n times; for the concrete section instance specified via the given 'InstancePointer', ...).&#xD;&#xA;"/>
      </eAnnotations>
      <eGenericSuperTypes eClassifier="#//condition/Condition">
        <eTypeArguments eClassifier="#//ConditionalElement"/>
      </eGenericSuperTypes>
    </eClassifiers>
  </eSubpackages>
  <eSubpackages name="mapping" nsURI="http://mfreund.de/pamtram/mapping" nsPrefix="mapping">
    <eAnnotations source="http://www.eclipse.org/OCL/Import">
      <details key="ecore" value="http://www.eclipse.org/emf/2002/Ecore"/>
      <details key="genlib" value="http://www.et.tu-dresden.de/ifa/agtele/genlib"/>
    </eAnnotations>
    <eClassifiers xsi:type="ecore:EClass" name="MappingType" abstract="true" eSuperTypes="#//NamedElement #//DeactivatableElement">
      <eStructuralFeatures xsi:type="ecore:EReference" name="sourceSection" lowerBound="1"
          eType="#//structure/source/SourceSection"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Mapping" eSuperTypes="#//mapping/MappingType #//ConditionalElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="constraints" value="containsHintGroups containsDeactivatedHintGroups"/>
      </eAnnotations>
      <eOperations name="getActiveMappingHintGroups" upperBound="-1" eType="#//mapping/MappingHintGroupType">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="EList&lt;MappingHintGroupType> hintGroups = getMappingHintGroups();&#xD;&#xA;EList&lt;MappingHintGroupType> activeHintGroups = new BasicEList&lt;>();&#xD;&#xA;for (MappingHintGroupType hintGroup : hintGroups) {&#xD;&#xA;&#x9;if(hintGroup instanceof InstantiableMappingHintGroup &amp;&amp; &#xD;&#xA;&#x9;&#x9;&#x9;((InstantiableMappingHintGroup) hintGroup).isDeactivated()) {&#xD;&#xA;&#x9;&#x9;// skip this one&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;activeHintGroups.add(hintGroup);&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return activeHintGroups;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="getActiveImportedMappingHintGroups" upperBound="-1" eType="#//mapping/MappingHintGroupImporter">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="EList&lt;MappingHintGroupImporter> hintGroups = getImportedMappingHintGroups();&#xD;&#xA;EList&lt;MappingHintGroupImporter> activeHintGroups = new BasicEList&lt;>();&#xD;&#xA;for (MappingHintGroupImporter hintGroup : hintGroups) {&#xD;&#xA;&#x9;if(hintGroup.isDeactivated()) {&#xD;&#xA;&#x9;&#x9;// skip this one&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;activeHintGroups.add(hintGroup);&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return activeHintGroups;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="validateContainsHintGroups" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#xD;&#xA;boolean result = !this.getMappingHintGroups().isEmpty();&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;The mapping does not contain any hint groups!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.WARNING,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.mapping.util.MappingValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;MappingValidator.MAPPING__VALIDATE_CONTAINS_HINT_GROUPS,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.mapping.MappingPackage%>.Literals.MAPPING }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
        <eParameters name="context">
          <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
            <eTypeArguments/>
            <eTypeArguments/>
          </eGenericType>
        </eParameters>
      </eOperations>
      <eOperations name="validateContainsDeactivatedHintGroups" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#xD;&#xA;boolean result = this.isDeactivated() ? this.getMappingHintGroups().size() == this.getActiveMappingHintGroups().size() &amp;&amp; this.getImportedMappingHintGroups().size() == this.getActiveImportedMappingHintGroups().size() : true;&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;The mapping contains deactivated hint groups that will not be used in a transformation!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.WARNING,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.mapping.util.MappingValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;MappingValidator.MAPPING__VALIDATE_CONTAINS_DEACTIVATED_HINT_GROUPS,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.mapping.MappingPackage%>.Literals.MAPPING }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
        <eParameters name="context">
          <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
            <eTypeArguments/>
            <eTypeArguments/>
          </eGenericType>
        </eParameters>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="mappingHintGroups" upperBound="-1"
          eType="#//mapping/MappingHintGroupType" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="importedMappingHintGroups"
          upperBound="-1" eType="#//mapping/MappingHintGroupImporter" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="globalVariables" upperBound="-1"
          eType="#//mapping/GlobalAttribute" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="abstract" lowerBound="1"
          eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
          defaultValueLiteral="false"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="MappingHintGroupType" abstract="true"
        eSuperTypes="#//NamedElement">
      <eStructuralFeatures xsi:type="ecore:EReference" name="targetSection" lowerBound="1"
          eType="#//structure/target/TargetSection"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="mappingHints" upperBound="-1"
          eType="#//mapping/MappingHint" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="extend" upperBound="-1"
          eType="#//mapping/MappingHintGroupType"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="InstantiableMappingHintGroup" abstract="true"
        eSuperTypes="#//NamedElement #//DeactivatableElement #//ConditionalElement"/>
    <eClassifiers xsi:type="ecore:EClass" name="MappingHintGroup" eSuperTypes="#//mapping/MappingHintGroupType #//mapping/InstantiableMappingHintGroup">
      <eStructuralFeatures xsi:type="ecore:EReference" name="containerSelector" eType="#//mapping/ContainerSelector"
          containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="MappingHintGroupImporter" eSuperTypes="#//NamedElement #//mapping/InstantiableMappingHintGroup">
      <eStructuralFeatures xsi:type="ecore:EReference" name="hintGroup" lowerBound="1"
          eType="#//mapping/ExportedMappingHintGroup"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="container" eType="#//structure/target/TargetSectionClass"
          unsettable="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="mappingHints" upperBound="-1"
          eType="#//mapping/MappingHintType" unsettable="true" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ExportedMappingHintGroup" eSuperTypes="#//mapping/MappingHintGroupType"/>
    <eClassifiers xsi:type="ecore:EClass" name="MappingHintBaseType" abstract="true"
        eSuperTypes="#//NamedElement"/>
    <eClassifiers xsi:type="ecore:EClass" name="MappingHintType" abstract="true" eSuperTypes="#//mapping/MappingHintBaseType"/>
    <eClassifiers xsi:type="ecore:EClass" name="MappingHint" abstract="true" eSuperTypes="#//mapping/MappingHintType #//ConditionalElement"/>
    <eClassifiers xsi:type="ecore:EClass" name="HintImporterMappingHint" abstract="true"
        eSuperTypes="#//mapping/MappingHintType"/>
    <eClassifiers xsi:type="ecore:EClass" name="AttributeMapping" eSuperTypes="#//mapping/MappingHint #//ExpressionElement #//ModifiableElement #//mapping/ExpandableHint">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="constraints" value="targetAttributeMatchesSection"/>
      </eAnnotations>
      <eOperations name="getLocalSourceElements" unique="false" upperBound="-1" eType="#//mapping/AttributeMappingSourceElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#x9;&#x9;EList&lt;AttributeMappingSourceElement> elements= new org.eclipse.emf.common.util.BasicEList&lt;AttributeMappingSourceElement>();&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;for(AttributeMappingSourceInterface i : this.getSourceElements()){&#xD;&#xA;&#x9;&#x9;&#x9;if(i instanceof AttributeMappingSourceElement){&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;elements.add((AttributeMappingSourceElement) i);&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;return elements;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="getExternalSourceElements" unique="false" upperBound="-1"
          eType="#//mapping/AttributeMappingExternalSourceElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="EList&lt;AttributeMappingExternalSourceElement> elements= new org.eclipse.emf.common.util.BasicEList&lt;AttributeMappingExternalSourceElement>();&#xD;&#xA;&#xD;&#xA;for(AttributeMappingSourceInterface i : this.getSourceElements()){&#xD;&#xA;&#x9;if(i instanceof AttributeMappingExternalSourceElement){&#xD;&#xA;&#x9;&#x9;elements.add((AttributeMappingExternalSourceElement) i);&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return elements;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="validateTargetAttributeMatchesSection" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#xD;&#xA;if(this.getTarget() == null || !(this.eContainer() instanceof &lt;%pamtram.mapping.MappingHintGroupType%>) || ((MappingHintGroupType) this.eContainer()).getTargetSection() == null) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;MappingHintGroupType containingHintGroup = ((MappingHintGroupType) this.eContainer());&#xD;&#xA;&#xD;&#xA;boolean result = this.getTarget().getContainingSection() == containingHintGroup.getTargetSection() || containingHintGroup.getTargetSection().getExtend().contains(this.getTarget().getContainingSection());&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;The target attribute '&quot; + this.getTarget().getName() + &quot;' is not part of the target section referenced by parent hint group &quot; + ((MappingHintGroupType) this.eContainer()).getName() + &quot;!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.mapping.util.MappingValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;MappingValidator.ATTRIBUTE_MAPPING__VALIDATE_TARGET_ATTRIBUTE_MATCHES_SECTION,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.mapping.MappingPackage%>.Literals.ATTRIBUTE_MAPPING__TARGET }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
        <eParameters name="context">
          <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
            <eTypeArguments/>
            <eTypeArguments/>
          </eGenericType>
        </eParameters>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="target" lowerBound="1"
          eType="#//structure/target/TargetSectionAttribute"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="sourceElements" lowerBound="1"
          upperBound="-1" eType="#//mapping/AttributeMappingSourceInterface" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="AttributeMappingSourceInterface" abstract="true"
        interface="true" eSuperTypes="#//mapping/MappingHintSourceInterface"/>
    <eClassifiers xsi:type="ecore:EClass" name="AttributeMappingSourceElement">
      <eGenericSuperTypes eClassifier="#//structure/LocalDynamicSourceElement">
        <eTypeArguments eClassifier="#//structure/source/SourceSection"/>
        <eTypeArguments eClassifier="#//structure/source/SourceSectionClass"/>
        <eTypeArguments eClassifier="#//structure/source/SourceSectionReference"/>
        <eTypeArguments eClassifier="#//structure/source/SourceSectionAttribute"/>
      </eGenericSuperTypes>
      <eGenericSuperTypes eClassifier="#//mapping/AttributeMappingSourceInterface"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="AttributeMappingExternalSourceElement">
      <eGenericSuperTypes eClassifier="#//structure/ExternalDynamicSourceElement">
        <eTypeArguments eClassifier="#//structure/source/SourceSection"/>
        <eTypeArguments eClassifier="#//structure/source/SourceSectionClass"/>
        <eTypeArguments eClassifier="#//structure/source/SourceSectionReference"/>
        <eTypeArguments eClassifier="#//structure/source/SourceSectionAttribute"/>
      </eGenericSuperTypes>
      <eGenericSuperTypes eClassifier="#//mapping/AttributeMappingSourceInterface"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="AttributeMappingGlobalSourceElement">
      <eGenericSuperTypes eClassifier="#//structure/GlobalDynamicSourceElement">
        <eTypeArguments eClassifier="#//structure/source/SourceSection"/>
        <eTypeArguments eClassifier="#//structure/source/SourceSectionClass"/>
        <eTypeArguments eClassifier="#//structure/source/SourceSectionReference"/>
        <eTypeArguments eClassifier="#//structure/source/SourceSectionAttribute"/>
      </eGenericSuperTypes>
      <eGenericSuperTypes eClassifier="#//mapping/AttributeMappingSourceInterface"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="CardinalityMapping" eSuperTypes="#//mapping/MappingHint #//ExpressionElement #//ModifiableElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="constraints" value="sourceClassMatchesSection sourceClassIsVariableCardinality targetClassMatchesSection targetClassIsVariableCardinality noCardinalityMappingForSourceSectionRoot"/>
      </eAnnotations>
      <eOperations name="validateSourceElementMatchesSection" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#xD;&#xA;if(this.getSource() == null || !(this.eContainer().eContainer() instanceof &lt;%pamtram.mapping.Mapping%>) || ((Mapping) this.eContainer().eContainer()).getSourceSection() == null) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;boolean result = this.getSource().getContainingSection() == ((Mapping) this.eContainer().eContainer()).getSourceSection();&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;The source element '&quot; + this.getSource().getName() + &quot;' is not part of the source section referenced by parent mapping '&quot; + ((pamtram.mapping.Mapping) this.eContainer().eContainer()).getName() + &quot;'!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.mapping.util.MappingValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;MappingValidator.CARDINALITY_MAPPING__VALIDATE_SOURCE_ELEMENT_MATCHES_SECTION,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.mapping.MappingPackage%>.Literals.CARDINALITY_MAPPING__SOURCE }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
        <eParameters name="context">
          <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
            <eTypeArguments/>
            <eTypeArguments/>
          </eGenericType>
        </eParameters>
      </eOperations>
      <eOperations name="validateTargetClassMatchesSection" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#xD;&#xA;if(this.getTarget() == null || !(this.eContainer() instanceof &lt;%pamtram.mapping.MappingHintGroupType%>) || ((MappingHintGroupType) this.eContainer()).getTargetSection() == null) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;boolean result = this.getTarget().getContainingSection() == ((MappingHintGroupType) this.eContainer()).getTargetSection();&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;The target class '&quot; + this.getTarget().getName() + &quot;' is not part of the target section referenced by parent hint group '&quot; + ((MappingHintGroupType) this.eContainer()).getName() + &quot;'!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.mapping.util.MappingValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;MappingValidator.CARDINALITY_MAPPING__VALIDATE_TARGET_CLASS_MATCHES_SECTION,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.mapping.MappingPackage%>.Literals.CARDINALITY_MAPPING__TARGET }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
        <eParameters name="context">
          <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
            <eTypeArguments/>
            <eTypeArguments/>
          </eGenericType>
        </eParameters>
      </eOperations>
      <eOperations name="validateSourceClassIsVariableCardinality" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#xD;&#xA;boolean result = this.getSource() == null || !(this.getSource() instanceof SourceSectionClass) ? true : ((SourceSectionClass) this.getSource()).getCardinality() != CardinalityType.ONE;&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;Cardinality mappings may only be defined for source classes with a specified cardinality distinct from 'CardinalityType::ONE'!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.mapping.util.MappingValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;MappingValidator.CARDINALITY_MAPPING__VALIDATE_SOURCE_CLASS_IS_VARIABLE_CARDINALITY,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.mapping.MappingPackage%>.Literals.CARDINALITY_MAPPING__SOURCE }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
        <eParameters name="context">
          <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
            <eTypeArguments/>
            <eTypeArguments/>
          </eGenericType>
        </eParameters>
      </eOperations>
      <eOperations name="validateTargetClassIsVariableCardinality" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#xD;&#xA;boolean result = this.getTarget() == null ? true : this.getTarget().getCardinality() != &lt;%pamtram.structure.generic.CardinalityType%>.ONE;&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;Cardinality mappings may only be defined for target classes with a specified cardinality distinct from 'CardinalityType::ONE'!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.mapping.util.MappingValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;MappingValidator.CARDINALITY_MAPPING__VALIDATE_TARGET_CLASS_IS_VARIABLE_CARDINALITY,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.mapping.MappingPackage%>.Literals.CARDINALITY_MAPPING__TARGET }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
        <eParameters name="context">
          <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
            <eTypeArguments/>
            <eTypeArguments/>
          </eGenericType>
        </eParameters>
      </eOperations>
      <eOperations name="validateNoCardinalityMappingForSourceSectionRoot" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#xD;&#xA;boolean result = this.getSource() == null ? true : this.getSource() != this.getSource().getContainingSection();&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;Cardinality mappings must not be defined for SourceSection root classes!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.mapping.util.MappingValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;MappingValidator.CARDINALITY_MAPPING__VALIDATE_NO_CARDINALITY_MAPPING_FOR_SOURCE_SECTION_ROOT,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.mapping.MappingPackage%>.Literals.CARDINALITY_MAPPING__SOURCE }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
        <eParameters name="context">
          <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
            <eTypeArguments/>
            <eTypeArguments/>
          </eGenericType>
        </eParameters>
      </eOperations>
      <eOperations name="validateOnlySourceOrSourceElements" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#xD;&#xA;boolean result = this.getSource() == null || this.getSourceElements() == null || this.getSourceElements().isEmpty();&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;A CardinalityMapping must not specify both a 'source' and a set of 'sourceElements'!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.mapping.util.MappingValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;MappingValidator.CARDINALITY_MAPPING__VALIDATE_ONLY_SOURCE_OR_SOURCE_ELEMENTS,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.mapping.MappingPackage%>.Literals.CARDINALITY_MAPPING }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
        <eParameters name="context">
          <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
            <eTypeArguments/>
            <eTypeArguments/>
          </eGenericType>
        </eParameters>
      </eOperations>
      <eOperations name="validateExpressionOnlyForSourceElements" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#xD;&#xA;boolean result = !this.getSourceElements().isEmpty() || this.expression.isEmpty();&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;A CardinalityMapping must only specify an 'expression' if it also specifies a set of 'sourceElements'!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.mapping.util.MappingValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;MappingValidator.CARDINALITY_MAPPING__VALIDATE_EXPRESSION_ONLY_FOR_SOURCE_ELEMENTS,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.mapping.MappingPackage%>.Literals.CARDINALITY_MAPPING }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
        <eParameters name="context">
          <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
            <eTypeArguments/>
            <eTypeArguments/>
          </eGenericType>
        </eParameters>
      </eOperations>
      <eOperations name="validateModifiersOnlyForSourceElements" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#xD;&#xA;boolean result = !this.getSourceElements().isEmpty() || this.getModifiers().isEmpty();&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;A CardinalityMapping must only specify 'modifiers' if it also specifies a set of 'sourceElements'!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.mapping.util.MappingValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;MappingValidator.CARDINALITY_MAPPING__VALIDATE_MODIFIERS_ONLY_FOR_SOURCE_ELEMENTS,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.mapping.MappingPackage%>.Literals.CARDINALITY_MAPPING }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
        <eParameters name="context">
          <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
            <eTypeArguments/>
            <eTypeArguments/>
          </eGenericType>
        </eParameters>
      </eOperations>
      <eOperations name="getLocalSourceElements" unique="false" upperBound="-1" eType="#//mapping/CardinalityMappingSourceElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="return new &lt;%org.eclipse.emf.common.util.BasicEList%>&lt;>(this.getSourceElements().parallelStream().filter(s -> s instanceof CardinalityMappingSourceElement).map(s -> (CardinalityMappingSourceElement) s).collect(&lt;%java.util.stream.Collectors%>.toList()));"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="getExternalSourceElements" unique="false" upperBound="-1"
          eType="#//mapping/CardinalityMappingExternalSourceElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="return new &lt;%org.eclipse.emf.common.util.BasicEList%>&lt;>(this.getSourceElements().parallelStream().filter(s -> s instanceof CardinalityMappingExternalSourceElement).map(s -> (CardinalityMappingExternalSourceElement) s).collect(&lt;%java.util.stream.Collectors%>.toList()));"/>
        </eAnnotations>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="source">
        <eGenericType eClassifier="#//structure/generic/MetaModelElement">
          <eTypeArguments eClassifier="#//structure/source/SourceSection"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionClass"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionReference"/>
          <eTypeArguments eClassifier="#//structure/source/SourceSectionAttribute"/>
        </eGenericType>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="target" lowerBound="1"
          eType="#//structure/target/TargetSectionClass"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="sourceElements" upperBound="-1"
          eType="#//mapping/CardinalityMappingSourceInterface" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="CardinalityMappingSourceInterface"
        abstract="true" interface="true" eSuperTypes="#//mapping/MappingHintSourceInterface"/>
    <eClassifiers xsi:type="ecore:EClass" name="CardinalityMappingSourceElement">
      <eGenericSuperTypes eClassifier="#//structure/LocalDynamicSourceElement">
        <eTypeArguments eClassifier="#//structure/source/SourceSection"/>
        <eTypeArguments eClassifier="#//structure/source/SourceSectionClass"/>
        <eTypeArguments eClassifier="#//structure/source/SourceSectionReference"/>
        <eTypeArguments eClassifier="#//structure/source/SourceSectionAttribute"/>
      </eGenericSuperTypes>
      <eGenericSuperTypes eClassifier="#//mapping/CardinalityMappingSourceInterface"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="CardinalityMappingExternalSourceElement">
      <eGenericSuperTypes eClassifier="#//structure/ExternalDynamicSourceElement">
        <eTypeArguments eClassifier="#//structure/source/SourceSection"/>
        <eTypeArguments eClassifier="#//structure/source/SourceSectionClass"/>
        <eTypeArguments eClassifier="#//structure/source/SourceSectionReference"/>
        <eTypeArguments eClassifier="#//structure/source/SourceSectionAttribute"/>
      </eGenericSuperTypes>
      <eGenericSuperTypes eClassifier="#//mapping/CardinalityMappingSourceInterface"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="CardinalityMappingGlobalSourceElement">
      <eGenericSuperTypes eClassifier="#//structure/GlobalDynamicSourceElement">
        <eTypeArguments eClassifier="#//structure/source/SourceSection"/>
        <eTypeArguments eClassifier="#//structure/source/SourceSectionClass"/>
        <eTypeArguments eClassifier="#//structure/source/SourceSectionReference"/>
        <eTypeArguments eClassifier="#//structure/source/SourceSectionAttribute"/>
      </eGenericSuperTypes>
      <eGenericSuperTypes eClassifier="#//mapping/CardinalityMappingSourceInterface"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ReferenceTargetSelector" eSuperTypes="#//mapping/MappingHint">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="constraints" value="affectedReferenceIsNonContainment affectedReferenceMatchesSection"/>
      </eAnnotations>
      <eOperations name="validateAffectedReferenceIsNonContainment" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#xD;&#xA;boolean result = this.getAffectedReference() == null || this.getAffectedReference().getEReference() == null ? true : !this.getAffectedReference().getEReference().isContainment();&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;The affected reference '&quot; + this.getAffectedReference().getName() + &quot;' is no non-containment reference!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.mapping.util.MappingValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;MappingValidator.REFERENCE_TARGET_SELECTOR__VALIDATE_AFFECTED_REFERENCE_IS_NON_CONTAINMENT,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.mapping.MappingPackage%>.Literals.REFERENCE_TARGET_SELECTOR__AFFECTED_REFERENCE }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
        <eParameters name="context">
          <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
            <eTypeArguments/>
            <eTypeArguments/>
          </eGenericType>
        </eParameters>
      </eOperations>
      <eOperations name="validateAffectedReferenceMatchesSection" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#xD;&#xA;if(this.getAffectedReference() == null) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&lt;%pamtram.structure.target.TargetSection%> targetSection = this.eContainer() instanceof &lt;%pamtram.mapping.MappingHintGroupType%> ? ((MappingHintGroupType) this.eContainer()).getTargetSection() : ((&lt;%pamtram.mapping.MappingHintGroupImporter%>) this.eContainer()).getHintGroup().getTargetSection();&#xD;&#xA;&#xD;&#xA;boolean result = targetSection == null ? true : this.getAffectedReference().getContainingSection() == targetSection || targetSection.getExtend().contains(this.getAffectedReference().getContainingSection());&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String hintGroupName = this.eContainer() instanceof MappingHintGroupType ? ((MappingHintGroupType) this.eContainer()).getName() : ((MappingHintGroupImporter) this.eContainer()).getHintGroup().getName();&#xD;&#xA;&#x9;String errorMessage = &quot;The affected reference '&quot; + this.getAffectedReference().getName() + &quot;' is not part of the target section referenced by parent hint group '&quot; + hintGroupName + &quot;'!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.mapping.util.MappingValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;MappingValidator.REFERENCE_TARGET_SELECTOR__VALIDATE_AFFECTED_REFERENCE_MATCHES_SECTION,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.mapping.MappingPackage%>.Literals.REFERENCE_TARGET_SELECTOR__AFFECTED_REFERENCE }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
        <eParameters name="context">
          <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
            <eTypeArguments/>
            <eTypeArguments/>
          </eGenericType>
        </eParameters>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="affectedReference" lowerBound="1"
          eType="#//structure/target/TargetSectionCrossReference"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="matcher" lowerBound="1"
          eType="#//mapping/Matcher" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Matcher" abstract="true"/>
    <eClassifiers xsi:type="ecore:EClass" name="ClassMatcher" eSuperTypes="#//mapping/Matcher">
      <eStructuralFeatures xsi:type="ecore:EReference" name="targetClass" lowerBound="1"
          eType="#//structure/target/TargetSectionClass"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="AttributeMatcher" eSuperTypes="#//mapping/Matcher #//mapping/ExpandableHint #//structure/InstanceSelector">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="constraints" value="targetMatchesAffectedReferenceType"/>
      </eAnnotations>
      <eOperations name="validateTargetMatchesAffectedReferenceType" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#xD;&#xA;if(!(this.eContainer() instanceof &lt;%pamtram.mapping.ReferenceTargetSelector%>) || ((ReferenceTargetSelector) this.eContainer()).getAffectedReference() == null || ((ReferenceTargetSelector) this.eContainer()).getAffectedReference().getEReference() == null || this.getTarget() == null || !(this.getTarget().eContainer() instanceof pamtram.structure.generic.Class&lt;?, ?, ?, ?>)) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;boolean result = ((ReferenceTargetSelector) this.eContainer()).getAffectedReference().getEReference().getEReferenceType().isSuperTypeOf(((pamtram.structure.generic.Class&lt;?, ?, ?, ?>) this.getTarget().eContainer()).getEClass());&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;The type of the class containing the target attribute ('&quot; + &#xD;&#xA;&#x9;&#x9;&#x9;((pamtram.structure.generic.Class&lt;?, ?, ?, ?>) this.getTarget().eContainer()).getEClass().getName() + &quot;') is not allowed by the affected reference of the parent ReferenceTargetSelector that &quot; +&#xD;&#xA;&#x9;&#x9;&#x9;&quot;requires a (sub-)type of '&quot; + ((pamtram.mapping.ReferenceTargetSelector) this.eContainer()).getAffectedReference().getEReference().getEReferenceType().getName() + &quot;'!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.mapping.util.MappingValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;MappingValidator.ATTRIBUTE_MATCHER__VALIDATE_TARGET_MATCHES_AFFECTED_REFERENCE_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.mapping.MappingPackage%>.Literals.ATTRIBUTE_MATCHER__TARGET }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
        <eParameters name="context">
          <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
            <eTypeArguments/>
            <eTypeArguments/>
          </eGenericType>
        </eParameters>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="target" lowerBound="1"
          eType="#//structure/target/TargetSectionAttribute"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ContainerSelector" eSuperTypes="#//mapping/MappingHintBaseType #//structure/InstanceSelector">
      <eStructuralFeatures xsi:type="ecore:EReference" name="targetAttributes" lowerBound="1"
          upperBound="-1" eType="#//mapping/ContainerSelectorTargetAttribute" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ContainerSelectorTargetAttribute">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="constraints" value="sourceMatchesPossibleContainerType"/>
      </eAnnotations>
      <eOperations name="validateSourceMatchesPossibleContainerType" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#xD;&#xA;if(!(this.eContainer().eContainer() instanceof &lt;%pamtram.mapping.MappingHintGroupType%>) || this.getSource() == null || !(this.getSource().eContainer() instanceof pamtram.structure.generic.Class&lt;?, ?, ?, ?>)) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&lt;%pamtram.structure.target.TargetSection%> targetSection = ((MappingHintGroupType) this.eContainer().eContainer()).getTargetSection();&#xD;&#xA;&#xD;&#xA;boolean result = this.getSource() == null || targetSection == null ? true : ((pamtram.structure.generic.Class&lt;?, ?, ?, ?>) this.getSource().eContainer()).getEClass().getEAllContainments().parallelStream().anyMatch(r -> r.getEReferenceType().isSuperTypeOf(targetSection.getEClass()));&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;The type of the parent hint group's target section ('&quot; + &#xD;&#xA;&#x9;&#x9;((MappingHintGroupType) this.eContainer().eContainer()).getTargetSection().getEClass().getName() + &#xD;&#xA;&#x9;&#x9;&quot;') cannot be connected to (contained in) the type of the class containing the target attribute ('&quot; + &#xD;&#xA;&#x9;&#x9;((pamtram.structure.generic.Class&lt;?, ?, ?, ?>) this.getSource().eContainer()).getName() + &quot;')!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.mapping.util.MappingValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;MappingValidator.CONTAINER_SELECTOR_TARGET_ATTRIBUTE__VALIDATE_SOURCE_MATCHES_POSSIBLE_CONTAINER_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.structure.StructurePackage%>.Literals.DYNAMIC_SOURCE_ELEMENT__SOURCE }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
        <eParameters name="context">
          <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
            <eTypeArguments/>
            <eTypeArguments/>
          </eGenericType>
        </eParameters>
      </eOperations>
      <eGenericSuperTypes eClassifier="#//structure/DynamicSourceElement">
        <eTypeArguments eClassifier="#//structure/target/TargetSection"/>
        <eTypeArguments eClassifier="#//structure/target/TargetSectionClass"/>
        <eTypeArguments eClassifier="#//structure/target/TargetSectionReference"/>
        <eTypeArguments eClassifier="#//structure/target/TargetSectionAttribute"/>
      </eGenericSuperTypes>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="MappedAttributeValueExpander" abstract="true"
        eSuperTypes="#//mapping/HintImporterMappingHint">
      <eOperations name="getSourceAttribute" eType="#//structure/source/SourceSectionAttribute">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="if(this instanceof LocalMappedAttributeValueExpander) {&#xD;&#xA;&#x9;return ((LocalMappedAttributeValueExpander) this).getSource();&#xD;&#xA;} else if(this instanceof ExternalMappedAttributeValueExpander) {&#xD;&#xA;&#x9;return ((ExternalMappedAttributeValueExpander) this).getSource();&#xD;&#xA;} else {&#xD;&#xA;&#x9;return null;&#xD;&#xA;}"/>
        </eAnnotations>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="hintsToExpand" lowerBound="1"
          upperBound="-1" eType="#//mapping/ExpandableHint"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="LocalMappedAttributeValueExpander">
      <eGenericSuperTypes eClassifier="#//structure/LocalDynamicSourceElement">
        <eTypeArguments eClassifier="#//structure/source/SourceSection"/>
        <eTypeArguments eClassifier="#//structure/source/SourceSectionClass"/>
        <eTypeArguments eClassifier="#//structure/source/SourceSectionReference"/>
        <eTypeArguments eClassifier="#//structure/source/SourceSectionAttribute"/>
      </eGenericSuperTypes>
      <eGenericSuperTypes eClassifier="#//mapping/MappedAttributeValueExpander"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="MappedAttributeValuePrepender" eSuperTypes="#//mapping/LocalMappedAttributeValueExpander"/>
    <eClassifiers xsi:type="ecore:EClass" name="MappedAttributeValueAppender" eSuperTypes="#//mapping/LocalMappedAttributeValueExpander"/>
    <eClassifiers xsi:type="ecore:EClass" name="GlobalAttribute" eSuperTypes="#//NamedElement #//ModifiableElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="constraints" value="sourceAttributeHasUpperBoundOne"/>
      </eAnnotations>
      <eOperations name="validateSourceAttributeHasUpperBoundOne" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#xD;&#xA;boolean result = this.getSource() == null || this.getSource().getAttribute() == null ? true : this.getSource().getAttribute().getUpperBound() == 1;&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#xD;&#xA;&#x9;String errorMessage = &quot;Global attributes may only be defined for attributes that have an upper bound of 1!&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;diagnostics.add(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9;&lt;%pamtram.mapping.util.MappingValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;MappingValidator.GLOBAL_ATTRIBUTE__VALIDATE_SOURCE_ATTRIBUTE_HAS_UPPER_BOUND_ONE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9;new Object[] { this, &lt;%pamtram.mapping.MappingPackage%>.Literals.GLOBAL_ATTRIBUTE__SOURCE }));&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
        <eParameters name="context">
          <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
            <eTypeArguments/>
            <eTypeArguments/>
          </eGenericType>
        </eParameters>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="source" lowerBound="1"
          eType="#//structure/source/ActualSourceSectionAttribute"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="GlobalAttributeImporter" eSuperTypes="#//NamedElement #//mapping/AttributeMappingSourceInterface #//structure/InstanceSelectorSourceInterface #//structure/constraint/ValueConstraintSourceInterface">
      <eStructuralFeatures xsi:type="ecore:EReference" name="globalAttribute" lowerBound="1"
          eType="#//mapping/GlobalAttribute"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="MappingHintSourceInterface" abstract="true"
        interface="true" eSuperTypes="#//NamedElement"/>
    <eClassifiers xsi:type="ecore:EClass" name="ExternalMappedAttributeValueExpander"
        abstract="true">
      <eGenericSuperTypes eClassifier="#//structure/ExternalDynamicSourceElement">
        <eTypeArguments eClassifier="#//structure/source/SourceSection"/>
        <eTypeArguments eClassifier="#//structure/source/SourceSectionClass"/>
        <eTypeArguments eClassifier="#//structure/source/SourceSectionReference"/>
        <eTypeArguments eClassifier="#//structure/source/SourceSectionAttribute"/>
      </eGenericSuperTypes>
      <eGenericSuperTypes eClassifier="#//mapping/MappedAttributeValueExpander"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ExternalMappedAttributeValuePrepender"
        eSuperTypes="#//mapping/ExternalMappedAttributeValueExpander"/>
    <eClassifiers xsi:type="ecore:EClass" name="ExternalMappedAttributeValueAppender"
        eSuperTypes="#//mapping/ExternalMappedAttributeValueExpander"/>
    <eClassifiers xsi:type="ecore:EClass" name="ExpandableHint" abstract="true" interface="true"/>
    <eSubpackages name="modifier" nsURI="http://mfreund.de/pamtram/mapping/modifier"
        nsPrefix="modifier">
      <eClassifiers xsi:type="ecore:EClass" name="ValueModifierSet" eSuperTypes="#//NamedElement">
        <eStructuralFeatures xsi:type="ecore:EReference" name="modifiers" upperBound="-1"
            eType="#//mapping/modifier/ValueModifier" containment="true"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ValueModifier" abstract="true" interface="true"
          eSuperTypes="#//NamedElement">
        <eOperations name="modifyValue" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
          <eParameters name="value" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="UniqueNumberAppender" eSuperTypes="#//mapping/modifier/ValueModifier"/>
      <eClassifiers xsi:type="ecore:EClass" name="NumericModifier" abstract="true"
          eSuperTypes="#//mapping/modifier/ValueModifier"/>
      <eClassifiers xsi:type="ecore:EClass" name="ExpressionModifier" eSuperTypes="#//mapping/modifier/NumericModifier #//ExpressionElement"/>
      <eClassifiers xsi:type="ecore:EClass" name="StringModifier" abstract="true"
          eSuperTypes="#//mapping/modifier/ValueModifier"/>
      <eClassifiers xsi:type="ecore:EClass" name="SubstringReplacer" eSuperTypes="#//mapping/modifier/StringModifier">
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="regex" lowerBound="1"
            eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="replacement" lowerBound="1"
            eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="StringAppender" eSuperTypes="#//mapping/modifier/StringModifier">
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="string" lowerBound="1"
            eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"
            defaultValueLiteral=""/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="StringPrepender" eSuperTypes="#//mapping/modifier/StringModifier">
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="string" lowerBound="1"
            eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"
            defaultValueLiteral=""/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ToLowerCaseConverter" eSuperTypes="#//mapping/modifier/StringModifier">
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="regex" lowerBound="1"
            eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ToUpperCaseConverter" eSuperTypes="#//mapping/modifier/StringModifier">
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="regex" lowerBound="1"
            eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
      </eClassifiers>
    </eSubpackages>
  </eSubpackages>
</ecore:EPackage>
