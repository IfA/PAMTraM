/**
 * 
 */
package de.mfreund.gentrans.transformation;

import java.util.Collection;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Set;

import org.eclipse.emf.ecore.EObject;

import pamtram.mapping.Mapping;
import pamtram.mapping.MappingHint;
import pamtram.mapping.MappingHintGroup;
import pamtram.mapping.ModelConnectionHint;
import pamtram.metamodel.SourceSectionClass;
import pamtram.metamodel.TargetSectionClass;

/**
 * Class for storing HintValues and target section objects generated by applying a Mapping.
 * <p>
 * Objects of this Class can be seen as Instances of a mapping.
 * @author Sascha Steffen
 * @version 0.8
 */
class MappingInstanceStorage {
	/**
	 * The source model Objects, referenced by containment References, that were mapped by this mapping instance.
	 */
	private LinkedHashMap<SourceSectionClass, Set<EObject>> sourceModelObjetsMapped;
	
	/**
	 * Associated Mapping
	 */
	private Mapping mapping;
	
	/**
	 * EObject associated to the root Class of the soureceMMSection of the mapping. 
	 */
	private EObject associatedSourceModelElement;
	
	/**
	 * Generated EObjects sorted bey TargetSectionCLass
	 */
	private LinkedHashMap<MappingHintGroup, LinkedHashMap<TargetSectionClass, LinkedList<EObjectTransformationHelper>>> instancesBySection;

	
	/**
	 * HintValues to be used when instantiating the mapping's target section(s)
	 */
	private LinkedHashMap<pamtram.mapping.MappingHint, LinkedList<Object>> hintValues;

	
	/**
	 * Hint value's to be used when linking the generated sections to the rest of the generated target model
	 */
	private LinkedHashMap<ModelConnectionHint, LinkedList<String>> modelConnectionHintValues;

	/**
	 *Constructor 
	 */
	public MappingInstanceStorage() {
		sourceModelObjetsMapped = new LinkedHashMap<SourceSectionClass, Set<EObject>>();
		hintValues = new LinkedHashMap<pamtram.mapping.MappingHint, LinkedList<Object>>();
		mapping = null;
		associatedSourceModelElement = null;
		instancesBySection = new LinkedHashMap<MappingHintGroup, LinkedHashMap<TargetSectionClass, LinkedList<EObjectTransformationHelper>>>();
		modelConnectionHintValues = new LinkedHashMap<ModelConnectionHint, LinkedList<String>>();

	}

	
	/**
	 * Add mapped source model Objects and HintValues of another MappingInstanceStorage
	 * @param newRefsAndHints
	 */
	void add(MappingInstanceStorage newRefsAndHints) {
		// combine refs
		this.addSourceModelObjectsMapped(newRefsAndHints.getSourceModelObjectsMapped());

		// combine hints
		this.addHintValues(newRefsAndHints.getHintValues());

		// combine connectionHints
		this.addModelConnectionHintValues(newRefsAndHints
				.getModelConnectionHintValues());

	}

	/**
	 * Add new hint value.
	 * @param hint
	 * @param value
	 */
	void addHintValue(MappingHint hint, String value) {
		if (!hintValues.containsKey(hint)) {
			hintValues.put(hint, new LinkedList<Object>());
		}
		hintValues.get(hint).add(value);
	}

	/**
	 *Add several new hint values.
	 * @param newHintValues
	 */
	void addHintValues(
			LinkedHashMap<pamtram.mapping.MappingHint, LinkedList<Object>> newHintValues) {
		for (MappingHint h : newHintValues.keySet()) {
			if (!hintValues.containsKey(h)) {
				hintValues.put(h, new LinkedList<Object>());
			}
			hintValues.get(h).addAll(newHintValues.get(h));
		}
	}

	/**
	 * Register several new target model instances
	 * @param grp
	 * @param section
	 * @param insts
	 */
	void addInstances(MappingHintGroup grp,
			TargetSectionClass section, Collection<EObjectTransformationHelper> insts) {
		generateInstancesCollectionsIfNeeded(grp, section);
		instancesBySection.get(grp).get(section).addAll(insts);
	}

	/**
	 * Add new value for a ModelConnectionHint
	 * @param hint
	 * @param value
	 */
	void addModelConnectionHintValue(ModelConnectionHint hint,
			String value) {
		if (!modelConnectionHintValues.containsKey(hint)) {
			modelConnectionHintValues.put(hint, new LinkedList<String>());
		}
		modelConnectionHintValues.get(hint).add(value);
	}

	/**
	 * Add  values for several ModelConnectionHints
	 * @param newHintValues
	 */
	void addModelConnectionHintValues(
			LinkedHashMap<ModelConnectionHint, LinkedList<String>> newHintValues) {
		for (ModelConnectionHint h : newHintValues.keySet()) {
			if (!modelConnectionHintValues.containsKey(h)) {
				modelConnectionHintValues.put(h, new LinkedList<String>());
			}
			modelConnectionHintValues.get(h).addAll(newHintValues.get(h));
		}
	}

	/**
	 * Register mapped source model objects
	 * @param refs
	 */
	void addSourceModelObjectsMapped(LinkedHashMap<SourceSectionClass, Set<EObject>> refs) {
		for (SourceSectionClass key : refs.keySet()) {
			if (!this.sourceModelObjetsMapped.containsKey(key)) {
				this.sourceModelObjetsMapped.put(key, new LinkedHashSet<EObject>());
			}
			this.sourceModelObjetsMapped.get(key).addAll(refs.get(key));
		}
	}

	/**
	 * Register mapped source model object
	 * @param srcModelElement
	 * @param srcSectionClass
	 */
	void addSourceModelObjectMapped(EObject srcModelElement,
			SourceSectionClass srcSectionClass) {
		if (!sourceModelObjetsMapped.containsKey(srcModelElement)) {
			sourceModelObjetsMapped.put(srcSectionClass, new LinkedHashSet<EObject>());
		}
		sourceModelObjetsMapped.get(srcSectionClass).add(srcModelElement);

	}

	/**
	 * Check source model object registry wether object was mapped already
	 * @param object
	 * @return true - if EObject is registered
	 */
	boolean containsSourceModelObjectMapped(EObject object) {
		return sourceModelObjetsMapped.values().contains(object);
	}

	/**
	 * Generate collections for grp and section in the instancesBySection Map in case they do not exist yet
	 * @param grp
	 * @param section
	 */
	private void generateInstancesCollectionsIfNeeded(MappingHintGroup grp,
			TargetSectionClass section) {
		if (!instancesBySection.containsKey(grp)) {
			instancesBySection
					.put(grp,
							new LinkedHashMap<TargetSectionClass, LinkedList<EObjectTransformationHelper>>());
		}

		if (!instancesBySection.get(grp).containsKey(section)) {
			instancesBySection.get(grp).put(section, new LinkedList<EObjectTransformationHelper>());
		}
	}

	/**
	 * @return associated source Model element
	 */
	public EObject getAssociatedSourceModelElement() {
		return associatedSourceModelElement;
	}

	/**
	 * Getter for the hintValues Map
	 * @return hint values
	 */
	public LinkedHashMap<MappingHint, LinkedList<Object>> getHintValues() {
		return hintValues;
	}

	
	/**
	 * Get generated target section instances associated with the MappingHintGroup
	 * @param group
	 * @return generated target section instances associated with the MappingHintGroup
	 */
	LinkedHashMap<TargetSectionClass, LinkedList<EObjectTransformationHelper>> getInstancesBySection(MappingHintGroup group) {
			return instancesBySection.get(group);
	}
	
	/**
	 *  generated target section instances associated with the MappingHintGroup and the specific section
	 * @param group
	 * @param section
	 * @return
	 */
	LinkedList<EObjectTransformationHelper> getInstances(MappingHintGroup group, TargetSectionClass section) {
		if(instancesBySection.containsKey(group)){
				return instancesBySection.get(group).get(section);

		} else return null;
	}

	/**
	 * @return associated Mapping
	 */
	public Mapping getMapping() {
		return mapping;
	}

	/**
	 * @return hint values for the ModelConnectionHints, created during the mapping of the source section
	 */
	public final LinkedHashMap<ModelConnectionHint, LinkedList<String>> getModelConnectionHintValues() {
		return modelConnectionHintValues;
	}

	
	/**
	 * @param hint
	 * @return ModelConnectionHint values for the specified target section
	 */
	LinkedList<String> getModelConnectionHintValues(
			ModelConnectionHint hint) {

		if (modelConnectionHintValues.containsKey(hint)) {
			return modelConnectionHintValues.get(hint);
		} else {
			return new LinkedList<String>();
		}
	}

	/**
	 * @return map of the source model Objects mapped
	 */
	public final LinkedHashMap<SourceSectionClass, Set<EObject>> getSourceModelObjectsMapped() {
		return sourceModelObjetsMapped;
	}

	/**
	 * @param associatedSourceModelElement
	 */
	public void setAssociatedSourceModelElement(
			EObject associatedSourceModelElement) {
		this.associatedSourceModelElement = associatedSourceModelElement;
	}

	/**
	 * Set the values for a mapping hint
	 * @param hint
	 * @param newHintValues
	 */
	void setHintValueList(MappingHint hint,
			LinkedList<Object> newHintValues) {
		hintValues.put(hint, newHintValues);

	}
	
	/**
	 * Set the values for a model connection hint
	 * @param hint
	 * @param newHintValues
	 */
	void setConnectionHintValueList(ModelConnectionHint hint,
			LinkedList<String> newHintValues) {
		modelConnectionHintValues.put(hint, newHintValues);

	}

	/**
	 * Set the associated mapping
	 * @param mapping
	 */
	public void setMapping(Mapping mapping) {
		this.mapping = mapping;
	}

	/**
	 * Set the map of source model objects mapped
	 * @param refs
	 */
	public void setSourceModelObjectsMapped(LinkedHashMap<SourceSectionClass, Set<EObject>> refs) {
		this.sourceModelObjetsMapped = refs;
	}

}
