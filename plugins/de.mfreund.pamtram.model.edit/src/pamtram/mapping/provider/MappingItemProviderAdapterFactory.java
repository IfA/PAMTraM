/**
 */
package pamtram.mapping.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.IItemStyledLabelProvider;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import pamtram.mapping.util.MappingAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support
 * Viewers. The adapters generated by this factory convert EMF adapter
 * notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}. The
 * adapters also support Eclipse property sheets. Note that most of the adapters
 * are shared among multiple instances. <!-- begin-user-doc --> <!--
 * end-user-doc -->
 * 
 * @generated
 */
public class MappingItemProviderAdapterFactory extends MappingAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this
	 * adapter factory. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement
	 * {@link org.eclipse.emf.edit.provider.IChangeNotifier}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by
	 * {@link #isFactoryForType isFactoryForType}. <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 * 
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<>();

	/**
	 * This constructs an instance. <!-- begin-user-doc --> <!-- end-user-doc
	 * -->
	 * 
	 * @generated
	 */
	public MappingItemProviderAdapterFactory() {
		this.supportedTypes.add(IEditingDomainItemProvider.class);
		this.supportedTypes.add(IStructuredItemContentProvider.class);
		this.supportedTypes.add(ITreeItemContentProvider.class);
		this.supportedTypes.add(IItemLabelProvider.class);
		this.supportedTypes.add(IItemPropertySource.class);
		this.supportedTypes.add(IItemStyledLabelProvider.class);
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link pamtram.mapping.Mapping} instances. <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 * 
	 * @generated
	 */
	protected MappingItemProvider mappingItemProvider;

	/**
	 * This creates an adapter for a {@link pamtram.mapping.Mapping}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createMappingAdapter() {
		if (this.mappingItemProvider == null) {
			this.mappingItemProvider = new MappingItemProvider(this);
		}

		return this.mappingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link pamtram.mapping.CardinalityMapping} instances. <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected CardinalityMappingItemProvider cardinalityMappingItemProvider;

	/**
	 * This creates an adapter for a {@link pamtram.mapping.CardinalityMapping}.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createCardinalityMappingAdapter() {
		if (this.cardinalityMappingItemProvider == null) {
			this.cardinalityMappingItemProvider = new CardinalityMappingItemProvider(this);
		}

		return this.cardinalityMappingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link pamtram.mapping.ReferenceTargetSelector} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ReferenceTargetSelectorItemProvider referenceTargetSelectorItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link pamtram.mapping.ReferenceTargetSelector}. <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createReferenceTargetSelectorAdapter() {
		if (this.referenceTargetSelectorItemProvider == null) {
			this.referenceTargetSelectorItemProvider = new ReferenceTargetSelectorItemProvider(this);
		}

		return this.referenceTargetSelectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link pamtram.mapping.AttributeMatcher} instances. <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected AttributeMatcherItemProvider attributeMatcherItemProvider;

	/**
	 * This creates an adapter for a {@link pamtram.mapping.AttributeMatcher}.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createAttributeMatcherAdapter() {
		if (this.attributeMatcherItemProvider == null) {
			this.attributeMatcherItemProvider = new AttributeMatcherItemProvider(this);
		}

		return this.attributeMatcherItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link pamtram.mapping.ClassMatcher} instances. <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ClassMatcherItemProvider classMatcherItemProvider;

	/**
	 * This creates an adapter for a {@link pamtram.mapping.ClassMatcher}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createClassMatcherAdapter() {
		if (this.classMatcherItemProvider == null) {
			this.classMatcherItemProvider = new ClassMatcherItemProvider(this);
		}

		return this.classMatcherItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link pamtram.mapping.MappingHintGroup} instances. <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected MappingHintGroupItemProvider mappingHintGroupItemProvider;

	/**
	 * This creates an adapter for a {@link pamtram.mapping.MappingHintGroup}.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createMappingHintGroupAdapter() {
		if (this.mappingHintGroupItemProvider == null) {
			this.mappingHintGroupItemProvider = new MappingHintGroupItemProvider(this);
		}

		return this.mappingHintGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link pamtram.mapping.MappingHintGroupImporter} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected MappingHintGroupImporterItemProvider mappingHintGroupImporterItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link pamtram.mapping.MappingHintGroupImporter}. <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createMappingHintGroupImporterAdapter() {
		if (this.mappingHintGroupImporterItemProvider == null) {
			this.mappingHintGroupImporterItemProvider = new MappingHintGroupImporterItemProvider(this);
		}

		return this.mappingHintGroupImporterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link pamtram.mapping.ExportedMappingHintGroup} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ExportedMappingHintGroupItemProvider exportedMappingHintGroupItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link pamtram.mapping.ExportedMappingHintGroup}. <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createExportedMappingHintGroupAdapter() {
		if (this.exportedMappingHintGroupItemProvider == null) {
			this.exportedMappingHintGroupItemProvider = new ExportedMappingHintGroupItemProvider(this);
		}

		return this.exportedMappingHintGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link pamtram.mapping.ContainerSelector} instances. <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ContainerSelectorItemProvider containerSelectorItemProvider;

	/**
	 * This creates an adapter for a {@link pamtram.mapping.ContainerSelector}.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createContainerSelectorAdapter() {
		if (this.containerSelectorItemProvider == null) {
			this.containerSelectorItemProvider = new ContainerSelectorItemProvider(this);
		}

		return this.containerSelectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link pamtram.mapping.ContainerSelectorTargetAttribute} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ContainerSelectorTargetAttributeItemProvider containerSelectorTargetAttributeItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link pamtram.mapping.ContainerSelectorTargetAttribute}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createContainerSelectorTargetAttributeAdapter() {
		if (this.containerSelectorTargetAttributeItemProvider == null) {
			this.containerSelectorTargetAttributeItemProvider = new ContainerSelectorTargetAttributeItemProvider(this);
		}

		return this.containerSelectorTargetAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link pamtram.mapping.LocalMappedAttributeValueExpander} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected LocalMappedAttributeValueExpanderItemProvider localMappedAttributeValueExpanderItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link pamtram.mapping.LocalMappedAttributeValueExpander}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createLocalMappedAttributeValueExpanderAdapter() {
		if (this.localMappedAttributeValueExpanderItemProvider == null) {
			this.localMappedAttributeValueExpanderItemProvider = new LocalMappedAttributeValueExpanderItemProvider(
					this);
		}

		return this.localMappedAttributeValueExpanderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link pamtram.mapping.MappedAttributeValuePrepender} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected MappedAttributeValuePrependerItemProvider mappedAttributeValuePrependerItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link pamtram.mapping.MappedAttributeValuePrepender}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createMappedAttributeValuePrependerAdapter() {
		if (this.mappedAttributeValuePrependerItemProvider == null) {
			this.mappedAttributeValuePrependerItemProvider = new MappedAttributeValuePrependerItemProvider(this);
		}

		return this.mappedAttributeValuePrependerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link pamtram.mapping.MappedAttributeValueAppender} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected MappedAttributeValueAppenderItemProvider mappedAttributeValueAppenderItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link pamtram.mapping.MappedAttributeValueAppender}. <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createMappedAttributeValueAppenderAdapter() {
		if (this.mappedAttributeValueAppenderItemProvider == null) {
			this.mappedAttributeValueAppenderItemProvider = new MappedAttributeValueAppenderItemProvider(this);
		}

		return this.mappedAttributeValueAppenderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link pamtram.mapping.GlobalAttribute} instances. <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected GlobalAttributeItemProvider globalAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link pamtram.mapping.GlobalAttribute}.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createGlobalAttributeAdapter() {
		if (this.globalAttributeItemProvider == null) {
			this.globalAttributeItemProvider = new GlobalAttributeItemProvider(this);
		}

		return this.globalAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link pamtram.mapping.GlobalAttributeImporter} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected GlobalAttributeImporterItemProvider globalAttributeImporterItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link pamtram.mapping.GlobalAttributeImporter}. <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createGlobalAttributeImporterAdapter() {
		if (this.globalAttributeImporterItemProvider == null) {
			this.globalAttributeImporterItemProvider = new GlobalAttributeImporterItemProvider(this);
		}

		return this.globalAttributeImporterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link pamtram.mapping.ExternalMappedAttributeValuePrepender} instances.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ExternalMappedAttributeValuePrependerItemProvider externalMappedAttributeValuePrependerItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link pamtram.mapping.ExternalMappedAttributeValuePrepender}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createExternalMappedAttributeValuePrependerAdapter() {
		if (this.externalMappedAttributeValuePrependerItemProvider == null) {
			this.externalMappedAttributeValuePrependerItemProvider = new ExternalMappedAttributeValuePrependerItemProvider(
					this);
		}

		return this.externalMappedAttributeValuePrependerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link pamtram.mapping.ExternalMappedAttributeValueAppender} instances.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ExternalMappedAttributeValueAppenderItemProvider externalMappedAttributeValueAppenderItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link pamtram.mapping.ExternalMappedAttributeValueAppender}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createExternalMappedAttributeValueAppenderAdapter() {
		if (this.externalMappedAttributeValueAppenderItemProvider == null) {
			this.externalMappedAttributeValueAppenderItemProvider = new ExternalMappedAttributeValueAppenderItemProvider(
					this);
		}

		return this.externalMappedAttributeValueAppenderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link pamtram.mapping.CardinalityMappingSourceElement} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected CardinalityMappingSourceElementItemProvider cardinalityMappingSourceElementItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link pamtram.mapping.CardinalityMappingSourceElement}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createCardinalityMappingSourceElementAdapter() {
		if (this.cardinalityMappingSourceElementItemProvider == null) {
			this.cardinalityMappingSourceElementItemProvider = new CardinalityMappingSourceElementItemProvider(this);
		}

		return this.cardinalityMappingSourceElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link pamtram.mapping.CardinalityMappingExternalSourceElement}
	 * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected CardinalityMappingExternalSourceElementItemProvider cardinalityMappingExternalSourceElementItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link pamtram.mapping.CardinalityMappingExternalSourceElement}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createCardinalityMappingExternalSourceElementAdapter() {
		if (this.cardinalityMappingExternalSourceElementItemProvider == null) {
			this.cardinalityMappingExternalSourceElementItemProvider = new CardinalityMappingExternalSourceElementItemProvider(
					this);
		}

		return this.cardinalityMappingExternalSourceElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link pamtram.mapping.CardinalityMappingGlobalSourceElement} instances.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected CardinalityMappingGlobalSourceElementItemProvider cardinalityMappingGlobalSourceElementItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link pamtram.mapping.CardinalityMappingGlobalSourceElement}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createCardinalityMappingGlobalSourceElementAdapter() {
		if (this.cardinalityMappingGlobalSourceElementItemProvider == null) {
			this.cardinalityMappingGlobalSourceElementItemProvider = new CardinalityMappingGlobalSourceElementItemProvider(
					this);
		}

		return this.cardinalityMappingGlobalSourceElementItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return this.parentAdapterFactory == null ? this : this.parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return this.supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the
	 * adapter. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (this.isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || ((Class<?>) type).isInstance(adapter)) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		this.changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		this.changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to
	 * {@link #parentAdapterFactory}. <!-- begin-user-doc --> <!-- end-user-doc
	 * -->
	 * 
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		this.changeNotifier.fireNotifyChanged(notification);

		if (this.parentAdapterFactory != null) {
			this.parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public void dispose() {
		if (this.mappingItemProvider != null) {
			this.mappingItemProvider.dispose();
		}
		if (this.mappingHintGroupItemProvider != null) {
			this.mappingHintGroupItemProvider.dispose();
		}
		if (this.mappingHintGroupImporterItemProvider != null) {
			this.mappingHintGroupImporterItemProvider.dispose();
		}
		if (this.exportedMappingHintGroupItemProvider != null) {
			this.exportedMappingHintGroupItemProvider.dispose();
		}
		if (this.cardinalityMappingItemProvider != null) {
			this.cardinalityMappingItemProvider.dispose();
		}
		if (this.cardinalityMappingSourceElementItemProvider != null) {
			this.cardinalityMappingSourceElementItemProvider.dispose();
		}
		if (this.cardinalityMappingExternalSourceElementItemProvider != null) {
			this.cardinalityMappingExternalSourceElementItemProvider.dispose();
		}
		if (this.cardinalityMappingGlobalSourceElementItemProvider != null) {
			this.cardinalityMappingGlobalSourceElementItemProvider.dispose();
		}
		if (this.referenceTargetSelectorItemProvider != null) {
			this.referenceTargetSelectorItemProvider.dispose();
		}
		if (this.classMatcherItemProvider != null) {
			this.classMatcherItemProvider.dispose();
		}
		if (this.attributeMatcherItemProvider != null) {
			this.attributeMatcherItemProvider.dispose();
		}
		if (this.containerSelectorItemProvider != null) {
			this.containerSelectorItemProvider.dispose();
		}
		if (this.containerSelectorTargetAttributeItemProvider != null) {
			this.containerSelectorTargetAttributeItemProvider.dispose();
		}
		if (this.localMappedAttributeValueExpanderItemProvider != null) {
			this.localMappedAttributeValueExpanderItemProvider.dispose();
		}
		if (this.mappedAttributeValuePrependerItemProvider != null) {
			this.mappedAttributeValuePrependerItemProvider.dispose();
		}
		if (this.mappedAttributeValueAppenderItemProvider != null) {
			this.mappedAttributeValueAppenderItemProvider.dispose();
		}
		if (this.globalAttributeItemProvider != null) {
			this.globalAttributeItemProvider.dispose();
		}
		if (this.globalAttributeImporterItemProvider != null) {
			this.globalAttributeImporterItemProvider.dispose();
		}
		if (this.externalMappedAttributeValuePrependerItemProvider != null) {
			this.externalMappedAttributeValuePrependerItemProvider.dispose();
		}
		if (this.externalMappedAttributeValueAppenderItemProvider != null) {
			this.externalMappedAttributeValueAppenderItemProvider.dispose();
		}
	}

}
