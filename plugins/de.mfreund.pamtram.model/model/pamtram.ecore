<?xml version="1.0" encoding="UTF-8"?>
<ecore:EPackage xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" name="pamtram" nsURI="http://mfreund.de/pamtram" nsPrefix="pamtram">
  <eAnnotations source="http://www.eclipse.org/OCL/Import">
    <details key="ecore" value="http://www.eclipse.org/emf/2002/Ecore"/>
    <details key="genlib" value="http://www.et.tu-dresden.de/ifa/agtele/genlib"/>
  </eAnnotations>
  <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
    <details key="invocationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
    <details key="settingDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
    <details key="validationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
  </eAnnotations>
  <eClassifiers xsi:type="ecore:EClass" name="NamedElement" abstract="true">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="DeactivatableElement" abstract="true">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="deactivated" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean" defaultValueLiteral="false"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="PAMTraM">
    <eOperations name="mergeExtends">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="//TODO handle hierarchical extensions (an extended section extends other sections&#xD;&#xA;//TODO implement a more sophisticated merging strategy that takes into account overwriting of hints?&#xD;&#xA;&#xD;&#xA;/*&#xD;&#xA; * First, we collect each abstract source and target section as well as the concrete sections that&#xD;&#xA; * reference them&#xD;&#xA; */&#xD;&#xA;HashMap&lt;Section, LinkedList&lt;Section>> abstractToConcreteSectionMap = new HashMap&lt;>();&#xD;&#xA;Map&lt;EObject, Collection&lt;Setting>> sourceSettings = EcoreUtil.CrossReferencer.find(getSourceSections());&#xD;&#xA;for (Section section : getSourceSections()) {&#xD;&#xA;&#x9;if(section.isAbstract() &amp;&amp; sourceSettings.containsKey(section)) {&#xD;&#xA;&#x9;&#x9;LinkedList&lt;Section> concreteSections = new LinkedList&lt;>();&#xD;&#xA;&#x9;&#x9;for (Setting setting : sourceSettings.get(section)) {&#xD;&#xA;&#x9;&#x9;&#x9;if(setting.getEStructuralFeature().equals(MetamodelPackageImpl.eINSTANCE.getSection_Extend())) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;concreteSections.add((Section) setting.getEObject());&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;abstractToConcreteSectionMap.put(section, concreteSections);&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;Map&lt;EObject, Collection&lt;Setting>> targetSettings = EcoreUtil.CrossReferencer.find(getTargetSections());&#xD;&#xA;for (Section section : getTargetSections()) {&#xD;&#xA;&#x9;if(section.isAbstract() &amp;&amp; targetSettings.containsKey(section)) {&#xD;&#xA;&#x9;&#x9;LinkedList&lt;Section> concreteSections = new LinkedList&lt;>();&#xD;&#xA;&#x9;&#x9;for (Setting setting : targetSettings.get(section)) {&#xD;&#xA;&#x9;&#x9;&#x9;if(setting.getEStructuralFeature().equals(MetamodelPackageImpl.eINSTANCE.getSection_Extend())) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;concreteSections.add((Section) setting.getEObject());&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;abstractToConcreteSectionMap.put(section, concreteSections);&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;ArrayList&lt;Mapping> concreteMappings = new ArrayList&lt;>();&#xD;&#xA;for (Mapping mapping : getActiveMappings()) {&#xD;&#xA;&#x9;if(!mapping.isAbstract()) {&#xD;&#xA;&#x9;&#x9;concreteMappings.add(mapping);&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;/*&#xD;&#xA; * Now, we copy all elements from the abstract sections to the concrete sections&#xD;&#xA; * that extend them. In this process, we store the associations between the elements from&#xD;&#xA; * the abstract sections and the copied elements in a map.&#xD;&#xA; */&#xD;&#xA;HashMap&lt;EObject, LinkedList&lt;EObject>> abstractToConcreteElementMap = new HashMap&lt;>();&#xD;&#xA;for (Section abstractSection : abstractToConcreteSectionMap.keySet()) {&#xD;&#xA;&#x9;for (Section concreteSection : abstractToConcreteSectionMap.get(abstractSection)) {&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;Section copiedSection = EcoreUtil.copy(abstractSection);&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;TreeIterator&lt;EObject> originalIterator = EcoreUtil.getAllContents(Collections.singleton(abstractSection));&#xD;&#xA;&#x9;&#x9;TreeIterator&lt;EObject> copyIterator = EcoreUtil.getAllContents(Collections.singleton(copiedSection));&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;// these lists will store the elements that we will add to the concrete section&#xD;&#xA;&#x9;&#x9;ArrayList&lt;Attribute> attributesToAdd = new ArrayList&lt;>();&#xD;&#xA;&#x9;&#x9;ArrayList&lt;Reference> referencesToAdd = new ArrayList&lt;>();&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;while(originalIterator.hasNext()) {&#xD;&#xA;&#x9;&#x9;&#x9;assert copyIterator.hasNext();&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;EObject originalNext = originalIterator.next();&#xD;&#xA;&#x9;&#x9;&#x9;EObject copyNext = copyIterator.next();&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;// if the element is the section itself, we skip it&#xD;&#xA;&#x9;&#x9;&#x9;if(originalNext instanceof Section) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;continue;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;// if the element is a top-level element below the section, we add it to the concrete section&#xD;&#xA;&#x9;&#x9;&#x9;if(originalNext.eContainer().equals(abstractSection)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if(copyNext instanceof Attribute) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;attributesToAdd.add((Attribute) copyNext);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} else if(copyNext instanceof Reference) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;referencesToAdd.add((Reference) copyNext);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;throw new RuntimeException(&quot;Unsupported element type '&quot; + copyNext.eClass().getName() + &quot;' encountered when merging extends!&quot;);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;// in any case, we fill the abstractToConcreteElementMap&#xD;&#xA;&#x9;&#x9;&#x9;LinkedList&lt;EObject> vals = abstractToConcreteElementMap.get(originalNext);&#xD;&#xA;&#x9;&#x9;&#x9;if(vals == null) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;vals = new LinkedList&lt;>();&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;vals.add(copyNext);&#xD;&#xA;&#x9;&#x9;&#x9;abstractToConcreteElementMap.put(originalNext, vals);&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;//TODO do we need to redirect references to these elements???&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;/*&#xD;&#xA;&#x9;&#x9; * now, we add the collected elements to the concrete section; we have to do this&#xD;&#xA;&#x9;&#x9; * after the process of iterating over the contents - otherwise, the TreeIterator will throw&#xD;&#xA;&#x9;&#x9; * IndexOutOfBoundsExceptions&#xD;&#xA;&#x9;&#x9; */&#xD;&#xA;&#x9;&#x9;concreteSection.getAttributes().addAll(attributesToAdd);&#xD;&#xA;&#x9;&#x9;concreteSection.getReferences().addAll(referencesToAdd);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;/*&#xD;&#xA;&#x9;&#x9; * Now, we redirect references from MappingHints to elements from the abstract section to the elements from the concrete sections. &#xD;&#xA;&#x9;&#x9; * Here, we only handle references from concrete mappings as the references from abstract mappings (and thus from extended hint&#xD;&#xA;&#x9;&#x9; * groups) are handled afterwards when these hint groups are copied.&#xD;&#xA;&#x9;&#x9; */&#xD;&#xA;&#x9;&#x9;Map&lt;EObject, Collection&lt;Setting>> refsToAbstractSection = EcoreUtil.UsageCrossReferencer.findAll(abstractToConcreteElementMap.keySet(), concreteMappings);&#xD;&#xA;&#x9;&#x9;for (EObject referencedObject : refsToAbstractSection.keySet()) {&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;for (Setting setting : refsToAbstractSection.get(referencedObject)) {&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;// this is the element referencing the abstract section (it should be an element of a mapping hint)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;EObject hintElement = setting.getEObject().eContainer();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;MappingHintGroupType hintGroup = null;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if(hintElement instanceof MappingHintGroupType) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hintGroup = (MappingHintGroupType) hintElement;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} else if(hintElement.eContainer() instanceof MappingHintGroupType) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hintGroup = (MappingHintGroupType) hintElement.eContainer();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hintGroup = (MappingHintGroupType) hintElement.eContainer().eContainer();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;// We do not need to handle deactivated Mappings/MappingHintGroups&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;//&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if(hintGroup instanceof DeactivatableElement &amp;&amp; ((DeactivatableElement) hintGroup).isDeactivated() ||&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;hintGroup.eContainer() instanceof DeactivatableElement &amp;&amp; ((DeactivatableElement) hintGroup.eContainer()).isDeactivated()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;continue;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;/* &#xD;&#xA;&#x9;&#x9;&#x9;&#x9; * check if the hint group or its parent mapping equals the section that we just added the concrete elements to&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; */&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if(concreteSection.equals(hintGroup.getTargetMMSection()) || &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;concreteSection.isContainerFor(hintGroup.getTargetMMSection()) ||&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;concreteSection.equals(((Mapping) hintGroup.eContainer()).getSourceMMSection()) || &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;concreteSection.isContainerFor(((Mapping) hintGroup.eContainer()).getSourceMMSection())) {&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(setting.getEStructuralFeature().equals(MappingPackageImpl.eINSTANCE.getModifiedAttributeElementType_Source()) &amp;&amp; &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;setting.getEObject() instanceof ModelConnectionHintTargetAttribute) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// do nothing as ModelConnectionHints are handled below separately&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// redirect the reference (we can always use the 'last' of the concrete objects as we just added it above&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;setting.set(abstractToConcreteElementMap.get(referencedObject).getLast());&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;/*&#xD;&#xA; * Now, we handle the ModelConnectionHints that we skipped above. We can do this now as we now know all concrete TargetSections that&#xD;&#xA; * are a possible match for each ModelConnectionHint that points to an abstract TargetSection.&#xD;&#xA; */&#xD;&#xA;for (Section abstractSection : abstractToConcreteSectionMap.keySet()) {&#xD;&#xA;&#x9;for (Section concreteSection : abstractToConcreteSectionMap.get(abstractSection)) {&#xD;&#xA;&#x9;&#x9;/*&#xD;&#xA;&#x9;&#x9; * as ModelConnectionHints will get treated differently (see below), we store the ModelConnectionHintTargetAttributes&#xD;&#xA;&#x9;&#x9; * holding the referneces to the Attributes in the abstract section and will delete these later&#xD;&#xA;&#x9;&#x9; */&#xD;&#xA;&#x9;&#x9;ArrayList&lt;ModelConnectionHintTargetAttribute> mchTargetAttributesToDelete = new ArrayList&lt;>();&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;Map&lt;EObject, Collection&lt;Setting>> refsToAbstractSection = EcoreUtil.UsageCrossReferencer.findAll(abstractToConcreteElementMap.keySet(), concreteMappings);&#xD;&#xA;&#x9;&#x9;for (EObject referencedObject : refsToAbstractSection.keySet()) {&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;for (Setting setting : refsToAbstractSection.get(referencedObject)) {&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;// this is the element referencing the abstract section (it should be an element of a mapping hint)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;EObject hintElement = setting.getEObject().eContainer();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;MappingHintGroupType hintGroup = null;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if(hintElement instanceof MappingHintGroupType) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hintGroup = (MappingHintGroupType) hintElement;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} else if(hintElement.eContainer() instanceof MappingHintGroupType) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hintGroup = (MappingHintGroupType) hintElement.eContainer();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hintGroup = (MappingHintGroupType) hintElement.eContainer().eContainer();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;// We do not need to handle deactivated Mappings/MappingHintGroups&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;//&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if(hintGroup instanceof DeactivatableElement &amp;&amp; ((DeactivatableElement) hintGroup).isDeactivated() ||&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;hintGroup.eContainer() instanceof DeactivatableElement &amp;&amp; ((DeactivatableElement) hintGroup.eContainer()).isDeactivated()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;continue;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;/* &#xD;&#xA;&#x9;&#x9;&#x9;&#x9; * check if the hint group or its parent mapping equals the section that we just added the concrete elements to or&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; * if we are dealing with a model ModelConnectionHintTargetAttribute&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; */&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if(setting.getEStructuralFeature().equals(MappingPackageImpl.eINSTANCE.getModifiedAttributeElementType_Source()) &amp;&amp; &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;setting.getEObject() instanceof ModelConnectionHintTargetAttribute) {&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;// in this case, we must not simply redirect but we create a new ModelConnectionHintTargetAttribute&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ModelConnectionHintTargetAttribute original = (ModelConnectionHintTargetAttribute) setting.getEObject();&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for (EObject concreteTargetSectionAttribute : abstractToConcreteElementMap.get(referencedObject)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ModelConnectionHintTargetAttribute copy = MappingFactoryImpl.eINSTANCE.createModelConnectionHintTargetAttribute();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;copy.setName(original.getName());&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;copy.getModifier().addAll(original.getModifier());&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;copy.setSource((TargetSectionAttribute) concreteTargetSectionAttribute);&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;((ModelConnectionHint) (setting.getEObject().eContainer())).getTargetAttributes().add(copy);&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;mchTargetAttributesToDelete.add((ModelConnectionHintTargetAttribute) setting.getEObject());&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;for (ModelConnectionHintTargetAttribute mchTargetAttribute : mchTargetAttributesToDelete) {&#xD;&#xA;&#x9;&#x9;&#x9;EcoreUtil.delete(mchTargetAttribute);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;/*&#xD;&#xA; * Finally, we can copy the abstract hint groups&#xD;&#xA; */&#xD;&#xA;&#xD;&#xA;// collect each abstract hint group as well as the concrete hint groups that reference them&#xD;&#xA;HashMap&lt;MappingHintGroupType, LinkedList&lt;MappingHintGroupType>> abstractToConcreteHintGroupMap = new HashMap&lt;>();&#xD;&#xA;Map&lt;EObject, Collection&lt;Setting>> mappingSettings = EcoreUtil.CrossReferencer.find(getActiveMappings());&#xD;&#xA;for (EObject element : mappingSettings.keySet()) {&#xD;&#xA;&#x9;if(element instanceof MappingHintGroupType &amp;&amp; ((Mapping)(element.eContainer())).isAbstract()) {&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;// We do not need to handle deactivated MappingHintGroups&#xD;&#xA;&#x9;&#x9;//&#xD;&#xA;&#x9;&#x9;if(element instanceof DeactivatableElement &amp;&amp; ((DeactivatableElement) element).isDeactivated() ||&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;element.eContainer() instanceof DeactivatableElement &amp;&amp; ((DeactivatableElement) element.eContainer()).isDeactivated()) {&#xD;&#xA;&#x9;&#x9;&#x9;continue;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;LinkedList&lt;MappingHintGroupType> concreteHintGroups = new LinkedList&lt;>();&#xD;&#xA;&#x9;&#x9;for (Setting setting : mappingSettings.get(element)) {&#xD;&#xA;&#x9;&#x9;&#x9;if(setting.getEStructuralFeature().equals(MappingPackageImpl.eINSTANCE.getMappingHintGroupType_Extend())) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;// only copy hints to activated hint groups&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if((setting.getEObject() instanceof DeactivatableElement &amp;&amp; ((DeactivatableElement) setting.getEObject()).isDeactivated()) ||&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(setting.getEObject().eContainer() instanceof DeactivatableElement &amp;&amp; ((DeactivatableElement) setting.getEObject().eContainer()).isDeactivated())) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;continue;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} else {&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;concreteHintGroups.add((MappingHintGroupType) setting.getEObject());&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;abstractToConcreteHintGroupMap.put((MappingHintGroupType) element, concreteHintGroups);&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// copy the hints to the concrete hint groups&#xD;&#xA;for (MappingHintGroupType abstractHintGroup : abstractToConcreteHintGroupMap.keySet()) {&#xD;&#xA;&#x9;for (MappingHintGroupType concreteHintGroup : abstractToConcreteHintGroupMap.get(abstractHintGroup)) {&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;Collection&lt;MappingHintBaseType> hintsToCopy = new BasicEList&lt;>();&#xD;&#xA;&#x9;&#x9;/*&#xD;&#xA;&#x9;&#x9; * Collect all hints that will get copied. Those are all mapping hints (including ModelConnectionHints) that are not&#xD;&#xA;&#x9;&#x9; * 'overwritten' by hints of the concrete HintGroup.&#xD;&#xA;&#x9;&#x9; */&#xD;&#xA;&#x9;&#x9;for (MappingHint abstractHint : abstractHintGroup.getMappingHints()) {&#xD;&#xA;&#x9;&#x9;&#x9;EObject hintTarget = null;&#xD;&#xA;&#x9;&#x9;&#x9;if(abstractHint instanceof AttributeMapping) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;hintTarget = ((AttributeMapping) abstractHint).getTarget();&#xD;&#xA;&#x9;&#x9;&#x9;} else if(abstractHint instanceof MappingInstanceSelector) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;hintTarget = ((MappingInstanceSelector) abstractHint).getAffectedReference();&#xD;&#xA;&#x9;&#x9;&#x9;} else if(abstractHint instanceof CardinalityMapping) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;hintTarget = ((CardinalityMapping) abstractHint).getTarget();&#xD;&#xA;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;throw new RuntimeException(&quot;Unsupported hint type '&quot; + abstractHint.eClass().getName() + &quot;' in HintGroup '&quot; + &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;abstractHintGroup.getName() + &quot;': These kind of hints are not supported yet in abstract HintGroups!&quot;);&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;if(abstractToConcreteElementMap.get(hintTarget) == null || abstractToConcreteElementMap.get(hintTarget).isEmpty() || concreteHintGroup.getMappingHints().isEmpty() || &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EcoreUtil.UsageCrossReferencer.findAll(abstractToConcreteElementMap.get(hintTarget), concreteHintGroup.getMappingHints()).isEmpty()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;hintsToCopy.add(abstractHint);&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;// model connection hints need to be handled separately&#xD;&#xA;&#x9;&#x9;if(abstractHintGroup instanceof MappingHintGroup &amp;&amp; concreteHintGroup instanceof MappingHintGroup &amp;&amp; &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;((MappingHintGroup) concreteHintGroup).getModelConnectionMatcher() == null) {&#xD;&#xA;&#x9;&#x9;&#x9;hintsToCopy.add(((MappingHintGroup) abstractHintGroup).getModelConnectionMatcher());&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;Collection&lt;MappingHintBaseType> copiedHints = EcoreUtil.copyAll(hintsToCopy);&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;/* &#xD;&#xA;&#x9;&#x9; * make sure that all references to elements from the abstract sections are redirected to the concrete sections&#xD;&#xA;&#x9;&#x9; * that we created earlier&#xD;&#xA;&#x9;&#x9; */&#xD;&#xA;&#x9;&#x9;for (MappingHintBaseType copiedHint : copiedHints) {&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;/* &#xD;&#xA;&#x9;&#x9;&#x9; * these are the references from the copied hint (that will get added to the concrete hint group) to elements from&#xD;&#xA;&#x9;&#x9;&#x9; * abstract sections&#xD;&#xA;&#x9;&#x9;&#x9; */&#xD;&#xA;&#x9;&#x9;&#x9;Map&lt;EObject, Collection&lt;Setting>> refsToAbstractSection = EcoreUtil.UsageCrossReferencer.findAll(abstractToConcreteElementMap.keySet(), copiedHint);&#xD;&#xA;&#x9;&#x9;&#x9;for (EObject referencedObject : refsToAbstractSection.keySet()) {&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;/*&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; * based on the type of hint element that we are handling (local or external), source and target &#xD;&#xA;&#x9;&#x9;&#x9;&#x9; * sections or their containers are checked&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; */&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;boolean local = true;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if(refsToAbstractSection.get(referencedObject).size() > 1) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;throw new RuntimeException(&quot;Internal Error! The hint '&quot; + copiedHint.getName() + &quot;' in the hint group '&quot; + abstractHintGroup.getName() + &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;' holds multiple references to the same object of an abstract section ('&quot; + referencedObject + &quot;'.&quot;);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if(refsToAbstractSection.get(referencedObject).iterator().next().getEObject() instanceof ExternalModifiedAttributeElementType) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;local = false;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ArrayList&lt;Section> sourceAndTargetSections = new ArrayList&lt;>();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;SourceSection sourceSection = ((Mapping) concreteHintGroup.eContainer()).getSourceMMSection();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if(local) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;sourceAndTargetSections.add(sourceSection);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;while (sourceSection.getContainer() != null) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sourceSection = sourceSection.getContainer().getContainingSection();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sourceAndTargetSections.add(sourceSection);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;TargetSection targetSection = concreteHintGroup.getTargetMMSection();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if(local) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;sourceAndTargetSections.add(targetSection);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;while (targetSection.getContainer() != null) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;targetSection = targetSection.getContainer().getContainingSection();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sourceAndTargetSections.add(targetSection);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;/* &#xD;&#xA;&#x9;&#x9;&#x9;&#x9; * these are possible targets for the redirection of references to the referenced object&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; */&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;LinkedList&lt;EObject> possibleTargets = abstractToConcreteElementMap.get(referencedObject);&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;boolean found = false;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;EObject target = null; // this will contain the new value for the reference&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;for (EObject possibleTarget : possibleTargets) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Section containingSection = ((MetaModelElement) possibleTarget).getContainingSection();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(sourceAndTargetSections.contains(containingSection)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(found == false ) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;found = true;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;target = possibleTarget;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// this should not happen, should it?&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;throw new RuntimeException(&quot;Internal error! Multiple targets found for redirection of element '&quot; + referencedObject + &quot;' in.&quot;);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if(found == false) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;throw new RuntimeException(&quot;Internal error! No target found for redirection of element '&quot; + referencedObject + &quot;'.&quot;);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;for (Setting setting : refsToAbstractSection.get(referencedObject)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;setting.set(target);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;// Finally, we add the copied hints to the concrete hint group&#xD;&#xA;&#x9;&#x9;for (MappingHintBaseType copiedHint : copiedHints) {&#xD;&#xA;&#x9;&#x9;&#x9;if(copiedHint instanceof ModelConnectionHint) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;((MappingHintGroup) concreteHintGroup).setModelConnectionMatcher((ModelConnectionHint) copiedHint);&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;concreteHintGroup.getMappingHints().add((MappingHint) copiedHint);&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;/*&#xD;&#xA; * At the end, we clear the values of the 'extend' references of the concrete elements as these&#xD;&#xA; * are no longer needed.&#xD;&#xA; */&#xD;&#xA;for (Entry&lt;Section, LinkedList&lt;Section>> entry : abstractToConcreteSectionMap.entrySet()) {&#xD;&#xA;&#x9;for (Section concreteSection : entry.getValue()) {&#xD;&#xA;&#x9;&#x9;concreteSection.getExtend().remove(entry.getKey());&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;for (Entry&lt;MappingHintGroupType, LinkedList&lt;MappingHintGroupType>> entry : abstractToConcreteHintGroupMap.entrySet()) {&#xD;&#xA;&#x9;for (MappingHintGroupType concreteHintGroup : entry.getValue()) {&#xD;&#xA;&#x9;&#x9;concreteHintGroup.getExtend().remove(entry.getKey());&#xD;&#xA;&#x9;}&#xD;&#xA;}"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="contextMetaModelPackage"
        upperBound="-1" eType="ecore:EClass http://www.eclipse.org/emf/2002/Ecore#//EPackage"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="sourceSectionModel" lowerBound="1"
        upperBound="-1" eType="#//SourceSectionModel" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="targetSectionModel" lowerBound="1"
        upperBound="-1" eType="#//TargetSectionModel" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="mappingModel" lowerBound="1"
        upperBound="-1" eType="#//MappingModel" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="sourceSections" upperBound="-1"
        eType="#//metamodel/SourceSection" changeable="false" volatile="true" transient="true"
        derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="get" value="return new BasicEList&lt;>(this.getSourceSectionModel().parallelStream().flatMap(s -> s.getMetaModelSections().parallelStream()).collect(&lt;%java.util.stream.Collectors%>.toList()));"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="targetSections" upperBound="-1"
        eType="#//metamodel/TargetSection" changeable="false" volatile="true" transient="true"
        derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="get" value="return new BasicEList&lt;>(this.getTargetSectionModel().parallelStream().flatMap(s -> s.getMetaModelSections().parallelStream()).collect(&lt;%java.util.stream.Collectors%>.toList()));"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="mappings" upperBound="-1"
        eType="#//mapping/Mapping" changeable="false" volatile="true" transient="true"
        derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="derivation" value="self.mappingModel->collect(s | s.mapping)"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="activeMappings" upperBound="-1"
        eType="#//mapping/Mapping" changeable="false" volatile="true" transient="true"
        derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="derivation" value="self.mappingModel->select(m | m.deactivated = false)->collect(m | m.getActiveMappings())"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="globalValues" upperBound="-1"
        eType="#//mapping/FixedValue" changeable="false" volatile="true" transient="true"
        derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="derivation" value="self.mappingModel->collect(s | s.globalValues)"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="modifierSets" upperBound="-1"
        eType="#//mapping/AttributeValueModifierSet" changeable="false" volatile="true"
        transient="true" derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="derivation" value="self.mappingModel->collect(s | s.modifierSets)"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="conditionModel" upperBound="-1"
        eType="#//ConditionModel" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="SectionModel" abstract="true" eSuperTypes="#//NamedElement">
    <eTypeParameters name="S">
      <eBounds eClassifier="#//metamodel/Section">
        <eTypeArguments eTypeParameter="#//SectionModel/S"/>
        <eTypeArguments eTypeParameter="#//SectionModel/C"/>
        <eTypeArguments eTypeParameter="#//SectionModel/R"/>
        <eTypeArguments eTypeParameter="#//SectionModel/A"/>
      </eBounds>
    </eTypeParameters>
    <eTypeParameters name="C">
      <eBounds eClassifier="#//metamodel/Class">
        <eTypeArguments eTypeParameter="#//SectionModel/S"/>
        <eTypeArguments eTypeParameter="#//SectionModel/C"/>
        <eTypeArguments eTypeParameter="#//SectionModel/R"/>
        <eTypeArguments eTypeParameter="#//SectionModel/A"/>
      </eBounds>
    </eTypeParameters>
    <eTypeParameters name="R">
      <eBounds eClassifier="#//metamodel/Reference">
        <eTypeArguments eTypeParameter="#//SectionModel/S"/>
        <eTypeArguments eTypeParameter="#//SectionModel/C"/>
        <eTypeArguments eTypeParameter="#//SectionModel/R"/>
        <eTypeArguments eTypeParameter="#//SectionModel/A"/>
      </eBounds>
    </eTypeParameters>
    <eTypeParameters name="A">
      <eBounds eClassifier="#//metamodel/Attribute">
        <eTypeArguments eTypeParameter="#//SectionModel/S"/>
        <eTypeArguments eTypeParameter="#//SectionModel/C"/>
        <eTypeArguments eTypeParameter="#//SectionModel/R"/>
        <eTypeArguments eTypeParameter="#//SectionModel/A"/>
      </eBounds>
    </eTypeParameters>
    <eStructuralFeatures xsi:type="ecore:EReference" name="metaModelPackage" lowerBound="1"
        eType="ecore:EClass http://www.eclipse.org/emf/2002/Ecore#//EPackage"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="metaModelSections" upperBound="-1"
        containment="true">
      <eGenericType eTypeParameter="#//SectionModel/S"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="SourceSectionModel">
    <eGenericSuperTypes eClassifier="#//SectionModel">
      <eTypeArguments eClassifier="#//metamodel/SourceSection"/>
      <eTypeArguments eClassifier="#//metamodel/SourceSectionClass"/>
      <eTypeArguments eClassifier="#//metamodel/SourceSectionReference"/>
      <eTypeArguments eClassifier="#//metamodel/SourceSectionAttribute"/>
    </eGenericSuperTypes>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="TargetSectionModel">
    <eStructuralFeatures xsi:type="ecore:EReference" name="libraryElements" upperBound="-1"
        eType="#//metamodel/LibraryEntry" containment="true"/>
    <eGenericSuperTypes eClassifier="#//SectionModel">
      <eTypeArguments eClassifier="#//metamodel/TargetSection"/>
      <eTypeArguments eClassifier="#//metamodel/TargetSectionClass"/>
      <eTypeArguments eClassifier="#//metamodel/TargetSectionReference"/>
      <eTypeArguments eClassifier="#//metamodel/TargetSectionAttribute"/>
    </eGenericSuperTypes>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="MappingModel" eSuperTypes="#//NamedElement #//DeactivatableElement">
    <eOperations name="getActiveMappings" upperBound="-1" eType="#//mapping/Mapping">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList&lt;Mapping> mappings = getMapping();&#xD;&#xA;EList&lt;Mapping> activeMappings = new BasicEList&lt;>();&#xD;&#xA;for (Mapping mapping : mappings) {&#xD;&#xA;&#x9;if(!mapping.isDeactivated() &amp;&amp; !mapping.isAbstract()) {&#xD;&#xA;&#x9;&#x9;activeMappings.add(mapping);&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return activeMappings;"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="mapping" lowerBound="1"
        upperBound="-1" eType="#//mapping/Mapping" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="modifierSets" upperBound="-1"
        eType="#//mapping/AttributeValueModifierSet" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="globalValues" upperBound="-1"
        eType="#//mapping/FixedValue" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ConditionalElement" abstract="true">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="eitherModelOrReferCondition referenceOnlyConditionsFromConditionModel"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="eitherModelOrReferCondition" value="Tuple {&#xD;&#xA;&#x9;message : String = &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;'As this Instance is a ConditionElement and you want to add a condition, you either have to model a condition or reference an already existing one!',&#xD;&#xA;&#x9;severity : Integer = 4,&#xD;&#xA;&#x9;status : Boolean = &#xD;&#xA;&#x9;&#x9;(self.conditionRef->size()+self.condition->size()) &lt;= 1&#xD;&#xA;}.status"/>
      <details key="referenceOnlyConditionsFromConditionModel" value="Tuple {&#xD;&#xA;&#x9;message : String = &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;'It only allowed to reference Condition-Instances that are model inside the ConditionModel!',&#xD;&#xA;&#x9;severity : Integer = 4,&#xD;&#xA;&#x9;status : Boolean = &#xD;&#xA;&#x9;&#x9;&#x9;if self.conditionRef->size() = 1 then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;self.conditionRef.oclContainer().oclIsTypeOf(pamtram::ConditionModel) else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;true&#xD;&#xA;&#x9;&#x9;&#x9;endif&#xD;&#xA;}.status"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="condition" eType="#//condition/ComplexCondition"
        containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="conditionRef" eType="#//condition/ComplexCondition"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ConditionModel" eSuperTypes="#//NamedElement">
    <eStructuralFeatures xsi:type="ecore:EReference" name="condition" upperBound="-1"
        eType="#//condition/ComplexCondition" containment="true"/>
  </eClassifiers>
  <eSubpackages name="metamodel" nsURI="http://mfreund.de/pamtram/metamodel" nsPrefix="metamodel">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="invocationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
      <details key="settingDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
      <details key="validationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/OCL/Import">
      <details key="ecore" value="http://www.eclipse.org/emf/2002/Ecore"/>
      <details key="genlib" value="http://www.et.tu-dresden.de/ifa/agtele/genlib"/>
    </eAnnotations>
    <eClassifiers xsi:type="ecore:EClass" name="MetaModelElement" abstract="true"
        eSuperTypes="#//NamedElement">
      <eTypeParameters name="S">
        <eBounds eClassifier="#//metamodel/Section">
          <eTypeArguments eTypeParameter="#//metamodel/MetaModelElement/S"/>
          <eTypeArguments eTypeParameter="#//metamodel/MetaModelElement/C"/>
          <eTypeArguments eTypeParameter="#//metamodel/MetaModelElement/R"/>
          <eTypeArguments eTypeParameter="#//metamodel/MetaModelElement/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="C">
        <eBounds eClassifier="#//metamodel/Class">
          <eTypeArguments eTypeParameter="#//metamodel/MetaModelElement/S"/>
          <eTypeArguments eTypeParameter="#//metamodel/MetaModelElement/C"/>
          <eTypeArguments eTypeParameter="#//metamodel/MetaModelElement/R"/>
          <eTypeArguments eTypeParameter="#//metamodel/MetaModelElement/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="R">
        <eBounds eClassifier="#//metamodel/Reference">
          <eTypeArguments eTypeParameter="#//metamodel/MetaModelElement/S"/>
          <eTypeArguments eTypeParameter="#//metamodel/MetaModelElement/C"/>
          <eTypeArguments eTypeParameter="#//metamodel/MetaModelElement/R"/>
          <eTypeArguments eTypeParameter="#//metamodel/MetaModelElement/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="A">
        <eBounds eClassifier="#//metamodel/Attribute">
          <eTypeArguments eTypeParameter="#//metamodel/MetaModelElement/S"/>
          <eTypeArguments eTypeParameter="#//metamodel/MetaModelElement/C"/>
          <eTypeArguments eTypeParameter="#//metamodel/MetaModelElement/R"/>
          <eTypeArguments eTypeParameter="#//metamodel/MetaModelElement/A"/>
        </eBounds>
      </eTypeParameters>
      <eOperations name="getContainingSection" lowerBound="1">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="MetaModelElement&lt;S,C,R,A> element = this;&#xD;&#xA;&#xD;&#xA;// move upwards in the hierarchy&#xD;&#xA;while(element.eContainer() instanceof MetaModelElement) {&#xD;&#xA;&#x9;element = (MetaModelElement&lt;S,C,R,A>) element.eContainer();&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;if(element instanceof Section || element.eContainer() instanceof ContainerParameter) {&#xD;&#xA;&#x9;// we have found the section&#xD;&#xA;&#x9;return (S) element;&#xD;&#xA;} else if((element instanceof TargetSectionAttribute &amp;&amp; element.eContainer() instanceof AttributeParameter) || &#xD;&#xA;&#x9;&#x9;(element instanceof TargetSectionNonContainmentReference) &amp;&amp; element.eContainer() instanceof ExternalReferenceParameter) {&#xD;&#xA;&#x9;LibraryEntry libEntry = (LibraryEntry) element.eContainer().eContainer();&#xD;&#xA;&#x9;for (LibraryParameter&lt;?> param : libEntry.getParameters()) {&#xD;&#xA;&#x9;&#x9;//TODO if multiple container parameters exist, there might need to be additional logic&#xD;&#xA;&#x9;&#x9;if(param instanceof ContainerParameter) {&#xD;&#xA;&#x9;&#x9;&#x9;return (S) ((ContainerParameter) param).getClass_();&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;return null;&#xD;&#xA;} else  if(element instanceof VirtualTargetSectionAttribute &amp;&amp; element.eContainer() instanceof LibraryEntry) {&#xD;&#xA;&#x9;LibraryEntry libEntry = (LibraryEntry) element.eContainer();&#xD;&#xA;&#x9;for (LibraryParameter&lt;?> param : libEntry.getParameters()) {&#xD;&#xA;&#x9;&#x9;//TODO if multiple container parameters exist, there might need to be additional logic&#xD;&#xA;&#x9;&#x9;if(param instanceof ContainerParameter) {&#xD;&#xA;&#x9;&#x9;&#x9;return (S) ((ContainerParameter) param).getClass_();&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;return null;&#xD;&#xA;} else {&#xD;&#xA;&#x9;// something went wrong&#xD;&#xA;&#x9;return null;&#xD;&#xA;}"/>
        </eAnnotations>
        <eGenericType eTypeParameter="#//metamodel/MetaModelElement/S"/>
      </eOperations>
      <eOperations name="getContainingSectionModel" lowerBound="1">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="S section = this.getContainingSection();&#xD;&#xA;&#xD;&#xA;EObject container = section.eContainer();&#xD;&#xA;while(!(container instanceof SectionModel)) {&#xD;&#xA;&#x9;// we have reached the root element&#xD;&#xA;&#x9;if(container == null) {&#xD;&#xA;&#x9;&#x9;return null;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;container = container.eContainer();&#xD;&#xA;}&#xD;&#xA;return (SectionModel&lt;S, C, R, A>) container;"/>
        </eAnnotations>
        <eGenericType eClassifier="#//SectionModel">
          <eTypeArguments eTypeParameter="#//metamodel/MetaModelElement/S"/>
          <eTypeArguments eTypeParameter="#//metamodel/MetaModelElement/C"/>
          <eTypeArguments eTypeParameter="#//metamodel/MetaModelElement/R"/>
          <eTypeArguments eTypeParameter="#//metamodel/MetaModelElement/A"/>
        </eGenericType>
      </eOperations>
      <eOperations name="isLibraryEntry" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="return (this.getContainingSection().eContainer() instanceof ContainerParameter);"/>
        </eAnnotations>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Class" abstract="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="constraints" value="eClassMatchesParentEReference variableCardinalityIsValid containerIsValid"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="eClassMatchesParentEReference" value="Tuple {&#xD;&#xA;&#x9;message : String = 'The eClass \'' + self.eClass.name + '\' is not allowed by the containing reference!',&#xD;&#xA;&#x9;severity : Integer = 4,&#xD;&#xA;&#x9;status : Boolean = &#xD;&#xA;&#x9;&#x9;if self = self.getContainingSection() or self.eClass.oclType() = OclVoid then &#xD;&#xA;&#x9;&#x9;&#x9;true else&#xD;&#xA;&#x9;&#x9;&#x9;let parentEReference = self.oclContainer().oclAsType(pamtram::metamodel::Reference).eReference in&#xD;&#xA;&#x9;&#x9;&#x9;if parentEReference.oclType() = OclVoid then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;true else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;parentEReference.oclAsType(ecore::EReference).eReferenceType.isSuperTypeOf(self.eClass.oclAsType(ecore::EClass)) &#xD;&#xA;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;}.status"/>
        <details key="cardinalityIsValid" value="Tuple {&#xD;&#xA;&#x9;message : String = &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;'The cardinality of a Class must be specified as \'CardinalityType::ONE\' when the upper bound of the containing Reference is \'1\'!',&#xD;&#xA;&#x9;severity : Integer = 4,&#xD;&#xA;&#x9;status : Boolean = &#xD;&#xA;&#x9;&#x9;if self = self.getContainingSection() or self.eClass.oclType() = OclVoid then &#xD;&#xA;&#x9;&#x9;&#x9;true else&#xD;&#xA;&#x9;&#x9;&#x9;let parentEReference = self.oclContainer().oclAsType(pamtram::metamodel::Reference).eReference in &#xD;&#xA;&#x9;&#x9;&#x9;if parentEReference.oclType() = OclVoid then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;true else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;not ((self.cardinality &lt;> pamtram::metamodel::CardinalityType::ONE) and (self.oclContainer().oclAsType(pamtram::metamodel::Reference).eReference.oclAsType(ecore::EReference).upperBound = 1))&#xD;&#xA;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;}.status"/>
        <details key="containerIsValid" value="Tuple {&#xD;&#xA;&#x9;message : String = &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;'The \'container\' refrence must point to the containing Class!',&#xD;&#xA;&#x9;severity : Integer = 4,&#xD;&#xA;&#x9;status : Boolean = &#xD;&#xA;&#x9;&#x9;if self.oclIsKindOf(Section) = true or self.container = null then true else self.container = self.oclContainer().oclContainer() endif&#xD;&#xA;}.status"/>
      </eAnnotations>
      <eTypeParameters name="S">
        <eBounds eClassifier="#//metamodel/Section">
          <eTypeArguments eTypeParameter="#//metamodel/Class/S"/>
          <eTypeArguments eTypeParameter="#//metamodel/Class/C"/>
          <eTypeArguments eTypeParameter="#//metamodel/Class/R"/>
          <eTypeArguments eTypeParameter="#//metamodel/Class/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="C">
        <eBounds eClassifier="#//metamodel/Class">
          <eTypeArguments eTypeParameter="#//metamodel/Class/S"/>
          <eTypeArguments eTypeParameter="#//metamodel/Class/C"/>
          <eTypeArguments eTypeParameter="#//metamodel/Class/R"/>
          <eTypeArguments eTypeParameter="#//metamodel/Class/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="R">
        <eBounds eClassifier="#//metamodel/Reference">
          <eTypeArguments eTypeParameter="#//metamodel/Class/S"/>
          <eTypeArguments eTypeParameter="#//metamodel/Class/C"/>
          <eTypeArguments eTypeParameter="#//metamodel/Class/R"/>
          <eTypeArguments eTypeParameter="#//metamodel/Class/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="A">
        <eBounds eClassifier="#//metamodel/Attribute">
          <eTypeArguments eTypeParameter="#//metamodel/Class/S"/>
          <eTypeArguments eTypeParameter="#//metamodel/Class/C"/>
          <eTypeArguments eTypeParameter="#//metamodel/Class/R"/>
          <eTypeArguments eTypeParameter="#//metamodel/Class/A"/>
        </eBounds>
      </eTypeParameters>
      <eOperations name="isContainerFor" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="C container = containedClass.getContainer();&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;// this means that we have reached the top level container for the 'containedClass'&#xD;&#xA;if(container == null) {&#xD;&#xA;&#x9;return false;&#xD;&#xA;// this is the container&#xD;&#xA;} else if(this.equals(container)) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;// one of the extended sections is the container&#xD;&#xA;} else if(container instanceof Section &amp;&amp; ((Section) container).getExtend().contains(this)) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;// this was not the container, so iterate up in the containment hierarchy&#xD;&#xA;} else {&#xD;&#xA;&#x9;return isContainerFor(container);&#xD;&#xA;}"/>
        </eAnnotations>
        <eParameters name="containedClass" lowerBound="1">
          <eGenericType eTypeParameter="#//metamodel/Class/C"/>
        </eParameters>
      </eOperations>
      <eOperations name="isContainedIn" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="EList&lt;C> containedClasses = new BasicEList&lt;>();&#xD;&#xA;&#xD;&#xA;// collect all classes that are referenced by containment references&#xD;&#xA;BasicEList&lt;R> refs = new BasicEList&lt;>(containerClass.getReferences());&#xD;&#xA;if(containerClass instanceof Section) {&#xD;&#xA;&#x9;EList&lt;Section> sections = ((Section) containerClass).getExtend(); &#xD;&#xA;&#x9;for (Section s : sections) {&#xD;&#xA;&#x9;&#x9;refs.addAll(s.getReferences());&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;for (R ref : containerClass.getReferences()) {&#xD;&#xA;&#x9;if(!(ref.getEReference().isContainment())) {&#xD;&#xA;&#x9;&#x9;continue;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;if(ref instanceof ContainmentReference&lt;?,?,?,?>){&#xD;&#xA;&#x9;&#x9;containedClasses.addAll(((ContainmentReference&lt;S,C,R,A>) ref).getValue());&#xD;&#xA;&#x9;} else if(ref instanceof MetaModelSectionReference) {&#xD;&#xA;&#x9;&#x9;containedClasses.addAll((Collection&lt;? extends C>) ((MetaModelSectionReference) ref).getValue());&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#x9;&#xD;&#xA;// recursively iterate over all contained classes&#xD;&#xA;boolean found = false;&#xD;&#xA;for (C containedClass : containedClasses) {&#xD;&#xA;&#x9;if(containedClass.equals(this) || isContainedIn(containedClass)) {&#xD;&#xA;&#x9;&#x9;found = true;&#xD;&#xA;&#x9;&#x9;break;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return found;"/>
        </eAnnotations>
        <eParameters name="containerClass" lowerBound="1">
          <eGenericType eTypeParameter="#//metamodel/Class/C"/>
        </eParameters>
      </eOperations>
      <eOperations name="getOwningContainmentReference">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="if(this.eContainer() instanceof ContainmentReference&lt;?,?,?,?>) {&#xD;&#xA;&#x9;return (ContainmentReference&lt;S,C,R,A>) this.eContainer();&#xD;&#xA;} else {&#xD;&#xA;&#x9;return null;&#xD;&#xA;}"/>
        </eAnnotations>
        <eGenericType eClassifier="#//metamodel/ContainmentReference">
          <eTypeArguments eTypeParameter="#//metamodel/Class/S"/>
          <eTypeArguments eTypeParameter="#//metamodel/Class/C"/>
          <eTypeArguments eTypeParameter="#//metamodel/Class/R"/>
          <eTypeArguments eTypeParameter="#//metamodel/Class/A"/>
        </eGenericType>
      </eOperations>
      <eOperations name="isReferencedBy" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="if(referencedClasses == null) {&#xD;&#xA;&#x9;referencedClasses = new BasicEList&lt;>();&#xD;&#xA;}&#xD;&#xA;BasicEList&lt;C> classes = new BasicEList&lt;>();&#xD;&#xA;&#xD;&#xA;// collect all classes that are referenced&#xD;&#xA;for (R ref : referencingClass.getReferences()) {&#xD;&#xA;&#xD;&#xA;&#x9;if(ref instanceof ContainmentReference&lt;?,?,?,?>){&#xD;&#xA;&#x9;&#x9;classes.addAll(((ContainmentReference&lt;S,C,R,A>) ref).getValue());&#xD;&#xA;&#x9;} else if(ref instanceof MetaModelSectionReference) {&#xD;&#xA;&#x9;&#x9;classes.addAll((Collection&lt;? extends C>) ((MetaModelSectionReference) ref).getValue());&#xD;&#xA;&#x9;} else if(ref instanceof NonContainmentReference){&#xD;&#xA;&#x9;&#x9;classes.addAll(((NonContainmentReference&lt;S,C,R,A>) ref).getValue());&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// recursively iterate over all referenced classes&#xD;&#xA;for (C clazz : classes) {&#xD;&#xA;&#x9;if(clazz.equals(this) || isReferencedBy(clazz, referencedClasses)) {&#xD;&#xA;&#x9;&#x9;return true;&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;if(!referencedClasses.contains(clazz)) {&#xD;&#xA;&#x9;&#x9;&#x9;referencedClasses.add(clazz);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return false;"/>
        </eAnnotations>
        <eParameters name="referencingClass" lowerBound="1">
          <eGenericType eTypeParameter="#//metamodel/Class/C"/>
        </eParameters>
        <eParameters name="referencedClasses" upperBound="-1">
          <eGenericType eTypeParameter="#//metamodel/Class/C"/>
        </eParameters>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="eClass" lowerBound="1"
          eType="ecore:EClass http://www.eclipse.org/emf/2002/Ecore#//EClass"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="cardinality" lowerBound="1"
          eType="#//metamodel/CardinalityType" defaultValueLiteral="ONE"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="references" upperBound="-1"
          containment="true" eOpposite="#//metamodel/Reference/owningClass">
        <eGenericType eTypeParameter="#//metamodel/Class/R"/>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="container">
        <eGenericType eTypeParameter="#//metamodel/Class/C"/>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="attributes" upperBound="-1"
          containment="true" eOpposite="#//metamodel/Attribute/owningClass">
        <eGenericType eTypeParameter="#//metamodel/Class/A"/>
      </eStructuralFeatures>
      <eGenericSuperTypes eClassifier="#//metamodel/MetaModelElement">
        <eTypeArguments eTypeParameter="#//metamodel/Class/S"/>
        <eTypeArguments eTypeParameter="#//metamodel/Class/C"/>
        <eTypeArguments eTypeParameter="#//metamodel/Class/R"/>
        <eTypeArguments eTypeParameter="#//metamodel/Class/A"/>
      </eGenericSuperTypes>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Section" abstract="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="constraints" value="extendsValidSections containerMatchesExtendContainer"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="extendsValidSections" value="Tuple {&#xD;&#xA;&#x9;message : String = 'The section extends a section that is either not abstract or that references an EClass of a different (super-)type!',&#xD;&#xA;&#x9;severity : Integer = 4,&#xD;&#xA;&#x9;status : Boolean = self.extendsOnlyValidSections()&#xD;&#xA;}.status"/>
      </eAnnotations>
      <eTypeParameters name="S">
        <eBounds eClassifier="#//metamodel/Section">
          <eTypeArguments eTypeParameter="#//metamodel/Section/S"/>
          <eTypeArguments eTypeParameter="#//metamodel/Section/C"/>
          <eTypeArguments eTypeParameter="#//metamodel/Section/R"/>
          <eTypeArguments eTypeParameter="#//metamodel/Section/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="C">
        <eBounds eClassifier="#//metamodel/Class">
          <eTypeArguments eTypeParameter="#//metamodel/Section/S"/>
          <eTypeArguments eTypeParameter="#//metamodel/Section/C"/>
          <eTypeArguments eTypeParameter="#//metamodel/Section/R"/>
          <eTypeArguments eTypeParameter="#//metamodel/Section/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="R">
        <eBounds eClassifier="#//metamodel/Reference">
          <eTypeArguments eTypeParameter="#//metamodel/Section/S"/>
          <eTypeArguments eTypeParameter="#//metamodel/Section/C"/>
          <eTypeArguments eTypeParameter="#//metamodel/Section/R"/>
          <eTypeArguments eTypeParameter="#//metamodel/Section/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="A">
        <eBounds eClassifier="#//metamodel/Attribute">
          <eTypeArguments eTypeParameter="#//metamodel/Section/S"/>
          <eTypeArguments eTypeParameter="#//metamodel/Section/C"/>
          <eTypeArguments eTypeParameter="#//metamodel/Section/R"/>
          <eTypeArguments eTypeParameter="#//metamodel/Section/A"/>
        </eBounds>
      </eTypeParameters>
      <eOperations name="extendsOnlyValidSections" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="if(this.getEClass() == null) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;for (S extend : this.getExtend()) {&#xD;&#xA;&#x9;if(!extend.isAbstract() || extend.getEClass() != null &amp;&amp; !(this.getEClass() == extend.getEClass()) &amp;&amp; !(this.getEClass().getEAllSuperTypes().contains(extend.getEClass()))) {&#xD;&#xA;&#x9;&#x9;return false;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return true;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="validateContainerMatchesExtendContainer" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="if(this.getContainer() == null) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;boolean result = this.getExtend().parallelStream().allMatch(&#xD;&#xA;&#x9;&#x9;e -> e.getContainer() == null || e.getContainer() == this.getContainer());&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;String errorMessage = &quot;The section extends a section that specifies a different container!&quot;;&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;diagnostics.add&#xD;&#xA;&#x9;&#x9;(new BasicDiagnostic&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9; &lt;%pamtram.metamodel.util.MetamodelValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9;MetamodelValidator.SECTION__VALIDATE_CONTAINER_MATCHES_EXTEND_CONTAINER,&#xD;&#xA;&#x9;&#x9;&#x9; errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9; new Object [] { this, &lt;%pamtram.metamodel.MetamodelPackage%>.Literals.SECTION__EXTEND }));&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
        <eParameters name="context">
          <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
            <eTypeArguments/>
            <eTypeArguments/>
          </eGenericType>
        </eParameters>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="abstract" lowerBound="1"
          eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
          defaultValueLiteral="false"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="extend" upperBound="-1">
        <eGenericType eTypeParameter="#//metamodel/Section/S"/>
      </eStructuralFeatures>
      <eGenericSuperTypes eClassifier="#//metamodel/Class">
        <eTypeArguments eTypeParameter="#//metamodel/Section/S"/>
        <eTypeArguments eTypeParameter="#//metamodel/Section/C"/>
        <eTypeArguments eTypeParameter="#//metamodel/Section/R"/>
        <eTypeArguments eTypeParameter="#//metamodel/Section/A"/>
      </eGenericSuperTypes>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="SourceSection">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="constraints" value="isReferencedByMapping"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="isReferencedByMapping" value="Tuple {&#xD;&#xA;&#x9;message : String = &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;'The section is not referenced by any mapping!',&#xD;&#xA;&#x9;severity : Integer = 2,&#xD;&#xA;&#x9;status : Boolean = &#xD;&#xA;&#x9;&#x9;self.referencingMappings->size() > 0&#xD;&#xA;}.status"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="referencingMappings"
          upperBound="-1" eType="#//mapping/MappingType" changeable="false" volatile="true"
          transient="true" derived="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
          <details key="derivation" value="pamtram::mapping::MappingType.allInstances()->select(m | self = m.sourceMMSection)"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eGenericSuperTypes eClassifier="#//metamodel/SourceSectionClass"/>
      <eGenericSuperTypes eClassifier="#//metamodel/Section">
        <eTypeArguments eClassifier="#//metamodel/SourceSection"/>
        <eTypeArguments eClassifier="#//metamodel/SourceSectionClass"/>
        <eTypeArguments eClassifier="#//metamodel/SourceSectionReference"/>
        <eTypeArguments eClassifier="#//metamodel/SourceSectionAttribute"/>
      </eGenericSuperTypes>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="TargetSection">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="constraints" value="isReferencedByMappingHintGroup"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="isReferencedByMappingHintGroup" value="Tuple {&#xD;&#xA;&#x9;message : String = &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;'The section is not referenced by any hint group and will not be instantiated!',&#xD;&#xA;&#x9;severity : Integer = 2,&#xD;&#xA;&#x9;status : Boolean = &#xD;&#xA;&#x9;&#x9;self.referencingMappingHintGroups->size() > 0&#xD;&#xA;}.status"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="referencingMappingHintGroups"
          upperBound="-1" eType="#//mapping/MappingHintGroupType" changeable="false"
          volatile="true" transient="true" derived="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
          <details key="derivation" value="pamtram::mapping::MappingHintGroupType.allInstances()->select(mhg | self = mhg.targetMMSection)"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="file" eType="#//metamodel/FileAttribute"/>
      <eGenericSuperTypes eClassifier="#//metamodel/TargetSectionClass"/>
      <eGenericSuperTypes eClassifier="#//metamodel/Section">
        <eTypeArguments eClassifier="#//metamodel/TargetSection"/>
        <eTypeArguments eClassifier="#//metamodel/TargetSectionClass"/>
        <eTypeArguments eClassifier="#//metamodel/TargetSectionReference"/>
        <eTypeArguments eClassifier="#//metamodel/TargetSectionAttribute"/>
      </eGenericSuperTypes>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="FileAttribute" eSuperTypes="#//metamodel/VirtualTargetSectionAttribute">
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="fileType" lowerBound="1"
          eType="#//metamodel/FileTypeEnum"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EEnum" name="FileTypeEnum">
      <eLiterals name="XMI"/>
      <eLiterals name="XML" value="1"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="SourceSectionClass">
      <eGenericSuperTypes eClassifier="#//metamodel/Class">
        <eTypeArguments eClassifier="#//metamodel/SourceSection"/>
        <eTypeArguments eClassifier="#//metamodel/SourceSectionClass"/>
        <eTypeArguments eClassifier="#//metamodel/SourceSectionReference"/>
        <eTypeArguments eClassifier="#//metamodel/SourceSectionAttribute"/>
      </eGenericSuperTypes>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="TargetSectionClass">
      <eGenericSuperTypes eClassifier="#//metamodel/Class">
        <eTypeArguments eClassifier="#//metamodel/TargetSection"/>
        <eTypeArguments eClassifier="#//metamodel/TargetSectionClass"/>
        <eTypeArguments eClassifier="#//metamodel/TargetSectionReference"/>
        <eTypeArguments eClassifier="#//metamodel/TargetSectionAttribute"/>
      </eGenericSuperTypes>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="LibraryParameter" abstract="true"
        eSuperTypes="#//NamedElement">
      <eTypeParameters name="ParameterType"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="source" lowerBound="1"
          eType="ecore:EClass http://www.eclipse.org/emf/2002/Ecore#//EObject"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="originalParameter" lowerBound="1">
        <eGenericType eTypeParameter="#//metamodel/LibraryParameter/ParameterType"/>
      </eStructuralFeatures>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="AttributeParameter">
      <eStructuralFeatures xsi:type="ecore:EReference" name="attribute" lowerBound="1"
          eType="#//metamodel/ActualTargetSectionAttribute" containment="true"/>
      <eGenericSuperTypes eClassifier="#//metamodel/LibraryParameter">
        <eTypeArguments eClassifier="ecore:EClass ../../de.tud.et.ifa.agtele.genlibrary/model/genlibrary.ecore#//AbstractAttributeParameter">
          <eTypeArguments/>
        </eTypeArguments>
      </eGenericSuperTypes>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ContainerParameter">
      <eStructuralFeatures xsi:type="ecore:EReference" name="class" lowerBound="1"
          eType="#//metamodel/TargetSection" containment="true"/>
      <eGenericSuperTypes eClassifier="#//metamodel/LibraryParameter">
        <eTypeArguments eClassifier="ecore:EClass ../../de.tud.et.ifa.agtele.genlibrary/model/genlibrary.ecore#//AbstractContainerParameter">
          <eTypeArguments/>
          <eTypeArguments/>
        </eTypeArguments>
      </eGenericSuperTypes>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ExternalReferenceParameter">
      <eStructuralFeatures xsi:type="ecore:EReference" name="reference" lowerBound="1"
          eType="#//metamodel/TargetSectionNonContainmentReference" containment="true"/>
      <eGenericSuperTypes eClassifier="#//metamodel/LibraryParameter">
        <eTypeArguments eClassifier="ecore:EClass ../../de.tud.et.ifa.agtele.genlibrary/model/genlibrary.ecore#//AbstractExternalReferenceParameter">
          <eTypeArguments/>
          <eTypeArguments/>
        </eTypeArguments>
      </eGenericSuperTypes>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="LibraryEntry">
      <eStructuralFeatures xsi:type="ecore:EReference" name="parameters" lowerBound="1"
          upperBound="-1" containment="true">
        <eGenericType eClassifier="#//metamodel/LibraryParameter">
          <eTypeArguments/>
        </eGenericType>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="libraryFile" lowerBound="1"
          eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="originalLibraryEntry"
          lowerBound="1" eType="ecore:EClass ../../de.tud.et.ifa.agtele.genlibrary/model/genlibrary.ecore#//LibraryEntry"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="path" lowerBound="1"
          eType="#//metamodel/VirtualTargetSectionAttribute" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="id" lowerBound="1" eType="#//metamodel/VirtualTargetSectionAttribute"
          containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Reference" abstract="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="constraints" value="eReferenceMatchesParentEClass"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="eReferenceMatchesParentEClass" value="Tuple {&#xD;&#xA;&#x9;message : String = &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;'The eReference \'' + self.eReference.name + '\' is not allowed by the containing Class!',&#xD;&#xA;&#x9;severity : Integer = 4,&#xD;&#xA;&#x9;status : Boolean = &#xD;&#xA;&#x9;&#x9;if self.isLibraryEntry() or self.eReference.oclType() = OclVoid then &#xD;&#xA;&#x9;&#x9;&#x9;true else &#xD;&#xA;&#x9;&#x9;&#x9;let parentEClass = self.oclContainer().oclAsType(pamtram::metamodel::Class).eClass in&#xD;&#xA;&#x9;&#x9;&#x9;if parentEClass.oclType() = OclVoid then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;true else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;parentEClass.oclAsType(ecore::EClass).eAllReferences->includes(self.eReference)&#xD;&#xA;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;}.status"/>
      </eAnnotations>
      <eTypeParameters name="S">
        <eBounds eClassifier="#//metamodel/Section">
          <eTypeArguments eTypeParameter="#//metamodel/Reference/S"/>
          <eTypeArguments eTypeParameter="#//metamodel/Reference/C"/>
          <eTypeArguments eTypeParameter="#//metamodel/Reference/R"/>
          <eTypeArguments eTypeParameter="#//metamodel/Reference/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="C">
        <eBounds eClassifier="#//metamodel/Class">
          <eTypeArguments eTypeParameter="#//metamodel/Reference/S"/>
          <eTypeArguments eTypeParameter="#//metamodel/Reference/C"/>
          <eTypeArguments eTypeParameter="#//metamodel/Reference/R"/>
          <eTypeArguments eTypeParameter="#//metamodel/Reference/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="R">
        <eBounds eClassifier="#//metamodel/Reference">
          <eTypeArguments eTypeParameter="#//metamodel/Reference/S"/>
          <eTypeArguments eTypeParameter="#//metamodel/Reference/C"/>
          <eTypeArguments eTypeParameter="#//metamodel/Reference/R"/>
          <eTypeArguments eTypeParameter="#//metamodel/Reference/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="A">
        <eBounds eClassifier="#//metamodel/Attribute">
          <eTypeArguments eTypeParameter="#//metamodel/Reference/S"/>
          <eTypeArguments eTypeParameter="#//metamodel/Reference/C"/>
          <eTypeArguments eTypeParameter="#//metamodel/Reference/R"/>
          <eTypeArguments eTypeParameter="#//metamodel/Reference/A"/>
        </eBounds>
      </eTypeParameters>
      <eStructuralFeatures xsi:type="ecore:EReference" name="eReference" lowerBound="1"
          eType="ecore:EClass http://www.eclipse.org/emf/2002/Ecore#//EReference"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="owningClass" changeable="false"
          eOpposite="#//metamodel/Class/references">
        <eGenericType eTypeParameter="#//metamodel/Reference/C"/>
      </eStructuralFeatures>
      <eGenericSuperTypes eClassifier="#//metamodel/MetaModelElement">
        <eTypeArguments eTypeParameter="#//metamodel/Reference/S"/>
        <eTypeArguments eTypeParameter="#//metamodel/Reference/C"/>
        <eTypeArguments eTypeParameter="#//metamodel/Reference/R"/>
        <eTypeArguments eTypeParameter="#//metamodel/Reference/A"/>
      </eGenericSuperTypes>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ContainmentReference" abstract="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="constraints" value="eReferenceIsContainment"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="eReferenceIsContainment" value="Tuple {&#xD;&#xA;&#x9;message : String = &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;'The eReference \'' + self.eReference.name + '\' is no containment reference!',&#xD;&#xA;&#x9;severity : Integer = 4,&#xD;&#xA;&#x9;status : Boolean = &#xD;&#xA;&#x9;&#x9;if self.eReference.oclType() = OclVoid then&#xD;&#xA;&#x9;&#x9;&#x9;true else&#xD;&#xA;&#x9;&#x9;&#x9;self.eReference.containment=true&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;}.status"/>
      </eAnnotations>
      <eTypeParameters name="S">
        <eBounds eClassifier="#//metamodel/Section">
          <eTypeArguments eTypeParameter="#//metamodel/ContainmentReference/S"/>
          <eTypeArguments eTypeParameter="#//metamodel/ContainmentReference/C"/>
          <eTypeArguments eTypeParameter="#//metamodel/ContainmentReference/R"/>
          <eTypeArguments eTypeParameter="#//metamodel/ContainmentReference/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="C">
        <eBounds eClassifier="#//metamodel/Class">
          <eTypeArguments eTypeParameter="#//metamodel/ContainmentReference/S"/>
          <eTypeArguments eTypeParameter="#//metamodel/ContainmentReference/C"/>
          <eTypeArguments eTypeParameter="#//metamodel/ContainmentReference/R"/>
          <eTypeArguments eTypeParameter="#//metamodel/ContainmentReference/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="R">
        <eBounds eClassifier="#//metamodel/Reference">
          <eTypeArguments eTypeParameter="#//metamodel/ContainmentReference/S"/>
          <eTypeArguments eTypeParameter="#//metamodel/ContainmentReference/C"/>
          <eTypeArguments eTypeParameter="#//metamodel/ContainmentReference/R"/>
          <eTypeArguments eTypeParameter="#//metamodel/ContainmentReference/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="A">
        <eBounds eClassifier="#//metamodel/Attribute">
          <eTypeArguments eTypeParameter="#//metamodel/ContainmentReference/S"/>
          <eTypeArguments eTypeParameter="#//metamodel/ContainmentReference/C"/>
          <eTypeArguments eTypeParameter="#//metamodel/ContainmentReference/R"/>
          <eTypeArguments eTypeParameter="#//metamodel/ContainmentReference/A"/>
        </eBounds>
      </eTypeParameters>
      <eStructuralFeatures xsi:type="ecore:EReference" name="value" upperBound="-1"
          containment="true">
        <eGenericType eTypeParameter="#//metamodel/ContainmentReference/C"/>
      </eStructuralFeatures>
      <eGenericSuperTypes eClassifier="#//metamodel/Reference">
        <eTypeArguments eTypeParameter="#//metamodel/ContainmentReference/S"/>
        <eTypeArguments eTypeParameter="#//metamodel/ContainmentReference/C"/>
        <eTypeArguments eTypeParameter="#//metamodel/ContainmentReference/R"/>
        <eTypeArguments eTypeParameter="#//metamodel/ContainmentReference/A"/>
      </eGenericSuperTypes>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="NonContainmentReference" abstract="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="constraints" value="eReferenceIsNonContainment"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="eReferenceIsNonContainment" value="Tuple {&#xD;&#xA;&#x9;message : String = &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;'The eReference \'' + self.eReference.name + '\' is no non-containment reference!',&#xD;&#xA;&#x9;severity : Integer = 4,&#xD;&#xA;&#x9;status : Boolean = &#xD;&#xA;&#x9;&#x9;if self.eReference.oclType() = OclVoid then&#xD;&#xA;&#x9;&#x9;&#x9;true else&#xD;&#xA;&#x9;&#x9;&#x9;self.eReference.containment=false&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;}.status"/>
      </eAnnotations>
      <eTypeParameters name="S">
        <eBounds eClassifier="#//metamodel/Section">
          <eTypeArguments eTypeParameter="#//metamodel/NonContainmentReference/S"/>
          <eTypeArguments eTypeParameter="#//metamodel/NonContainmentReference/C"/>
          <eTypeArguments eTypeParameter="#//metamodel/NonContainmentReference/R"/>
          <eTypeArguments eTypeParameter="#//metamodel/NonContainmentReference/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="C">
        <eBounds eClassifier="#//metamodel/Class">
          <eTypeArguments eTypeParameter="#//metamodel/NonContainmentReference/S"/>
          <eTypeArguments eTypeParameter="#//metamodel/NonContainmentReference/C"/>
          <eTypeArguments eTypeParameter="#//metamodel/NonContainmentReference/R"/>
          <eTypeArguments eTypeParameter="#//metamodel/NonContainmentReference/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="R">
        <eBounds eClassifier="#//metamodel/Reference">
          <eTypeArguments eTypeParameter="#//metamodel/NonContainmentReference/S"/>
          <eTypeArguments eTypeParameter="#//metamodel/NonContainmentReference/C"/>
          <eTypeArguments eTypeParameter="#//metamodel/NonContainmentReference/R"/>
          <eTypeArguments eTypeParameter="#//metamodel/NonContainmentReference/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="A">
        <eBounds eClassifier="#//metamodel/Attribute">
          <eTypeArguments eTypeParameter="#//metamodel/NonContainmentReference/S"/>
          <eTypeArguments eTypeParameter="#//metamodel/NonContainmentReference/C"/>
          <eTypeArguments eTypeParameter="#//metamodel/NonContainmentReference/R"/>
          <eTypeArguments eTypeParameter="#//metamodel/NonContainmentReference/A"/>
        </eBounds>
      </eTypeParameters>
      <eStructuralFeatures xsi:type="ecore:EReference" name="value" upperBound="-1">
        <eGenericType eTypeParameter="#//metamodel/NonContainmentReference/C"/>
      </eStructuralFeatures>
      <eGenericSuperTypes eClassifier="#//metamodel/Reference">
        <eTypeArguments eTypeParameter="#//metamodel/NonContainmentReference/S"/>
        <eTypeArguments eTypeParameter="#//metamodel/NonContainmentReference/C"/>
        <eTypeArguments eTypeParameter="#//metamodel/NonContainmentReference/R"/>
        <eTypeArguments eTypeParameter="#//metamodel/NonContainmentReference/A"/>
      </eGenericSuperTypes>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="SourceSectionReference" abstract="true">
      <eOperations name="getValuesGeneric" upperBound="-1" eType="#//metamodel/SourceSectionClass">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#x9;&#x9;&#x9;&#x9;EList&lt;SourceSectionClass> secs= new org.eclipse.emf.common.util.BasicEList&lt;SourceSectionClass>();&#xA;&#x9;&#x9;&#x9;&#x9;if(this instanceof SourceSectionContainmentReference){&#xA;&#x9;&#x9;&#x9;&#x9; secs.addAll(((SourceSectionContainmentReference) this).getValue());&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;} else if(this instanceof MetaModelSectionReference){&#xA;&#x9;&#x9;&#x9;&#x9; secs.addAll(((MetaModelSectionReference) this).getValue());&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;return secs;"/>
        </eAnnotations>
      </eOperations>
      <eGenericSuperTypes eClassifier="#//metamodel/Reference">
        <eTypeArguments eClassifier="#//metamodel/SourceSection"/>
        <eTypeArguments eClassifier="#//metamodel/SourceSectionClass"/>
        <eTypeArguments eClassifier="#//metamodel/SourceSectionReference"/>
        <eTypeArguments eClassifier="#//metamodel/SourceSectionAttribute"/>
      </eGenericSuperTypes>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="TargetSectionReference" abstract="true">
      <eOperations name="getValuesGeneric" upperBound="-1" eType="#//metamodel/TargetSectionClass">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="EList&lt;TargetSectionClass> secs= new org.eclipse.emf.common.util.BasicEList&lt;TargetSectionClass>();&#xA;if(this instanceof TargetSectionContainmentReference){&#xA; secs.addAll(((TargetSectionContainmentReference) this).getValue());&#xA;&#xA;} else if(this instanceof TargetSectionNonContainmentReference){&#xA; secs.addAll(((TargetSectionNonContainmentReference) this).getValue());&#xA;}&#xA;return secs;"/>
        </eAnnotations>
      </eOperations>
      <eGenericSuperTypes eClassifier="#//metamodel/Reference">
        <eTypeArguments eClassifier="#//metamodel/TargetSection"/>
        <eTypeArguments eClassifier="#//metamodel/TargetSectionClass"/>
        <eTypeArguments eClassifier="#//metamodel/TargetSectionReference"/>
        <eTypeArguments eClassifier="#//metamodel/TargetSectionAttribute"/>
      </eGenericSuperTypes>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="TargetSectionContainmentReference">
      <eGenericSuperTypes eClassifier="#//metamodel/ContainmentReference">
        <eTypeArguments eClassifier="#//metamodel/TargetSection"/>
        <eTypeArguments eClassifier="#//metamodel/TargetSectionClass"/>
        <eTypeArguments eClassifier="#//metamodel/TargetSectionReference"/>
        <eTypeArguments eClassifier="#//metamodel/TargetSectionAttribute"/>
      </eGenericSuperTypes>
      <eGenericSuperTypes eClassifier="#//metamodel/TargetSectionReference"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="TargetSectionNonContainmentReference">
      <eGenericSuperTypes eClassifier="#//metamodel/NonContainmentReference">
        <eTypeArguments eClassifier="#//metamodel/TargetSection"/>
        <eTypeArguments eClassifier="#//metamodel/TargetSectionClass"/>
        <eTypeArguments eClassifier="#//metamodel/TargetSectionReference"/>
        <eTypeArguments eClassifier="#//metamodel/TargetSectionAttribute"/>
      </eGenericSuperTypes>
      <eGenericSuperTypes eClassifier="#//metamodel/TargetSectionReference"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="SourceSectionContainmentReference">
      <eGenericSuperTypes eClassifier="#//metamodel/ContainmentReference">
        <eTypeArguments eClassifier="#//metamodel/SourceSection"/>
        <eTypeArguments eClassifier="#//metamodel/SourceSectionClass"/>
        <eTypeArguments eClassifier="#//metamodel/SourceSectionReference"/>
        <eTypeArguments eClassifier="#//metamodel/SourceSectionAttribute"/>
      </eGenericSuperTypes>
      <eGenericSuperTypes eClassifier="#//metamodel/SourceSectionReference"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="MetaModelSectionReference" eSuperTypes="#//metamodel/SourceSectionReference">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="constraints" value="valuesMatchReferenceType"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="valuesMatchReferenceType" value="Tuple {&#xD;&#xA;&#x9;message : String = &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;self.value->select(c : SourceSectionClass | not self.eReference.eReferenceType.isSuperTypeOf(c.eClass))->size().toString() + ' of the selected target Classes (Value) are not allowed by the selected eReference \'' + self.eReference.name + '\'!',&#xD;&#xA;&#x9;severity : Integer = 4,&#xD;&#xA;&#x9;status : Boolean = &#xD;&#xA;&#x9;&#x9;if self.eReference.oclType() = OclVoid then&#xD;&#xA;&#x9;&#x9;&#x9;true else&#xD;&#xA;&#x9;&#x9;&#x9;self.value->forAll(c : SourceSectionClass | self.eReference.eReferenceType.isSuperTypeOf(c.eClass))&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;}.status"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="value" upperBound="-1"
          eType="#//metamodel/SourceSectionClass"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Attribute" abstract="true">
      <eTypeParameters name="S">
        <eBounds eClassifier="#//metamodel/Section">
          <eTypeArguments eTypeParameter="#//metamodel/Attribute/S"/>
          <eTypeArguments eTypeParameter="#//metamodel/Attribute/C"/>
          <eTypeArguments eTypeParameter="#//metamodel/Attribute/R"/>
          <eTypeArguments eTypeParameter="#//metamodel/Attribute/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="C">
        <eBounds eClassifier="#//metamodel/Class">
          <eTypeArguments eTypeParameter="#//metamodel/Attribute/S"/>
          <eTypeArguments eTypeParameter="#//metamodel/Attribute/C"/>
          <eTypeArguments eTypeParameter="#//metamodel/Attribute/R"/>
          <eTypeArguments eTypeParameter="#//metamodel/Attribute/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="R">
        <eBounds eClassifier="#//metamodel/Reference">
          <eTypeArguments eTypeParameter="#//metamodel/Attribute/S"/>
          <eTypeArguments eTypeParameter="#//metamodel/Attribute/C"/>
          <eTypeArguments eTypeParameter="#//metamodel/Attribute/R"/>
          <eTypeArguments eTypeParameter="#//metamodel/Attribute/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="A">
        <eBounds eClassifier="#//metamodel/Attribute">
          <eTypeArguments eTypeParameter="#//metamodel/Attribute/S"/>
          <eTypeArguments eTypeParameter="#//metamodel/Attribute/C"/>
          <eTypeArguments eTypeParameter="#//metamodel/Attribute/R"/>
          <eTypeArguments eTypeParameter="#//metamodel/Attribute/A"/>
        </eBounds>
      </eTypeParameters>
      <eStructuralFeatures xsi:type="ecore:EReference" name="owningClass" changeable="false"
          eOpposite="#//metamodel/Class/attributes">
        <eGenericType eTypeParameter="#//metamodel/Attribute/C"/>
      </eStructuralFeatures>
      <eGenericSuperTypes eClassifier="#//metamodel/MetaModelElement">
        <eTypeArguments eTypeParameter="#//metamodel/Attribute/S"/>
        <eTypeArguments eTypeParameter="#//metamodel/Attribute/C"/>
        <eTypeArguments eTypeParameter="#//metamodel/Attribute/R"/>
        <eTypeArguments eTypeParameter="#//metamodel/Attribute/A"/>
      </eGenericSuperTypes>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="SourceSectionAttribute">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="constraints" value="attributeMatchesParentEClass"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="attributeMatchesParentEClass" value="Tuple {&#xD;&#xA;&#x9;message : String = &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;'The eAttribute \'' + self.attribute.name + '\' is not allowed by the containing Class!',&#xD;&#xA;&#x9;severity : Integer = 4,&#xD;&#xA;&#x9;status : Boolean = &#xD;&#xA;&#x9;&#x9;if self.isLibraryEntry() or self.attribute.oclType() = OclVoid then &#xD;&#xA;&#x9;&#x9;&#x9;true else&#xD;&#xA;&#x9;&#x9;&#x9;let parentEClass = self.oclContainer().oclAsType(pamtram::metamodel::Class).eClass in&#xD;&#xA;&#x9;&#x9;&#x9;if parentEClass.oclType() = OclVoid then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;true else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;parentEClass.oclAsType(ecore::EClass).eAllAttributes->includes(self.attribute)&#xD;&#xA;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;}.status"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="valueConstraint" upperBound="-1"
          eType="#//metamodel/AttributeValueConstraint" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="attribute" lowerBound="1"
          eType="ecore:EClass http://www.eclipse.org/emf/2002/Ecore#//EAttribute"/>
      <eGenericSuperTypes eClassifier="#//metamodel/Attribute">
        <eTypeArguments eClassifier="#//metamodel/SourceSection"/>
        <eTypeArguments eClassifier="#//metamodel/SourceSectionClass"/>
        <eTypeArguments eClassifier="#//metamodel/SourceSectionReference"/>
        <eTypeArguments eClassifier="#//metamodel/SourceSectionAttribute"/>
      </eGenericSuperTypes>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="TargetSectionAttribute" abstract="true">
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="unique" lowerBound="1"
          eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
          defaultValueLiteral="false"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
      <eGenericSuperTypes eClassifier="#//metamodel/Attribute">
        <eTypeArguments eClassifier="#//metamodel/TargetSection"/>
        <eTypeArguments eClassifier="#//metamodel/TargetSectionClass"/>
        <eTypeArguments eClassifier="#//metamodel/TargetSectionReference"/>
        <eTypeArguments eClassifier="#//metamodel/TargetSectionAttribute"/>
      </eGenericSuperTypes>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ActualTargetSectionAttribute" eSuperTypes="#//metamodel/TargetSectionAttribute">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="constraints" value="attributeMatchesParentEClass"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="attributeMatchesParentEClass" value="Tuple {&#xD;&#xA;&#x9;message : String = &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;'The eAttribute \'' + self.attribute.name + '\' is not allowed by the containing Class!',&#xD;&#xA;&#x9;severity : Integer = 4,&#xD;&#xA;&#x9;status : Boolean = &#xD;&#xA;&#x9;&#x9;if self.isLibraryEntry() or self.attribute.oclType() = OclVoid then &#xD;&#xA;&#x9;&#x9;&#x9;true else&#xD;&#xA;&#x9;&#x9;&#x9;let parentEClass = self.oclContainer().oclAsType(pamtram::metamodel::Class).eClass in&#xD;&#xA;&#x9;&#x9;&#x9;if parentEClass.oclType() = OclVoid then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;true else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;parentEClass.oclAsType(ecore::EClass).eAllAttributes->includes(self.attribute)&#xD;&#xA;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;}.status"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="attribute" lowerBound="1"
          eType="ecore:EClass http://www.eclipse.org/emf/2002/Ecore#//EAttribute"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="VirtualTargetSectionAttribute" eSuperTypes="#//metamodel/TargetSectionAttribute"/>
    <eClassifiers xsi:type="ecore:EEnum" name="AttributeValueConstraintType">
      <eLiterals name="INCLUSION"/>
      <eLiterals name="EXCLUSION" value="1"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="EqualityMatcher" eSuperTypes="#//metamodel/CaseSensitiveConstraint"/>
    <eClassifiers xsi:type="ecore:EClass" name="AttributeValueConstraint" abstract="true"
        interface="true" eSuperTypes="#//NamedElement">
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="type" lowerBound="1"
          eType="#//metamodel/AttributeValueConstraintType" defaultValueLiteral="INCLUSION"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="SubstringMatcher" eSuperTypes="#//metamodel/CaseSensitiveConstraint"/>
    <eClassifiers xsi:type="ecore:EClass" name="BeginningMatcher" eSuperTypes="#//metamodel/CaseSensitiveConstraint"/>
    <eClassifiers xsi:type="ecore:EClass" name="EndingMatcher" eSuperTypes="#//metamodel/CaseSensitiveConstraint"/>
    <eClassifiers xsi:type="ecore:EClass" name="RegExMatcher" eSuperTypes="#//metamodel/SingleReferenceAttributeValueConstraint"/>
    <eClassifiers xsi:type="ecore:EClass" name="CaseSensitiveConstraint" abstract="true"
        interface="true" eSuperTypes="#//metamodel/SingleReferenceAttributeValueConstraint">
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="caseSensitive" lowerBound="1"
          eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
          defaultValueLiteral="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EEnum" name="CardinalityType">
      <eLiterals name="ONE"/>
      <eLiterals name="ONE__INFINITY" value="1"/>
      <eLiterals name="ZERO__INFINITY" value="2"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="RangeConstraint" eSuperTypes="#//metamodel/MultipleReferencesAttributeValueConstraint">
      <eStructuralFeatures xsi:type="ecore:EReference" name="upperBound" eType="#//metamodel/RangeBound"
          containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="lowerBound" eType="#//metamodel/RangeBound"
          containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="MultipleReferencesAttributeValueConstraint"
        abstract="true" eSuperTypes="#//metamodel/AttributeValueConstraint">
      <eOperations name="checkConstraint" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eParameters name="attrValue" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
        <eParameters name="refValue" lowerBound="1" upperBound="-1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="InstancePointer" eSuperTypes="#//mapping/ExpressionHint #//mapping/ModifiableHint">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="constraints" value="noModifiedAttributeElementTypesInConditionModelConditions"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="noModifiedAttributeElementTypesInConditionModelConditions" value="Tuple {&#xD;&#xA;&#x9;message : String = 'ModifiedAttributeElementTypes are not allowed as part of ConditionModelConditions!',&#xD;&#xA;&#x9;severity : Integer = 4,&#xD;&#xA;&#x9;status : Boolean = &#xD;&#xA;&#x9;&#x9;if self.oclContainer().oclIsKindOf(pamtram::condition::ComplexCondition) and self.oclContainer().oclAsType(pamtram::condition::ComplexCondition).isConditionModelCondition() then&#xD;&#xA;&#x9;&#x9;&#x9;not self.sourceAttributes->exists(self.oclIsTypeOf(pamtram::mapping::ModifiedAttributeElementType)) else&#xD;&#xA;&#x9;&#x9;&#x9;true&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;}.status"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="attributePointer" lowerBound="1"
          eType="#//metamodel/SourceSectionAttribute"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="sourceAttributes" lowerBound="1"
          upperBound="-1" eType="#//metamodel/InstancePointerSourceInterface" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="InstancePointerSourceInterface" abstract="true"
        interface="true" eSuperTypes="#//mapping/MappingHintSourceInterface"/>
    <eClassifiers xsi:type="ecore:EClass" name="InstancePointerSourceElement">
      <eGenericSuperTypes eClassifier="#//mapping/LocalModifiedAttributeElementType">
        <eTypeArguments eClassifier="#//metamodel/SourceSection"/>
        <eTypeArguments eClassifier="#//metamodel/SourceSectionClass"/>
        <eTypeArguments eClassifier="#//metamodel/SourceSectionReference"/>
        <eTypeArguments eClassifier="#//metamodel/SourceSectionAttribute"/>
      </eGenericSuperTypes>
      <eGenericSuperTypes eClassifier="#//metamodel/InstancePointerSourceInterface"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="InstancePointerExternalSourceElement">
      <eGenericSuperTypes eClassifier="#//mapping/ExternalModifiedAttributeElementType">
        <eTypeArguments eClassifier="#//metamodel/SourceSection"/>
        <eTypeArguments eClassifier="#//metamodel/SourceSectionClass"/>
        <eTypeArguments eClassifier="#//metamodel/SourceSectionReference"/>
        <eTypeArguments eClassifier="#//metamodel/SourceSectionAttribute"/>
      </eGenericSuperTypes>
      <eGenericSuperTypes eClassifier="#//metamodel/InstancePointerSourceInterface"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="RangeBound" eSuperTypes="#//mapping/ExpressionHint #//mapping/ModifiableHint">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="constraints" value="onlyFixedValuesInSourceSections onlyFixedValuesOrGlobalAttributesInConditionModel"/>
      </eAnnotations>
      <eOperations name="validateOnlyFixedValuesInSourceSections" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="if(this.getSourceElements().isEmpty() || &#xD;&#xA;&#x9;&#x9;!&lt;%de.tud.et.ifa.agtele.emf.AgteleEcoreUtil%>.hasAncestorOfKind(this, &lt;%pamtram.metamodel.MetamodelPackage%>.eINSTANCE.getSourceSectionAttribute())) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;boolean result = this.getSourceElements().parallelStream().allMatch(s -> s instanceof &lt;%pamtram.mapping.FixedValue%>);&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;String errorMessage = &quot;This AttributeValueConstraint must only&quot;&#xD;&#xA;&#x9;&#x9;&#x9;+ &quot; contain FixedValues as source elements as it is modeled as part of a SourceSection!'&quot;;&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;diagnostics.add&#xD;&#xA;&#x9;&#x9;(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9; &lt;%pamtram.metamodel.util.MetamodelValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9; MetamodelValidator.SINGLE_REFERENCE_ATTRIBUTE_VALUE_CONSTRAINT__VALIDATE_ONLY_FIXED_VALUES_IN_SOURCE_SECTIONS,&#xD;&#xA;&#x9;&#x9;&#x9; errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9; new Object [] { this,  &lt;%pamtram.metamodel.MetamodelPackage%>.Literals.SINGLE_REFERENCE_ATTRIBUTE_VALUE_CONSTRAINT__SOURCE_ELEMENTS }));&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
        <eParameters name="context">
          <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
            <eTypeArguments/>
            <eTypeArguments/>
          </eGenericType>
        </eParameters>
      </eOperations>
      <eOperations name="validateOnlyFixedValuesOrGlobalAttributesInConditionModel"
          eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="if(this.getSourceElements().isEmpty() || &#xD;&#xA;&#x9;&#x9;!&lt;%de.tud.et.ifa.agtele.emf.AgteleEcoreUtil%>.hasAncestorOfKind(this, &lt;%pamtram.condition.ConditionPackage%>.eINSTANCE.getComplexCondition())) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&lt;%pamtram.condition.ComplexCondition%> condition = (ComplexCondition) AgteleEcoreUtil.getAncestorOfKind(this, &lt;%pamtram.condition.ConditionPackage%>.eINSTANCE.getComplexCondition());&#xD;&#xA;&#xD;&#xA;if(!condition.isConditionModelCondition()) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;boolean result = this.getSourceElements().parallelStream().allMatch(s -> s instanceof &lt;%pamtram.mapping.FixedValue%> || s instanceof &lt;%pamtram.mapping.GlobalAttributeImporter%>);&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;String errorMessage = &quot;This AttributeValueConstraint must only&quot;&#xD;&#xA;&#x9;&#x9;&#x9;+ &quot; contain FixedValues or GlobalAttributeImporters as source elements as it is modeled as part of a condition inside a ConditionModel!'&quot;;&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;diagnostics.add&#xD;&#xA;&#x9;&#x9;(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9; &lt;%pamtram.metamodel.util.MetamodelValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9; MetamodelValidator.RANGE_BOUND__VALIDATE_ONLY_FIXED_VALUES_OR_GLOBAL_ATTRIBUTES_IN_CONDITION_MODEL,&#xD;&#xA;&#x9;&#x9;&#x9; errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9; new Object [] { this,  &lt;%pamtram.metamodel.MetamodelPackage%>.Literals.RANGE_BOUND__SOURCE_ELEMENTS }));&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
        <eParameters name="context">
          <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
            <eTypeArguments/>
            <eTypeArguments/>
          </eGenericType>
        </eParameters>
      </eOperations>
      <eOperations name="isLocalConstraint" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="if(this.eContainer().eContainer() instanceof &lt;%pamtram.metamodel.SourceSectionAttribute%>) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;if(!(this.eContainer().eContainer() instanceof &lt;%pamtram.condition.AttributeCondition%>)) {&#xD;&#xA;&#x9;throw new UnsupportedOperationException();&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&lt;%org.eclipse.emf.ecore.EObject%> container = this;&#xD;&#xA;&#xD;&#xA;while(!(container instanceof &lt;%pamtram.mapping.Mapping%>)) {&#xD;&#xA;&#x9;if(container == null) {&#xD;&#xA;&#x9;&#x9;return false;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;container = container.eContainer();&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// The SourceSection of the Mapping that contains the constraint&#xD;&#xA;//&#xD;&#xA;&lt;%pamtram.metamodel.SourceSection%> localSection = ((Mapping) container).getSourceMMSection();&#xD;&#xA;&#xD;&#xA;if(getSourceElements().parallelStream().allMatch(s -> s instanceof &lt;%pamtram.mapping.FixedValue%> || s instanceof &lt;%pamtram.mapping.GlobalAttributeImporter%> ||&#xD;&#xA;&#x9;&#x9;(s instanceof &lt;%pamtram.metamodel.AttributeValueConstraintSourceElement%> &amp;&amp;&#xD;&#xA;&#x9;&#x9;((AttributeValueConstraintSourceElement) s).getSource().getContainingSection().equals(localSection)) ||&#xD;&#xA;&#x9;&#x9;(s instanceof &lt;%pamtram.metamodel.AttributeValueConstraintExternalSourceElement%> &amp;&amp;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;((AttributeValueConstraintExternalSourceElement) s).getSource().getContainingSection().isContainerFor(localSection)))) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// A constraint is also 'local' if an InstancePointer with local or external SourceAttributes exist&#xD;&#xA;//&#xD;&#xA;return getBoundReferenceValueAdditionalSpecification().parallelStream().flatMap(&#xD;&#xA;&#x9;&#x9;instancePointer -> instancePointer.getSourceAttributes().parallelStream().filter(&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;s -> s instanceof &lt;%pamtram.metamodel.InstancePointerSourceElement%> || &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;s instanceof &lt;%pamtram.metamodel.InstancePointerExternalSourceElement%>)&#xD;&#xA;&#x9;&#x9;).findAny().isPresent();"/>
        </eAnnotations>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="boundType" eType="#//metamodel/AttributeValueConstraintType"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="boundReferenceValueAdditionalSpecification"
          upperBound="-1" eType="#//metamodel/InstancePointer" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="sourceElements" upperBound="-1"
          eType="#//metamodel/AttributeValueConstraintSourceInterface" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="SingleReferenceAttributeValueConstraint"
        abstract="true" eSuperTypes="#//metamodel/AttributeValueConstraint #//mapping/ExpressionHint #//mapping/ModifiableHint">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="constraints" value="onlyFixedValuesInSourceSections onlyFixedValuesOrGlobalAttributesInConditionModel"/>
      </eAnnotations>
      <eOperations name="checkConstraint" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eParameters name="attrValue" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
        <eParameters name="refValue" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
      </eOperations>
      <eOperations name="validateOnlyFixedValuesInSourceSections" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="if(this.getSourceElements().isEmpty() || &#xD;&#xA;&#x9;&#x9;!&lt;%de.tud.et.ifa.agtele.emf.AgteleEcoreUtil%>.hasAncestorOfKind(this, &lt;%pamtram.metamodel.MetamodelPackage%>.eINSTANCE.getSourceSectionAttribute())) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;boolean result = this.getSourceElements().parallelStream().allMatch(s -> s instanceof &lt;%pamtram.mapping.FixedValue%>);&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;String errorMessage = &quot;This AttributeValueConstraint must only&quot;&#xD;&#xA;&#x9;&#x9;&#x9;+ &quot; contain FixedValues as source elements as it is modeled as part of a SourceSection!'&quot;;&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;diagnostics.add&#xD;&#xA;&#x9;&#x9;(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9; &lt;%pamtram.metamodel.util.MetamodelValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9; MetamodelValidator.SINGLE_REFERENCE_ATTRIBUTE_VALUE_CONSTRAINT__VALIDATE_ONLY_FIXED_VALUES_IN_SOURCE_SECTIONS,&#xD;&#xA;&#x9;&#x9;&#x9; errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9; new Object [] { this,  &lt;%pamtram.metamodel.MetamodelPackage%>.Literals.SINGLE_REFERENCE_ATTRIBUTE_VALUE_CONSTRAINT__SOURCE_ELEMENTS }));&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
        <eParameters name="context">
          <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
            <eTypeArguments/>
            <eTypeArguments/>
          </eGenericType>
        </eParameters>
      </eOperations>
      <eOperations name="validateOnlyFixedValuesOrGlobalAttributesInConditionModel"
          eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="if(this.getSourceElements().isEmpty() || &#xD;&#xA;&#x9;&#x9;!&lt;%de.tud.et.ifa.agtele.emf.AgteleEcoreUtil%>.hasAncestorOfKind(this, &lt;%pamtram.condition.ConditionPackage%>.eINSTANCE.getComplexCondition())) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&lt;%pamtram.condition.ComplexCondition%> condition = (ComplexCondition) AgteleEcoreUtil.getAncestorOfKind(this, &lt;%pamtram.condition.ConditionPackage%>.eINSTANCE.getComplexCondition());&#xD;&#xA;&#xD;&#xA;if(!condition.isConditionModelCondition()) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;boolean result = this.getSourceElements().parallelStream().allMatch(s -> s instanceof &lt;%pamtram.mapping.FixedValue%> || s instanceof &lt;%pamtram.mapping.GlobalAttributeImporter%>);&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;String errorMessage = &quot;This AttributeValueConstraint must only&quot;&#xD;&#xA;&#x9;&#x9;&#x9;+ &quot; contain FixedValues or GlobalAttributeImporters as source elements as it is modeled as part of a condition inside a ConditionModel!'&quot;;&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;diagnostics.add&#xD;&#xA;&#x9;&#x9;(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9; &lt;%pamtram.metamodel.util.MetamodelValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9; MetamodelValidator.SINGLE_REFERENCE_ATTRIBUTE_VALUE_CONSTRAINT__VALIDATE_ONLY_FIXED_VALUES_OR_GLOBAL_ATTRIBUTES_IN_CONDITION_MODEL,&#xD;&#xA;&#x9;&#x9;&#x9; errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9; new Object [] { this,  &lt;%pamtram.metamodel.MetamodelPackage%>.Literals.SINGLE_REFERENCE_ATTRIBUTE_VALUE_CONSTRAINT__SOURCE_ELEMENTS }));&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
        <eParameters name="context">
          <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
            <eTypeArguments/>
            <eTypeArguments/>
          </eGenericType>
        </eParameters>
      </eOperations>
      <eOperations name="isLocalConstraint" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="if(this.eContainer() instanceof &lt;%pamtram.metamodel.SourceSectionAttribute%>) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;if(!(this.eContainer() instanceof &lt;%pamtram.condition.AttributeCondition%>)) {&#xD;&#xA;&#x9;throw new UnsupportedOperationException();&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&lt;%org.eclipse.emf.ecore.EObject%> container = this;&#xD;&#xA;&#xD;&#xA;while(!(container instanceof &lt;%pamtram.mapping.Mapping%>)) {&#xD;&#xA;&#x9;if(container == null) {&#xD;&#xA;&#x9;&#x9;return false;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;container = container.eContainer();&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// The SourceSection of the Mapping that contains the constraint&#xD;&#xA;//&#xD;&#xA;&lt;%pamtram.metamodel.SourceSection%> localSection = ((Mapping) container).getSourceMMSection();&#xD;&#xA;&#xD;&#xA;if(getSourceElements().parallelStream().allMatch(s -> s instanceof &lt;%pamtram.mapping.FixedValue%> || s instanceof &lt;%pamtram.mapping.GlobalAttributeImporter%> ||&#xD;&#xA;&#x9;&#x9;(s instanceof &lt;%pamtram.metamodel.AttributeValueConstraintSourceElement%> &amp;&amp;&#xD;&#xA;&#x9;&#x9;((AttributeValueConstraintSourceElement) s).getSource().getContainingSection().equals(localSection)) ||&#xD;&#xA;&#x9;&#x9;(s instanceof &lt;%pamtram.metamodel.AttributeValueConstraintExternalSourceElement%> &amp;&amp;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;((AttributeValueConstraintExternalSourceElement) s).getSource().getContainingSection().isContainerFor(localSection)))) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// A constraint is also 'local' if an InstancePointer with local or external SourceAttributes exist&#xD;&#xA;//&#xD;&#xA;return getConstraintReferenceValueAdditionalSpecification().parallelStream().flatMap(&#xD;&#xA;&#x9;&#x9;instancePointer -> instancePointer.getSourceAttributes().parallelStream().filter(&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;s -> s instanceof &lt;%pamtram.metamodel.InstancePointerSourceElement%> || &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;s instanceof &lt;%pamtram.metamodel.InstancePointerExternalSourceElement%>)&#xD;&#xA;&#x9;&#x9;).findAny().isPresent();"/>
        </eAnnotations>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="constraintReferenceValueAdditionalSpecification"
          upperBound="-1" eType="#//metamodel/InstancePointer" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="sourceElements" upperBound="-1"
          eType="#//metamodel/AttributeValueConstraintSourceInterface" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="AttributeValueConstraintSourceInterface"
        abstract="true" interface="true" eSuperTypes="#//mapping/MappingHintSourceInterface"/>
    <eClassifiers xsi:type="ecore:EClass" name="AttributeValueConstraintSourceElement">
      <eGenericSuperTypes eClassifier="#//mapping/LocalModifiedAttributeElementType">
        <eTypeArguments eClassifier="#//metamodel/SourceSection"/>
        <eTypeArguments eClassifier="#//metamodel/SourceSectionClass"/>
        <eTypeArguments eClassifier="#//metamodel/SourceSectionReference"/>
        <eTypeArguments eClassifier="#//metamodel/SourceSectionAttribute"/>
      </eGenericSuperTypes>
      <eGenericSuperTypes eClassifier="#//metamodel/AttributeValueConstraintSourceInterface"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="AttributeValueConstraintExternalSourceElement">
      <eGenericSuperTypes eClassifier="#//mapping/ExternalModifiedAttributeElementType">
        <eTypeArguments eClassifier="#//metamodel/SourceSection"/>
        <eTypeArguments eClassifier="#//metamodel/SourceSectionClass"/>
        <eTypeArguments eClassifier="#//metamodel/SourceSectionReference"/>
        <eTypeArguments eClassifier="#//metamodel/SourceSectionAttribute"/>
      </eGenericSuperTypes>
      <eGenericSuperTypes eClassifier="#//metamodel/AttributeValueConstraintSourceInterface"/>
    </eClassifiers>
  </eSubpackages>
  <eSubpackages name="condition" nsURI="http://mfreund.de/pamtram/condition" nsPrefix="condition">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="invocationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
      <details key="settingDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
      <details key="validationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/OCL/Import">
      <details key="ecore" value="http://www.eclipse.org/emf/2002/Ecore"/>
      <details key="genlib" value="http://www.et.tu-dresden.de/ifa/agtele/genlib"/>
    </eAnnotations>
    <eClassifiers xsi:type="ecore:EClass" name="ComplexCondition" abstract="true"
        eSuperTypes="#//NamedElement">
      <eOperations name="isLocalCondition" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eOperations name="isMappingCondition" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="return getRootCondition().eContainer() instanceof Mapping;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="isConditionModelCondition" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="return getRootCondition().eContainer() instanceof ConditionModel;"/>
        </eAnnotations>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Condition" abstract="true" eSuperTypes="#//condition/ComplexCondition">
      <eOperations name="checkCondition" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eParameters name="condition" eType="#//condition/ComplexCondition"/>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="additionalConditionSpecification"
          upperBound="-1" eType="#//metamodel/InstancePointer" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"
          defaultValueLiteral="1"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="comparator" eType="#//condition/ComparatorEnum"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="defaultSetting" eType="#//condition/CondSettingEnum"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EEnum" name="ComparatorEnum">
      <eLiterals name="EQ" literal="EQ"/>
      <eLiterals name="GT" value="1" literal="GT"/>
      <eLiterals name="LT" value="2" literal="LT"/>
      <eLiterals name="GE" value="3" literal="GE"/>
      <eLiterals name="LE" value="4" literal="LE"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EEnum" name="CondSettingEnum">
      <eLiterals name="MatchingRequired" literal="MatchingRequired"/>
      <eLiterals name="NoMatchingAccepted" value="1" literal="NoMatchingAccepted"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="MultipleConditionOperator" abstract="true"
        eSuperTypes="#//condition/ComplexCondition">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="constraints" value="minimalNumberOfArgs"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="minimalNumberOfArgs" value="Tuple {&#xD;&#xA;&#x9;message : String = &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;'The required subparts of this condition are not modeled or not referenced !',&#xD;&#xA;&#x9;severity : Integer = 4,&#xD;&#xA;&#x9;status : Boolean = &#xD;&#xA;&#x9;&#x9;(self.condParts->size()+self.condPartsRef->size()) > 1&#xD;&#xA;}.status"/>
      </eAnnotations>
      <eOperations name="referencesOnlyValidConditions" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="if(this.condPartsRef == null || this.condPartsRef.size() == 0) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;EList&lt;ComplexCondition> conditionRefs = new BasicEList&lt;ComplexCondition>();&#xD;&#xA;conditionRefs.add((ComplexCondition) this.condPartsRef);&#xD;&#xA;for(ComplexCondition condition : conditionRefs){&#xD;&#xA;&#x9;if(!(condition instanceof ConditionModel)){&#xD;&#xA;&#x9;&#x9;return false;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return true;"/>
        </eAnnotations>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="condParts" upperBound="-1"
          eType="#//condition/ComplexCondition" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="condPartsRef" upperBound="-1"
          eType="#//condition/ComplexCondition"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="And" eSuperTypes="#//condition/MultipleConditionOperator"/>
    <eClassifiers xsi:type="ecore:EClass" name="Or" eSuperTypes="#//condition/MultipleConditionOperator"/>
    <eClassifiers xsi:type="ecore:EClass" name="SingleConditionOperator" abstract="true"
        eSuperTypes="#//condition/ComplexCondition">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="constraints" value="exactlyOneArg"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="exactlyOneArg" value="Tuple {&#xD;&#xA;&#x9;message : String = &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;'The required subparts of this Not-Condition are not modeled or not referenced or both done but not allowed!',&#xD;&#xA;&#x9;severity : Integer = 4,&#xD;&#xA;&#x9;status : Boolean = &#xD;&#xA;&#x9;&#x9;(self.condPart->size()+self.condPartRef->size()) = 1&#xD;&#xA;}.status"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="condPart" eType="#//condition/ComplexCondition"
          containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="condPartRef" eType="#//condition/ComplexCondition"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Not" eSuperTypes="#//condition/SingleConditionOperator">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="constraints" value="referenceOnlyConditionsFromConditionModelOrFromConditionalElements"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="referenceOnlyConditionsFromConditionModelOrFromConditionalElements"
            value="Tuple {&#xD;&#xA;&#x9;message : String = 'Reference only Conditions that placed inside ConditionModel or where the Container is Kind of ConditionalElement!',&#xD;&#xA;&#x9;severity : Integer = 4,&#xD;&#xA;&#x9;status : Boolean = self.referencesOnlyValidConditions()&#xD;&#xA;}.status"/>
      </eAnnotations>
      <eOperations name="referencesOnlyValidConditions" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="if(this.condPartRef == null) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;EObject condPartRefContainer = this.condPartRef.eContainer();&#xD;&#xA;return condPartRefContainer instanceof ConditionModel || condPartRefContainer instanceof ConditionalElement;"/>
        </eAnnotations>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="AttributeCondition" eSuperTypes="#//condition/Condition">
      <eStructuralFeatures xsi:type="ecore:EReference" name="valueConstraint" lowerBound="1"
          upperBound="-1" eType="#//metamodel/AttributeValueConstraint" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="conditionAttributeRef"
          lowerBound="1" eType="#//metamodel/SourceSectionAttribute"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="SectionCondition" eSuperTypes="#//condition/Condition">
      <eStructuralFeatures xsi:type="ecore:EReference" name="conditionSectionRef"
          lowerBound="1" eType="#//metamodel/SourceSectionClass"/>
    </eClassifiers>
  </eSubpackages>
  <eSubpackages name="mapping" nsURI="http://mfreund.de/pamtram/mapping" nsPrefix="mapping">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="invocationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
      <details key="settingDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
      <details key="validationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/OCL/Import">
      <details key="ecore" value="http://www.eclipse.org/emf/2002/Ecore"/>
      <details key="genlib" value="http://www.et.tu-dresden.de/ifa/agtele/genlib"/>
    </eAnnotations>
    <eClassifiers xsi:type="ecore:EClass" name="MappingType" abstract="true" eSuperTypes="#//NamedElement #//DeactivatableElement">
      <eStructuralFeatures xsi:type="ecore:EReference" name="sourceMMSection" lowerBound="1"
          eType="#//metamodel/SourceSection"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Mapping" eSuperTypes="#//mapping/MappingType #//ConditionalElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="constraints" value="containsHintGroups containsDeactivatedHintGroups"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="containsDeactivatedHintGroups" value="Tuple {&#xD;&#xA;&#x9;message : String = &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;'The mapping contains deactivated hint groups that will not be used in a transformation!',&#xD;&#xA;&#x9;severity : Integer = 2,&#xD;&#xA;&#x9;status : Boolean = &#xD;&#xA;&#x9;&#x9;if self.deactivated = false then&#xD;&#xA;&#x9;&#x9;&#x9;self.mappingHintGroups->size() = self.getActiveMappingHintGroups()->size() and&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;self.importedMappingHintGroups->size() = self.getActiveImportedMappingHintGroups()->size() else&#xD;&#xA;&#x9;&#x9;&#x9;true&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;}.status"/>
        <details key="containsHintGroups" value="Tuple {&#xD;&#xA;&#x9;message : String = &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;'The mapping does not contain any hint groups!',&#xD;&#xA;&#x9;severity : Integer = 2,&#xD;&#xA;&#x9;status : Boolean = &#xD;&#xA;&#x9;&#x9;not self.mappingHintGroups->isEmpty()&#xD;&#xA;}.status"/>
      </eAnnotations>
      <eOperations name="getActiveMappingHintGroups" upperBound="-1" eType="#//mapping/MappingHintGroupType">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="EList&lt;MappingHintGroupType> hintGroups = getMappingHintGroups();&#xD;&#xA;EList&lt;MappingHintGroupType> activeHintGroups = new BasicEList&lt;>();&#xD;&#xA;for (MappingHintGroupType hintGroup : hintGroups) {&#xD;&#xA;&#x9;if(hintGroup instanceof InstantiableMappingHintGroup &amp;&amp; &#xD;&#xA;&#x9;&#x9;&#x9;((InstantiableMappingHintGroup) hintGroup).isDeactivated()) {&#xD;&#xA;&#x9;&#x9;// skip this one&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;activeHintGroups.add(hintGroup);&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return activeHintGroups;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="getActiveImportedMappingHintGroups" upperBound="-1" eType="#//mapping/MappingHintGroupImporter">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="EList&lt;MappingHintGroupImporter> hintGroups = getImportedMappingHintGroups();&#xD;&#xA;EList&lt;MappingHintGroupImporter> activeHintGroups = new BasicEList&lt;>();&#xD;&#xA;for (MappingHintGroupImporter hintGroup : hintGroups) {&#xD;&#xA;&#x9;if(hintGroup.isDeactivated()) {&#xD;&#xA;&#x9;&#x9;// skip this one&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;activeHintGroups.add(hintGroup);&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return activeHintGroups;"/>
        </eAnnotations>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="mappingHintGroups" upperBound="-1"
          eType="#//mapping/MappingHintGroupType" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="importedMappingHintGroups"
          upperBound="-1" eType="#//mapping/MappingHintGroupImporter" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="globalVariables" upperBound="-1"
          eType="#//mapping/GlobalAttribute" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="abstract" lowerBound="1"
          eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
          defaultValueLiteral="false"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="MappingHintGroupType" abstract="true"
        eSuperTypes="#//NamedElement">
      <eStructuralFeatures xsi:type="ecore:EReference" name="targetMMSection" lowerBound="1"
          eType="#//metamodel/TargetSection"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="mappingHints" upperBound="-1"
          eType="#//mapping/MappingHint" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="extend" upperBound="-1"
          eType="#//mapping/MappingHintGroupType"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="InstantiableMappingHintGroup" abstract="true"
        eSuperTypes="#//NamedElement #//DeactivatableElement #//ConditionalElement"/>
    <eClassifiers xsi:type="ecore:EClass" name="MappingHintGroup" eSuperTypes="#//mapping/MappingHintGroupType #//mapping/InstantiableMappingHintGroup">
      <eStructuralFeatures xsi:type="ecore:EReference" name="modelConnectionMatcher"
          eType="#//mapping/ModelConnectionHint" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="MappingHintBaseType" abstract="true"
        eSuperTypes="#//NamedElement"/>
    <eClassifiers xsi:type="ecore:EClass" name="MappingHint" abstract="true" eSuperTypes="#//mapping/MappingHintType #//ConditionalElement"/>
    <eClassifiers xsi:type="ecore:EClass" name="ExpressionHint" abstract="true">
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="expression" lowerBound="1"
          eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"
          defaultValueLiteral=""/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ModifiableHint" abstract="true">
      <eStructuralFeatures xsi:type="ecore:EReference" name="resultModifier" upperBound="-1"
          eType="#//mapping/AttributeValueModifierSet"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="AttributeMapping" eSuperTypes="#//mapping/MappingHint #//mapping/ExpressionHint #//mapping/ModifiableHint #//mapping/ExpandableHint">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="constraints" value="targetAttributeMatchesSection"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="targetAttributeMatchesSection" value="Tuple {&#xD;&#xA;&#x9;message : String = &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;'The target attribute \'' + self.target.name + '\' is not part of the target section referenced by parent hint group ' + self.oclContainer().oclAsType(pamtram::mapping::MappingHintGroupType).name + '!',&#xD;&#xA;&#x9;severity : Integer = 4,&#xD;&#xA;&#x9;status : Boolean = &#xD;&#xA;&#x9;&#x9;if self.target.oclType() = OclVoid or self.oclContainer().oclAsType(pamtram::mapping::MappingHintGroupType).targetMMSection.oclType() = OclVoid then&#xD;&#xA;&#x9;&#x9;&#x9;true else&#xD;&#xA;&#x9;&#x9;&#x9;self.target.getContainingSection() = self.oclContainer().oclAsType(pamtram::mapping::MappingHintGroupType).targetMMSection or&#xD;&#xA;&#x9;&#x9;&#x9;self.oclContainer().oclAsType(pamtram::mapping::MappingHintGroupType).targetMMSection.oclAsType(pamtram::metamodel::Section).extend->includes(self.target.getContainingSection())&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;}.status"/>
      </eAnnotations>
      <eOperations name="getLocalSourceElements" unique="false" upperBound="-1" eType="#//mapping/AttributeMappingSourceElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#x9;&#x9;EList&lt;AttributeMappingSourceElement> elements= new org.eclipse.emf.common.util.BasicEList&lt;AttributeMappingSourceElement>();&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;for(AttributeMappingSourceInterface i : this.getSourceAttributeMappings()){&#xD;&#xA;&#x9;&#x9;&#x9;if(i instanceof AttributeMappingSourceElement){&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;elements.add((AttributeMappingSourceElement) i);&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;return elements;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="getExternalSourceElements" unique="false" upperBound="-1"
          eType="#//mapping/AttributeMappingExternalSourceElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="EList&lt;AttributeMappingExternalSourceElement> elements= new org.eclipse.emf.common.util.BasicEList&lt;AttributeMappingExternalSourceElement>();&#xD;&#xA;&#xD;&#xA;for(AttributeMappingSourceInterface i : this.getSourceAttributeMappings()){&#xD;&#xA;&#x9;if(i instanceof AttributeMappingExternalSourceElement){&#xD;&#xA;&#x9;&#x9;elements.add((AttributeMappingExternalSourceElement) i);&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return elements;"/>
        </eAnnotations>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="target" lowerBound="1"
          eType="#//metamodel/TargetSectionAttribute"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="sourceAttributeMappings"
          lowerBound="1" upperBound="-1" eType="#//mapping/AttributeMappingSourceInterface"
          containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="CardinalityMapping" eSuperTypes="#//mapping/MappingHint">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="constraints" value="sourceClassMatchesSection sourceClassIsVariableCardinality targetClassMatchesSection targetClassIsVariableCardinality noCardinalityMappingForSourceSectionRoot"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="sourceClassMatchesSection" value="Tuple {&#xD;&#xA;&#x9;message : String = &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;'The source class \'' + self.source.name + '\' is not part of the source section referenced by parent mapping \'' + self.oclContainer().oclContainer().oclAsType(pamtram::mapping::Mapping).name + '\'!',&#xD;&#xA;&#x9;severity : Integer = 4,&#xD;&#xA;&#x9;status : Boolean = &#xD;&#xA;&#x9;&#x9;if self.source.oclType() = OclVoid or self.oclContainer().oclContainer().oclAsType(pamtram::mapping::Mapping).sourceMMSection.oclType() = OclVoid then&#xD;&#xA;&#x9;&#x9;&#x9;true else&#xD;&#xA;&#x9;&#x9;&#x9;self.source.getContainingSection() = self.oclContainer().oclContainer().oclAsType(pamtram::mapping::Mapping).sourceMMSection&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;}.status"/>
        <details key="sourceClassIsVariableCardinality" value="Tuple {&#xD;&#xA;&#x9;message : String = &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;'Cardinality mappings may only be defined for source classes with a specified cardinality distinct from \'CardinalityType::ONE\'!',&#xD;&#xA;&#x9;severity : Integer = 4,&#xD;&#xA;&#x9;status : Boolean = &#xD;&#xA;&#x9;&#x9;if self.source.oclType() = OclVoid then&#xD;&#xA;&#x9;&#x9;&#x9;true else&#xD;&#xA;&#x9;&#x9;&#x9;self.source.cardinality &lt;> pamtram::metamodel::CardinalityType::ONE&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;}.status"/>
        <details key="targetClassMatchesSection" value="Tuple {&#xD;&#xA;&#x9;message : String = &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;'The target class \'' + self.target.name + '\' is not part of the target section referenced by parent hint group \'' + self.oclContainer().oclAsType(pamtram::mapping::MappingHintGroupType).name + '\'!',&#xD;&#xA;&#x9;severity : Integer = 4,&#xD;&#xA;&#x9;status : Boolean = &#xD;&#xA;&#x9;&#x9;if self.target.oclType() = OclVoid or self.oclContainer().oclAsType(pamtram::mapping::MappingHintGroupType).targetMMSection.oclType() = OclVoid then&#xD;&#xA;&#x9;&#x9;&#x9;true else&#xD;&#xA;&#x9;&#x9;&#x9;self.target.getContainingSection() = self.oclContainer().oclAsType(pamtram::mapping::MappingHintGroupType).targetMMSection&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;}.status"/>
        <details key="targetClassIsVariableCardinality" value="Tuple {&#xD;&#xA;&#x9;message : String = &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;'Cardinality mappings may only be defined for target classes with a specified cardinality distinct from \'CardinalityType::ONE\'!',&#xD;&#xA;&#x9;severity : Integer = 4,&#xD;&#xA;&#x9;status : Boolean = &#xD;&#xA;&#x9;&#x9;if self.target.oclType() = OclVoid then&#xD;&#xA;&#x9;&#x9;&#x9;true else&#xD;&#xA;&#x9;&#x9;&#x9;self.target.cardinality &lt;> pamtram::metamodel::CardinalityType::ONE&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;}.status"/>
        <details key="noCardinalityMappingForSourceSectionRoot" value="Tuple {&#xD;&#xA;&#x9;message : String = &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;'Cardinality mappings must not be defined for SourceSection root classes!',&#xD;&#xA;&#x9;severity : Integer = 4,&#xD;&#xA;&#x9;status : Boolean = &#xD;&#xA;&#x9;&#x9;if self.source.oclType() = OclVoid then&#xD;&#xA;&#x9;&#x9;&#x9;true else&#xD;&#xA;&#x9;&#x9;&#x9;self.source &lt;> self.source.getContainingSection()&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;}.status"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="source" lowerBound="1"
          eType="#//metamodel/SourceSectionClass"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="target" lowerBound="1"
          eType="#//metamodel/TargetSectionClass"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="MappingInstanceSelector" eSuperTypes="#//mapping/MappingHint">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="constraints" value="affectedReferenceIsNonContainment affectedReferenceMatchesSection"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="affectedReferenceIsNonContainment" value="Tuple {&#xD;&#xA;&#x9;message : String = &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;'The affected reference \' + self.affectedReference.name + \' is no non-containment reference!',&#xD;&#xA;&#x9;severity : Integer = 4,&#xD;&#xA;&#x9;status : Boolean = &#xD;&#xA;&#x9;&#x9;if self.affectedReference.oclType() = OclVoid then&#xD;&#xA;&#x9;&#x9;&#x9;true else&#xD;&#xA;&#x9;&#x9;&#x9;not self.affectedReference.eReference.oclAsType(ecore::EReference).containment&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;}.status"/>
        <details key="affectedReferenceMatchesSection" value="Tuple {&#xD;&#xA;&#x9;message : String = &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;let hintGroupName = if self.oclContainer().oclIsKindOf(pamtram::mapping::MappingHintGroupType) then &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;self.oclContainer().oclAsType(pamtram::mapping::MappingHintGroupType).name else &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;self.oclContainer().oclAsType(pamtram::mapping::MappingHintGroupImporter).hintGroup.name&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;endif in&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;'The affected reference \'' + self.affectedReference.name + '\' is not part of the target section referenced by parent hint group \'' + hintGroupName + '\'!',&#xD;&#xA;&#x9;severity : Integer = 4,&#xD;&#xA;&#x9;status : Boolean = &#xD;&#xA;&#x9;&#x9;if self.affectedReference.oclType() = OclVoid then&#xD;&#xA;&#x9;&#x9;&#x9;true else&#xD;&#xA;&#x9;&#x9;&#x9;let targetMMSection = if self.oclContainer().oclIsKindOf(pamtram::mapping::MappingHintGroupType) then &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;self.oclContainer().oclAsType(pamtram::mapping::MappingHintGroupType).targetMMSection else &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;self.oclContainer().oclAsType(pamtram::mapping::MappingHintGroupImporter).hintGroup.targetMMSection&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;endif in&#xD;&#xA;&#x9;&#x9;&#x9;if targetMMSection.oclType() = OclVoid then &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;true else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;self.affectedReference.getContainingSection() = targetMMSection or&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;targetMMSection.oclAsType(pamtram::metamodel::Section).extend->includes(self.affectedReference.getContainingSection())&#xD;&#xA;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;}.status"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="affectedReference" lowerBound="1"
          eType="#//metamodel/TargetSectionNonContainmentReference"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="matcher" lowerBound="1"
          eType="#//mapping/Matcher" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Matcher" abstract="true"/>
    <eClassifiers xsi:type="ecore:EClass" name="AttributeMatcher" eSuperTypes="#//mapping/Matcher #//mapping/ExpressionHint #//mapping/ModifiableHint #//mapping/ExpandableHint">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="constraints" value="targetMatchesAffectedReferenceType"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="targetMatchesAffectedReferenceType" value="Tuple {&#xD;&#xA;&#x9;message : String = &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;'The type of the class containing the target attribute (\'' + self.targetAttribute.oclContainer().oclAsType(pamtram::metamodel::Class).eClass.name + '\') is not allowed by the affected reference of the parent mapping instance selector that ' +&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;'requires a (sub-)type of \'' + self.oclContainer().oclAsType(pamtram::mapping::MappingInstanceSelector).affectedReference.eReference.oclAsType(ecore::EReference).eReferenceType.oclAsType(ecore::EClass).name + '\'!',&#xD;&#xA;&#x9;severity : Integer = 4,&#xD;&#xA;&#x9;status : Boolean = &#xD;&#xA;&#x9;&#x9;if self.oclContainer().oclAsType(pamtram::mapping::MappingInstanceSelector).affectedReference.oclType() = OclVoid or self.targetAttribute.oclType() = OclVoid then&#xD;&#xA;&#x9;&#x9;&#x9;true else&#xD;&#xA;&#x9;&#x9;&#x9;self.oclContainer().oclAsType(pamtram::mapping::MappingInstanceSelector).affectedReference.eReference.oclAsType(ecore::EReference).eReferenceType.oclAsType(ecore::EClass).isSuperTypeOf(self.targetAttribute.oclContainer().oclAsType(pamtram::metamodel::Class).eClass)&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;}.status"/>
      </eAnnotations>
      <eOperations name="getLocalSourceElements" unique="false" upperBound="-1" eType="#//mapping/AttributeMatcherSourceElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="EList&lt;AttributeMatcherSourceElement> elements= new org.eclipse.emf.common.util.BasicEList&lt;AttributeMatcherSourceElement>();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;for(AttributeMatcherSourceInterface i : this.getSourceAttributes()){&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(i instanceof AttributeMatcherSourceElement){&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;elements.add((AttributeMatcherSourceElement) i);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;return elements;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="getExternalSourceElements" unique="false" upperBound="-1"
          eType="#//mapping/AttributeMatcherExternalSourceElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="EList&lt;AttributeMatcherExternalSourceElement> elements= new org.eclipse.emf.common.util.BasicEList&lt;>();&#xD;&#xA;&#xD;&#xA;for(AttributeMatcherSourceInterface i : this.getSourceAttributes()){&#xD;&#xA;&#x9;if(i instanceof AttributeMatcherExternalSourceElement){&#xD;&#xA;&#x9;&#x9;elements.add((AttributeMatcherExternalSourceElement) i);&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return elements;"/>
        </eAnnotations>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="targetAttribute" lowerBound="1"
          eType="#//metamodel/TargetSectionAttribute"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="sourceAttributes" lowerBound="1"
          upperBound="-1" eType="#//mapping/AttributeMatcherSourceInterface" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="AttributeMatcherSourceElement">
      <eGenericSuperTypes eClassifier="#//mapping/LocalModifiedAttributeElementType">
        <eTypeArguments eClassifier="#//metamodel/SourceSection"/>
        <eTypeArguments eClassifier="#//metamodel/SourceSectionClass"/>
        <eTypeArguments eClassifier="#//metamodel/SourceSectionReference"/>
        <eTypeArguments eClassifier="#//metamodel/SourceSectionAttribute"/>
      </eGenericSuperTypes>
      <eGenericSuperTypes eClassifier="#//mapping/AttributeMatcherSourceInterface"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="AttributeMatcherSourceInterface" abstract="true"
        interface="true" eSuperTypes="#//mapping/MappingHintSourceInterface"/>
    <eClassifiers xsi:type="ecore:EClass" name="ClassMatcher" eSuperTypes="#//mapping/Matcher">
      <eStructuralFeatures xsi:type="ecore:EReference" name="targetClass" lowerBound="1"
          eType="#//metamodel/TargetSectionClass"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="AttributeValueModifierSet" eSuperTypes="#//NamedElement">
      <eStructuralFeatures xsi:type="ecore:EReference" name="modifier" upperBound="-1"
          eType="#//mapping/AttributeValueModifier" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="AttributeValueModifier" abstract="true"
        interface="true" eSuperTypes="#//NamedElement">
      <eOperations name="modifyValue" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
        <eParameters name="value" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="SubstringReplacer" eSuperTypes="#//mapping/AttributeValueModifier">
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="regex" lowerBound="1"
          eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="replacement" lowerBound="1"
          eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="StringAppender" eSuperTypes="#//mapping/AttributeValueModifier">
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="string" lowerBound="1"
          eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"
          defaultValueLiteral=""/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UniqueNumberAppender" eSuperTypes="#//mapping/AttributeValueModifier"/>
    <eClassifiers xsi:type="ecore:EClass" name="StringPrepender" eSuperTypes="#//mapping/AttributeValueModifier">
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="string" lowerBound="1"
          eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"
          defaultValueLiteral=""/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ModifiedAttributeElementType" abstract="true"
        eSuperTypes="#//NamedElement">
      <eTypeParameters name="S">
        <eBounds eClassifier="#//metamodel/Section">
          <eTypeArguments eTypeParameter="#//mapping/ModifiedAttributeElementType/S"/>
          <eTypeArguments eTypeParameter="#//mapping/ModifiedAttributeElementType/C"/>
          <eTypeArguments eTypeParameter="#//mapping/ModifiedAttributeElementType/R"/>
          <eTypeArguments eTypeParameter="#//mapping/ModifiedAttributeElementType/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="C">
        <eBounds eClassifier="#//metamodel/Class">
          <eTypeArguments eTypeParameter="#//mapping/ModifiedAttributeElementType/S"/>
          <eTypeArguments eTypeParameter="#//mapping/ModifiedAttributeElementType/C"/>
          <eTypeArguments eTypeParameter="#//mapping/ModifiedAttributeElementType/R"/>
          <eTypeArguments eTypeParameter="#//mapping/ModifiedAttributeElementType/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="R">
        <eBounds eClassifier="#//metamodel/Reference">
          <eTypeArguments eTypeParameter="#//mapping/ModifiedAttributeElementType/S"/>
          <eTypeArguments eTypeParameter="#//mapping/ModifiedAttributeElementType/C"/>
          <eTypeArguments eTypeParameter="#//mapping/ModifiedAttributeElementType/R"/>
          <eTypeArguments eTypeParameter="#//mapping/ModifiedAttributeElementType/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="A">
        <eBounds eClassifier="#//metamodel/Attribute">
          <eTypeArguments eTypeParameter="#//mapping/ModifiedAttributeElementType/S"/>
          <eTypeArguments eTypeParameter="#//mapping/ModifiedAttributeElementType/C"/>
          <eTypeArguments eTypeParameter="#//mapping/ModifiedAttributeElementType/R"/>
          <eTypeArguments eTypeParameter="#//mapping/ModifiedAttributeElementType/A"/>
        </eBounds>
      </eTypeParameters>
      <eOperations name="getMappingHintGroup" unique="false" lowerBound="1" eType="#//NamedElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="EObject ret = this.eContainer;&#xD;&#xA;while(!(ret instanceof MappingHintGroupType || ret instanceof InstantiableMappingHintGroup)) {&#xD;&#xA;&#x9;ret = ret.eContainer();&#xD;&#xA;&#x9;if(ret instanceof PAMTraM) {&#xD;&#xA;&#x9;&#x9;// something went wrong&#xD;&#xA;&#x9;&#x9;return null;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return (NamedElement) ret;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="getMapping" unique="false" lowerBound="1" eType="#//mapping/Mapping">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="EObject ret = this.eContainer;&#xD;&#xA;while(!(ret instanceof Mapping)) {&#xD;&#xA;&#x9;ret = ret.eContainer();&#xD;&#xA;&#x9;if(ret instanceof PAMTraM) {&#xD;&#xA;&#x9;&#x9;// something went wrong&#xD;&#xA;&#x9;&#x9;return null;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return (Mapping) ret;"/>
        </eAnnotations>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="source" lowerBound="1">
        <eGenericType eTypeParameter="#//mapping/ModifiedAttributeElementType/A"/>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="modifier" upperBound="-1"
          eType="#//mapping/AttributeValueModifierSet"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="LocalModifiedAttributeElementType"
        abstract="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="constraints" value="sourceAttributeMatchesSectionOrContainedSection"/>
      </eAnnotations>
      <eTypeParameters name="S">
        <eBounds eClassifier="#//metamodel/Section">
          <eTypeArguments eTypeParameter="#//mapping/LocalModifiedAttributeElementType/S"/>
          <eTypeArguments eTypeParameter="#//mapping/LocalModifiedAttributeElementType/C"/>
          <eTypeArguments eTypeParameter="#//mapping/LocalModifiedAttributeElementType/R"/>
          <eTypeArguments eTypeParameter="#//mapping/LocalModifiedAttributeElementType/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="C">
        <eBounds eClassifier="#//metamodel/Class">
          <eTypeArguments eTypeParameter="#//mapping/LocalModifiedAttributeElementType/S"/>
          <eTypeArguments eTypeParameter="#//mapping/LocalModifiedAttributeElementType/C"/>
          <eTypeArguments eTypeParameter="#//mapping/LocalModifiedAttributeElementType/R"/>
          <eTypeArguments eTypeParameter="#//mapping/LocalModifiedAttributeElementType/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="R">
        <eBounds eClassifier="#//metamodel/Reference">
          <eTypeArguments eTypeParameter="#//mapping/LocalModifiedAttributeElementType/S"/>
          <eTypeArguments eTypeParameter="#//mapping/LocalModifiedAttributeElementType/C"/>
          <eTypeArguments eTypeParameter="#//mapping/LocalModifiedAttributeElementType/R"/>
          <eTypeArguments eTypeParameter="#//mapping/LocalModifiedAttributeElementType/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="A">
        <eBounds eClassifier="#//metamodel/Attribute">
          <eTypeArguments eTypeParameter="#//mapping/LocalModifiedAttributeElementType/S"/>
          <eTypeArguments eTypeParameter="#//mapping/LocalModifiedAttributeElementType/C"/>
          <eTypeArguments eTypeParameter="#//mapping/LocalModifiedAttributeElementType/R"/>
          <eTypeArguments eTypeParameter="#//mapping/LocalModifiedAttributeElementType/A"/>
        </eBounds>
      </eTypeParameters>
      <eOperations name="validateSourceAttributeMatchesSectionOrContainedSection"
          eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="if(this.getMapping() == null || this.source == null || this.getMapping().getSourceMMSection() == null&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;|| !(this.source.getContainingSection() instanceof &lt;%pamtram.metamodel.SourceSection%>)) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;SourceSection sourceSection = this.getMapping().getSourceMMSection();&#xD;&#xA;SourceSection containingSourceSection = (SourceSection) this.source.getContainingSection();&#xD;&#xA;&#xD;&#xA;boolean result = sourceSection == containingSourceSection &#xD;&#xA;&#x9;&#x9;|| containingSourceSection.isReferencedBy(sourceSection, null)&#xD;&#xA;&#x9;&#x9;|| sourceSection.getExtend().parallelStream().filter(e -> e.equals(containingSourceSection)).findAny().isPresent()&#xD;&#xA;&#x9;&#x9;|| sourceSection.getExtend().parallelStream().filter(e -> containingSourceSection.isReferencedBy(e, null)).findAny().isPresent();&#xD;&#xA;&#xD;&#xA;if (!result &amp;&amp; diagnostics != null) {&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;String errorMessage = &quot;The source attribute '&quot; +&#xD;&#xA;&#x9;&#x9;&#x9; this.source.getName() + &quot;' is not referenced by the source section of the parent mapping '&quot; +&#xD;&#xA;&#x9;&#x9;&#x9; sourceSection.getName() + &quot;' or in one of its extended sections/sub-sections!'&quot;;&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;diagnostics.add&#xD;&#xA;&#x9;&#x9;(new &lt;%org.eclipse.emf.common.util.BasicDiagnostic%>&#xD;&#xA;&#x9;&#x9;&#x9;(&lt;%org.eclipse.emf.common.util.Diagnostic%>.ERROR,&#xD;&#xA;&#x9;&#x9;&#x9; &lt;%pamtram.mapping.util.MappingValidator%>.DIAGNOSTIC_SOURCE,&#xD;&#xA;&#x9;&#x9;&#x9; MappingValidator.LOCAL_MODIFIED_ATTRIBUTE_ELEMENT_TYPE__VALIDATE_SOURCE_ATTRIBUTE_MATCHES_SECTION_OR_CONTAINED_SECTION,&#xD;&#xA;&#x9;&#x9;&#x9; errorMessage,&#xD;&#xA;&#x9;&#x9;&#x9; new Object [] { this, &lt;%pamtram.mapping.MappingPackage%>.Literals.MODIFIED_ATTRIBUTE_ELEMENT_TYPE__SOURCE }));&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;return result;"/>
        </eAnnotations>
        <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
        <eParameters name="context">
          <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
            <eTypeArguments/>
            <eTypeArguments/>
          </eGenericType>
        </eParameters>
      </eOperations>
      <eGenericSuperTypes eClassifier="#//mapping/ModifiedAttributeElementType">
        <eTypeArguments eTypeParameter="#//mapping/LocalModifiedAttributeElementType/S"/>
        <eTypeArguments eTypeParameter="#//mapping/LocalModifiedAttributeElementType/C"/>
        <eTypeArguments eTypeParameter="#//mapping/LocalModifiedAttributeElementType/R"/>
        <eTypeArguments eTypeParameter="#//mapping/LocalModifiedAttributeElementType/A"/>
      </eGenericSuperTypes>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="MappingHintGroupImporter" eSuperTypes="#//NamedElement #//mapping/InstantiableMappingHintGroup">
      <eStructuralFeatures xsi:type="ecore:EReference" name="hintGroup" lowerBound="1"
          eType="#//mapping/ExportedMappingHintGroup"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="container" eType="#//metamodel/TargetSectionClass"
          unsettable="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="mappingHints" upperBound="-1"
          eType="#//mapping/MappingHintType" unsettable="true" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ExportedMappingHintGroup" eSuperTypes="#//mapping/MappingHintGroupType"/>
    <eClassifiers xsi:type="ecore:EClass" name="ModelConnectionHint" eSuperTypes="#//mapping/MappingHintBaseType">
      <eOperations name="getSourceAttributes" unique="false" upperBound="-1" eType="#//metamodel/SourceSectionAttribute"/>
      <eOperations name="getLocalSourceElements" unique="false" upperBound="-1" eType="#//mapping/ModelConnectionHintSourceElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="&#x9;&#x9;EList&lt;ModelConnectionHintSourceElement> elements= new org.eclipse.emf.common.util.BasicEList&lt;ModelConnectionHintSourceElement>();&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;for(ModelConnectionHintSourceInterface i : this.getSourceElements()){&#xD;&#xA;&#x9;&#x9;&#x9;if(i instanceof ModelConnectionHintSourceElement){&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;elements.add((ModelConnectionHintSourceElement) i);&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;return elements;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="getExternalSourceElements" unique="false" upperBound="-1"
          eType="#//mapping/ModelConnectionHintExternalSourceElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="EList&lt;ModelConnectionHintExternalSourceElement> elements= new org.eclipse.emf.common.util.BasicEList&lt;>();&#xD;&#xA;&#xD;&#xA;for(ModelConnectionHintSourceInterface i : this.getSourceElements()){&#xD;&#xA;&#x9;if(i instanceof ModelConnectionHintExternalSourceElement){&#xD;&#xA;&#x9;&#x9;elements.add((ModelConnectionHintExternalSourceElement) i);&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;return elements;"/>
        </eAnnotations>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="targetAttributes" lowerBound="1"
          upperBound="-1" eType="#//mapping/ModelConnectionHintTargetAttribute" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="sourceElements" lowerBound="1"
          upperBound="-1" eType="#//mapping/ModelConnectionHintSourceInterface" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="AttributeMappingSourceElement">
      <eGenericSuperTypes eClassifier="#//mapping/LocalModifiedAttributeElementType">
        <eTypeArguments eClassifier="#//metamodel/SourceSection"/>
        <eTypeArguments eClassifier="#//metamodel/SourceSectionClass"/>
        <eTypeArguments eClassifier="#//metamodel/SourceSectionReference"/>
        <eTypeArguments eClassifier="#//metamodel/SourceSectionAttribute"/>
      </eGenericSuperTypes>
      <eGenericSuperTypes eClassifier="#//mapping/AttributeMappingSourceInterface"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ModelConnectionHintSourceElement">
      <eGenericSuperTypes eClassifier="#//mapping/LocalModifiedAttributeElementType">
        <eTypeArguments eClassifier="#//metamodel/SourceSection"/>
        <eTypeArguments eClassifier="#//metamodel/SourceSectionClass"/>
        <eTypeArguments eClassifier="#//metamodel/SourceSectionReference"/>
        <eTypeArguments eClassifier="#//metamodel/SourceSectionAttribute"/>
      </eGenericSuperTypes>
      <eGenericSuperTypes eClassifier="#//mapping/ModelConnectionHintSourceInterface"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ModelConnectionHintTargetAttribute">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="constraints" value="sourceMatchesPossibleContainerType"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="sourceMatchesPossibleContainerType" value="Tuple {&#xD;&#xA;&#x9;message : String = &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;'The type of the parent hint group\'s target section (\'' + self.oclContainer().oclContainer().oclAsType(pamtram::mapping::MappingHintGroupType).targetMMSection.eClass.name + &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;'\') cannot be connected to (contained in) the type of the class containing the target attribute (\'' + self.source.oclAsType(pamtram::metamodel::TargetSectionAttribute).oclContainer().oclAsType(pamtram::metamodel::Class).name + '\')!',&#xD;&#xA;&#x9;severity : Integer = 4,&#xD;&#xA;&#x9;status : Boolean = &#xD;&#xA;&#x9;&#x9;let targetMMSection = self.oclContainer().oclContainer().oclAsType(pamtram::mapping::MappingHintGroupType).targetMMSection in&#xD;&#xA;&#x9;&#x9;if self.source.oclType() = OclVoid or targetMMSection.oclType() = OclVoid then&#xD;&#xA;&#x9;&#x9;&#x9;true else&#xD;&#xA;&#x9;&#x9;&#x9;self.source.oclAsType(pamtram::metamodel::TargetSectionAttribute).oclContainer().oclAsType(pamtram::metamodel::Class).eClass.eAllContainments->exists(r : ecore::EReference | r.eReferenceType.isSuperTypeOf(targetMMSection.eClass))&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;}.status"/>
      </eAnnotations>
      <eGenericSuperTypes eClassifier="#//mapping/ModifiedAttributeElementType">
        <eTypeArguments eClassifier="#//metamodel/TargetSection"/>
        <eTypeArguments eClassifier="#//metamodel/TargetSectionClass"/>
        <eTypeArguments eClassifier="#//metamodel/TargetSectionReference"/>
        <eTypeArguments eClassifier="#//metamodel/TargetSectionAttribute"/>
      </eGenericSuperTypes>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="MappingHintType" abstract="true" eSuperTypes="#//mapping/MappingHintBaseType"/>
    <eClassifiers xsi:type="ecore:EClass" name="HintImporterMappingHint" abstract="true"
        eSuperTypes="#//mapping/MappingHintType"/>
    <eClassifiers xsi:type="ecore:EClass" name="MappedAttributeValueExpander" abstract="true"
        eSuperTypes="#//mapping/HintImporterMappingHint">
      <eOperations name="getSourceAttribute" eType="#//metamodel/SourceSectionAttribute">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="if(this instanceof LocalMappedAttributeValueExpander) {&#xD;&#xA;&#x9;return ((LocalMappedAttributeValueExpander) this).getSource();&#xD;&#xA;} else if(this instanceof ExternalMappedAttributeValueExpander) {&#xD;&#xA;&#x9;return ((ExternalMappedAttributeValueExpander) this).getSource();&#xD;&#xA;} else {&#xD;&#xA;&#x9;return null;&#xD;&#xA;}"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="getModifiers" upperBound="-1" eType="#//mapping/AttributeValueModifierSet">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="if(this instanceof LocalMappedAttributeValueExpander) {&#xD;&#xA;&#x9;return ((LocalMappedAttributeValueExpander) this).getModifier();&#xD;&#xA;} else if(this instanceof ExternalMappedAttributeValueExpander) {&#xD;&#xA;&#x9;return ((ExternalMappedAttributeValueExpander) this).getModifier();&#xD;&#xA;} else {&#xD;&#xA;&#x9;return null;&#xD;&#xA;}"/>
        </eAnnotations>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="hintsToExpand" lowerBound="1"
          upperBound="-1" eType="#//mapping/ExpandableHint"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="LocalMappedAttributeValueExpander">
      <eGenericSuperTypes eClassifier="#//mapping/LocalModifiedAttributeElementType">
        <eTypeArguments eClassifier="#//metamodel/SourceSection"/>
        <eTypeArguments eClassifier="#//metamodel/SourceSectionClass"/>
        <eTypeArguments eClassifier="#//metamodel/SourceSectionReference"/>
        <eTypeArguments eClassifier="#//metamodel/SourceSectionAttribute"/>
      </eGenericSuperTypes>
      <eGenericSuperTypes eClassifier="#//mapping/MappedAttributeValueExpander"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="MappedAttributeValuePrepender" eSuperTypes="#//mapping/LocalMappedAttributeValueExpander"/>
    <eClassifiers xsi:type="ecore:EClass" name="MappedAttributeValueAppender" eSuperTypes="#//mapping/LocalMappedAttributeValueExpander"/>
    <eClassifiers xsi:type="ecore:EClass" name="FixedValue" eSuperTypes="#//NamedElement #//mapping/AttributeMappingSourceInterface #//mapping/AttributeMatcherSourceInterface #//mapping/ModelConnectionHintSourceInterface #//metamodel/InstancePointerSourceInterface #//metamodel/AttributeValueConstraintSourceInterface">
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" lowerBound="1"
          eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="GlobalAttribute" eSuperTypes="#//NamedElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="constraints" value="sourceAttributeHasUpperBoundOne"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="sourceAttributeHasUpperBoundOne" value="Tuple {&#xD;&#xA;&#x9;message : String = &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;'Global attributes may only be defined for attributes that have an upper bound of 1!',&#xD;&#xA;&#x9;severity : Integer = 4,&#xD;&#xA;&#x9;status : Boolean = &#xD;&#xA;&#x9;&#x9;if self.source.oclType() = OclVoid then&#xD;&#xA;&#x9;&#x9;&#x9;true else&#xD;&#xA;&#x9;&#x9;&#x9;self.source.attribute.upperBound = 1&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;}.status"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="source" lowerBound="1"
          eType="#//metamodel/SourceSectionAttribute"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="modifier" upperBound="-1"
          eType="#//mapping/AttributeValueModifierSet"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="GlobalAttributeImporter" eSuperTypes="#//NamedElement #//mapping/AttributeMappingSourceInterface #//mapping/AttributeMatcherSourceInterface #//mapping/ModelConnectionHintSourceInterface #//metamodel/InstancePointerSourceInterface #//metamodel/AttributeValueConstraintSourceInterface">
      <eStructuralFeatures xsi:type="ecore:EReference" name="globalAttribute" lowerBound="1"
          eType="#//mapping/GlobalAttribute"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="AttributeMappingSourceInterface" abstract="true"
        interface="true" eSuperTypes="#//mapping/MappingHintSourceInterface"/>
    <eClassifiers xsi:type="ecore:EClass" name="MappingHintSourceInterface" abstract="true"
        interface="true" eSuperTypes="#//NamedElement">
      <eOperations name="getSourceAttribute" lowerBound="1" eType="#//metamodel/SourceSectionAttribute"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ModelConnectionHintSourceInterface"
        abstract="true" interface="true" eSuperTypes="#//mapping/MappingHintSourceInterface"/>
    <eClassifiers xsi:type="ecore:EClass" name="AttributeMappingExternalSourceElement">
      <eGenericSuperTypes eClassifier="#//mapping/ExternalModifiedAttributeElementType">
        <eTypeArguments eClassifier="#//metamodel/SourceSection"/>
        <eTypeArguments eClassifier="#//metamodel/SourceSectionClass"/>
        <eTypeArguments eClassifier="#//metamodel/SourceSectionReference"/>
        <eTypeArguments eClassifier="#//metamodel/SourceSectionAttribute"/>
      </eGenericSuperTypes>
      <eGenericSuperTypes eClassifier="#//mapping/AttributeMappingSourceInterface"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ExternalModifiedAttributeElementType"
        abstract="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="constraints" value="sourceAttributeMatchesContainerSection"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="sourceAttributeMatchesContainerSection" value="Tuple {&#xD;&#xA;&#x9;message : String = &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;'The source attribute \'' + self.source.oclAsType(pamtram::metamodel::Attribute).name + '\' is not part of a container section of the source section of the parent mapping \'' + self.getMapping().sourceMMSection.name + '\'!',&#xD;&#xA;&#x9;severity : Integer = 4,&#xD;&#xA;&#x9;status : Boolean = &#xD;&#xA;&#x9;&#x9;if self.getMapping().oclType() = OclVoid then&#xD;&#xA;&#x9;&#x9;&#x9;true else&#xD;&#xA;&#x9;&#x9;&#x9;let sourceMMSection = self.getMapping().sourceMMSection in&#xD;&#xA;&#x9;&#x9;&#x9;if self.source.oclType() = OclVoid or sourceMMSection.oclType() = OclVoid then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;true else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;self.source.oclAsType(pamtram::metamodel::SourceSectionAttribute).getContainingSection().oclAsType(pamtram::metamodel::SourceSection).isContainerFor(sourceMMSection.oclAsType(pamtram::metamodel::SourceSection))&#xD;&#xA;&#x9;&#x9;&#x9;endif&#x9;&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;}.status"/>
      </eAnnotations>
      <eTypeParameters name="S">
        <eBounds eClassifier="#//metamodel/Section">
          <eTypeArguments eTypeParameter="#//mapping/ExternalModifiedAttributeElementType/S"/>
          <eTypeArguments eTypeParameter="#//mapping/ExternalModifiedAttributeElementType/C"/>
          <eTypeArguments eTypeParameter="#//mapping/ExternalModifiedAttributeElementType/R"/>
          <eTypeArguments eTypeParameter="#//mapping/ExternalModifiedAttributeElementType/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="C">
        <eBounds eClassifier="#//metamodel/Class">
          <eTypeArguments eTypeParameter="#//mapping/ExternalModifiedAttributeElementType/S"/>
          <eTypeArguments eTypeParameter="#//mapping/ExternalModifiedAttributeElementType/C"/>
          <eTypeArguments eTypeParameter="#//mapping/ExternalModifiedAttributeElementType/R"/>
          <eTypeArguments eTypeParameter="#//mapping/ExternalModifiedAttributeElementType/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="R">
        <eBounds eClassifier="#//metamodel/Reference">
          <eTypeArguments eTypeParameter="#//mapping/ExternalModifiedAttributeElementType/S"/>
          <eTypeArguments eTypeParameter="#//mapping/ExternalModifiedAttributeElementType/C"/>
          <eTypeArguments eTypeParameter="#//mapping/ExternalModifiedAttributeElementType/R"/>
          <eTypeArguments eTypeParameter="#//mapping/ExternalModifiedAttributeElementType/A"/>
        </eBounds>
      </eTypeParameters>
      <eTypeParameters name="A">
        <eBounds eClassifier="#//metamodel/Attribute">
          <eTypeArguments eTypeParameter="#//mapping/ExternalModifiedAttributeElementType/S"/>
          <eTypeArguments eTypeParameter="#//mapping/ExternalModifiedAttributeElementType/C"/>
          <eTypeArguments eTypeParameter="#//mapping/ExternalModifiedAttributeElementType/R"/>
          <eTypeArguments eTypeParameter="#//mapping/ExternalModifiedAttributeElementType/A"/>
        </eBounds>
      </eTypeParameters>
      <eGenericSuperTypes eClassifier="#//mapping/ModifiedAttributeElementType">
        <eTypeArguments eTypeParameter="#//mapping/ExternalModifiedAttributeElementType/S"/>
        <eTypeArguments eTypeParameter="#//mapping/ExternalModifiedAttributeElementType/C"/>
        <eTypeArguments eTypeParameter="#//mapping/ExternalModifiedAttributeElementType/R"/>
        <eTypeArguments eTypeParameter="#//mapping/ExternalModifiedAttributeElementType/A"/>
      </eGenericSuperTypes>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ModelConnectionHintExternalSourceElement">
      <eGenericSuperTypes eClassifier="#//mapping/ExternalModifiedAttributeElementType">
        <eTypeArguments eClassifier="#//metamodel/SourceSection"/>
        <eTypeArguments eClassifier="#//metamodel/SourceSectionClass"/>
        <eTypeArguments eClassifier="#//metamodel/SourceSectionReference"/>
        <eTypeArguments eClassifier="#//metamodel/SourceSectionAttribute"/>
      </eGenericSuperTypes>
      <eGenericSuperTypes eClassifier="#//mapping/ModelConnectionHintSourceInterface"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="AttributeMatcherExternalSourceElement">
      <eGenericSuperTypes eClassifier="#//mapping/ExternalModifiedAttributeElementType">
        <eTypeArguments eClassifier="#//metamodel/SourceSection"/>
        <eTypeArguments eClassifier="#//metamodel/SourceSectionClass"/>
        <eTypeArguments eClassifier="#//metamodel/SourceSectionReference"/>
        <eTypeArguments eClassifier="#//metamodel/SourceSectionAttribute"/>
      </eGenericSuperTypes>
      <eGenericSuperTypes eClassifier="#//mapping/AttributeMatcherSourceInterface"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ExternalMappedAttributeValueExpander"
        abstract="true">
      <eGenericSuperTypes eClassifier="#//mapping/ExternalModifiedAttributeElementType">
        <eTypeArguments eClassifier="#//metamodel/SourceSection"/>
        <eTypeArguments eClassifier="#//metamodel/SourceSectionClass"/>
        <eTypeArguments eClassifier="#//metamodel/SourceSectionReference"/>
        <eTypeArguments eClassifier="#//metamodel/SourceSectionAttribute"/>
      </eGenericSuperTypes>
      <eGenericSuperTypes eClassifier="#//mapping/MappedAttributeValueExpander"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ExternalMappedAttributeValuePrepender"
        eSuperTypes="#//mapping/ExternalMappedAttributeValueExpander"/>
    <eClassifiers xsi:type="ecore:EClass" name="ExternalMappedAttributeValueAppender"
        eSuperTypes="#//mapping/ExternalMappedAttributeValueExpander"/>
    <eClassifiers xsi:type="ecore:EClass" name="ExpandableHint" abstract="true" interface="true"/>
    <eClassifiers xsi:type="ecore:EClass" name="MatchToLowerCaseConverter" eSuperTypes="#//mapping/AttributeValueModifier">
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="regex" lowerBound="1"
          eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="MatchToUpperCaseConverter" eSuperTypes="#//mapping/AttributeValueModifier">
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="regex" lowerBound="1"
          eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eClassifiers>
  </eSubpackages>
</ecore:EPackage>
